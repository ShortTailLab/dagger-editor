<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:ns1="*"
		  width="200" height="100%">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import emitter.EmitterPanel;
			
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			import spark.components.Panel;
			import spark.components.VGroup;
			// ---------------------------------------------------------
			
			var mMonsterPanel:MonsterList = null;
			
			////// entrance
			public function init():void
			{
				//this.mMonsterPanel.init();
				this.mMonsterPanel = new MonsterList();
				this.mMonsterGroup.addElement(this.mMonsterPanel);
				this.mMonsterPanel.init();
				
				var menu:ContextMenu = new ContextMenu;
				
				var createMonster:ContextMenuItem = new ContextMenuItem("创建怪物");
				createMonster.addEventListener(
					ContextMenuEvent.MENU_ITEM_SELECT, this.onCreateMonster
				);
				menu.addItem( createMonster );
				
				var createTrap:ContextMenuItem = new ContextMenuItem("创建陷阱");
				createTrap.addEventListener(
					ContextMenuEvent.MENU_ITEM_SELECT, this.onCreateTrap
				);
				menu.addItem( createTrap );
				
				var createBullet:ContextMenuItem = new ContextMenuItem("创建子弹");
				createBullet.addEventListener(
					ContextMenuEvent.MENU_ITEM_SELECT, this.onCreateBullet
				);
				menu.addItem( createBullet );
				
				var createEmitter:ContextMenuItem = new ContextMenuItem("创建发射器");
				createEmitter.addEventListener(
					ContextMenuEvent.MENU_ITEM_SELECT, this.onCreateEmitter
				);
				menu.addItem( createEmitter );
				
				var paste:ContextMenuItem = new ContextMenuItem("粘贴");
				paste.addEventListener(
					ContextMenuEvent.MENU_ITEM_SELECT, this.onPaste
				);
				menu.addItem( paste );
				
				if( Runtime.getInstance().pasteTarget )
					paste.enabled = true;
				else 
					paste.enabled = false;
				Runtime.getInstance().addEventListener(Runtime.ON_PASTE_TARGET_CHANGE,
					function(e:Event):void
					{
						if( Runtime.getInstance().pasteTarget )
							paste.enabled = true;
						else 
							paste.enabled = false;
					}
				);
				this.mMonsterGroup.contextMenu = menu;
			}
		
			public static var CUSTOM_BEHAVIOR_TYPES:Array = ["HOMEMADE", "ChapterBoss", "MinorBoss"];
			
			public static function isCustomBehaviorType(type) : Boolean
			{
				return CUSTOM_BEHAVIOR_TYPES.indexOf(type) >= 0;
			}
			
			public static function genArgsTemplate(type:String):Array
			{
				var profileType = Data.getInstance().typeToProfileType(type);
				var args:Array = Utils.deepCopy( Data.getInstance().dynamicArgs[profileType] ) as Array;
				var extraArgs:Array = Utils.deepCopy( Data.getInstance().dynamicArgs[type] ) as Array;
				ConfigPanel.mergeTo(extraArgs, args);
				return args;
			}
			
			public static function genBaseArgsTemplate(profileType:String):Array
			{
				return Utils.deepCopy( Data.getInstance().dynamicArgs[profileType] ) as Array; 
			}
			
			//public static function genData( type:String, profile_type:String, id:String = null ):Array
			public static function genData( type:String, id:String = null ):Array
			{
				var profileType = Data.getInstance().typeToProfileType(type);
				var dynamicArgs:Array = Utils.deepCopy( Data.getInstance().dynamicArgs[profileType] ) as Array;
				
				var monster:Object = Data.getInstance().getEnemyProfileById( 
					Runtime.getInstance().currentLevelID, 
					id
				);
				
				var skins:Array = [];
				for( var key:String in Data.getInstance().skins )
					skins.push( key );
				skins.sort();
				
				// default items
				if( !monster ) 
				{					
					var nextId = Data.getInstance().getMaxMonsterId( Runtime.getInstance().currentLevelID );

					var extraArgs:Array = Utils.deepCopy( Data.getInstance().dynamicArgs[type] ) as Array;
					if(extraArgs)
						ConfigPanel.mergeTo(extraArgs, dynamicArgs);
					
					setArgEntry(dynamicArgs, "type", ["基础数据", "type", "string", type, "类型" ]);
					setArgEntry(dynamicArgs, "monster_id", ["基础数据", "monster_id", "string", String(nextId+1), "Id" ]);
					setArgEntry(dynamicArgs, "monster_name", ["基础数据", "monster_name", "string", "实体"+String(nextId+1), "中文名字" ]);
					setArgEntry(dynamicArgs, "face", ["基础数据", "face", "combo_box", -1, "资源前缀", [skins, skins]]);
										
					return dynamicArgs;
				} 
				else 
				{
					var extraArgs:Array = Utils.deepCopy( Data.getInstance().dynamicArgs[type] ) as Array;
					if(extraArgs)
						ConfigPanel.mergeTo(extraArgs, dynamicArgs);
					
					for each( var item:Array in dynamicArgs )
					{
						var argKey = item[ConfigPanel.kKEY];
						if( argKey in monster )
						{
							item[ConfigPanel.kDEFAULT] = monster[argKey];
						}
					}
					
					setArgEntry(dynamicArgs, "type", ["基础数据", "type", "string", monster.type, "类型", monster.monster_id ]);
					setArgEntry(dynamicArgs, "monster_id", ["基础数据", "monster_id", "string", monster.monster_id, "Id" ]);
					setArgEntry(dynamicArgs, "monster_name", ["基础数据", "monster_name", "string", monster.monster_name, "中文名字"]);
					setArgEntry(dynamicArgs, "face", ["基础数据", "face", "combo_box", monster.face, "资源前缀", [skins, skins]]);
					
					return dynamicArgs;
				}
			}
			
			public static function setArgEntry(args:Array, key:String, replacement:Array):void
			{
				for(var i=0; i<args.length; i++)
				{
					if(args[i][ConfigPanel.kKEY] == key)
					{
						args[i] = replacement;
						break;
					}
				}
			}
			
			protected function onPaste(e:ContextMenuEvent):void
			{
				var level:Object = Data.getInstance().getLevelProfileById( Runtime.getInstance().currentLevelID );
				
				var profile:Object = Data.getInstance().getEnemyProfileById( 
					Runtime.getInstance().pasteTargetLevel, 
					Runtime.getInstance().pasteTarget 
				);
				
				if( !profile || !level ) 
					return;
				
				if (profile.type == EmitterPanel.PROFILE_EMITTER_TYPE) {
					var nextId:int = Data.getInstance().getMaxMonsterId( Runtime.getInstance().currentLevelID )+1;
					var data:Object = Utils.cloneObjectData(profile);
					data.monster_id = nextId.toString();
					Data.getInstance().makeMonster(Runtime.getInstance().currentLevelID, data);
					
					var panel:EmitterPanel = new EmitterPanel();
					panel.setData(data, nextId.toString());
					PopUpManager.addPopUp(panel, MapEditor.getInstance(), true);
					PopUpManager.centerPopUp(panel);
					return;
				}
				
				var args:Array = EditMonster.genData(profile.type);
				
				for each( var item:Array in args )
				{
					var key:String = item[ConfigPanel.kKEY];
					if( key in profile )
						item[ConfigPanel.kDEFAULT] = profile[key];
				}
				
				var t:ConfigPanel = new ConfigPanel( );
				t.init( 
					function( configs:Object ):void {
						Data.getInstance().makeMonster( 
							Runtime.getInstance().currentLevelID, configs 
						);
					}, 
					function (err:String):void {
						Alert.show( err );
					}, 
					args
				);
			}
		
			protected function onCreateMonster(evt:Event):void
			{				
				var level:Object = Data.getInstance().getLevelProfileById( Runtime.getInstance().currentLevelID );
				if( !level ) 
					return ;
				
				var t:ConfigPanel = new ConfigPanel( );
				t.init( 
					function( configs:Object ):void 
					{
						Data.getInstance().makeMonster( 
							Runtime.getInstance().currentLevelID, 
							configs 
						);
					}, 
					function (err:String):void 
					{
						Alert.show( err );
					}, 
					EditMonster.genData( "Spearman")
				);
			}
			
			protected function onCreateBullet(evt:Event):void
			{
				var level:Object = Data.getInstance().getLevelProfileById( Runtime.getInstance().currentLevelID );
				if( !level ) return ;
				
				var t:ConfigPanel = new ConfigPanel( );
				t.init( 
					function( configs:Object ):void {	
						Data.getInstance().makeMonster( Runtime.getInstance().currentLevelID, configs );
						
					}, 
					function (err:String):void {
						Alert.show( err );
					}, EditMonster.genData( Data.getInstance().dynamicArgs.BulletType[0] )
				);
			}
			
			protected function onCreateEmitter(event:Event):void {
				var level:Object = Data.getInstance().getLevelProfileById( Runtime.getInstance().currentLevelID );
				if( !level ) 
					return ;
				
				var nextId:int = Data.getInstance().getMaxMonsterId( Runtime.getInstance().currentLevelID )+1;
				var data:Object = Utils.cloneObjectData(EmitterPanel.DEFAULT_EMITTER);
				data.monster_id = nextId.toString();
				data.monster_name = "发射器组合";
				Data.getInstance().makeMonster(Runtime.getInstance().currentLevelID, data);
				
				var panel:EmitterPanel = new EmitterPanel();
				panel.setData(data, nextId.toString());
				PopUpManager.addPopUp(panel, MapEditor.getInstance(), true);
				PopUpManager.centerPopUp(panel);
			}
			
			protected function onCreateTrap(evt:Event):void
			{
				var level:Object = Data.getInstance().getLevelProfileById( Runtime.getInstance().currentLevelID );
				if( !level ) return ;
				
				var t:ConfigPanel = new ConfigPanel( );
				t.init( 
					function( configs:Object ):void 
					{
						Data.getInstance().makeMonster( Runtime.getInstance().currentLevelID, configs );
					}, 
					function (err:String):void {
						Alert.show( err );
					}, EditMonster.genData( Data.getInstance().dynamicArgs.TrapType[0] )
				);
			}
			
			public function onEditEnemy( lid:String, id:String ):void
			{
				var ld:Object = Data.getInstance().getBulletsByLevelId(lid);
				if (ld[id] && ld[id].type == EmitterPanel.PROFILE_EMITTER_TYPE) {
					var panel:EmitterPanel = new EmitterPanel();
					panel.setData(ld[id], ld[id].monster_id);
					PopUpManager.addPopUp(panel, MapEditor.getInstance(), true);
					PopUpManager.centerPopUp(panel);
					return;
				}
				
				var level:Object = Data.getInstance().getLevelProfileById( Runtime.getInstance().currentLevelID );
				if( !level || !( id in level.monsters ) ) 
					return;
								
				var oldMonsterId = id;
				
				var t:ConfigPanel = new ConfigPanel( );
				t.init( 
					function( configs:Object ):void 
					{
						if(oldMonsterId == configs.monster_id)
						{
							// no id change, simple update
							Data.getInstance().updateMonster(lid, configs);
						}
						else if( Data.getInstance().monsterExists(lid, configs.monster_id))
						{
							// id change and exsiting, no action
							Alert.show("单位ID已经存在，无法更改单位", "错误");
						}
						else
						{
							Alert.show(
								"变更了单位的ID，已经布置好的该单位会丢失，是否继续？", 
								"变更单位ID", 
								Alert.OK | Alert.CANCEL, 
								null, 
								function(evt:Object){
									if (evt.detail == Alert.OK) 
									{
										Data.getInstance().makeMonster(lid, configs);
										Data.getInstance().eraseMonster(lid, oldMonsterId);
									}
								}
							);
						}
						Runtime.getInstance().forceLevelChangeEvent();
					}, 
					function (err:String):void 
					{
						Alert.show( err );
					}, 
					EditMonster.genData( level.monsters[id].type, id)
				);
				t.mRootPanel.title = level.monsters[id].type;
			}
		]]>
	</fx:Script>
	
	<s:BorderContainer id="mSelectorArea" x="0" y="0" width="100%" height="100%" borderVisible="false"
					   dropShadowVisible="true">
		<s:VGroup x="0" y="0" width="100%" height="100%">
			<s:Panel id="mMonsterGroup" width="100%" height="100%" dropShadowVisible="false" title="怪物">
				<!--<ns1:MonsterList id="mMonsterPanel" left="5" right="5" top="5" bottom="5">
				</ns1:MonsterList>-->
			</s:Panel>
		</s:VGroup>
	</s:BorderContainer>
</s:Module>
