<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="250" height="100%" >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.edit.EditingMode;
			
			import mx.controls.Alert;
			
			import spark.components.Group;
			import spark.components.HGroup;
			import spark.components.Panel;
			import spark.components.VGroup;
			import spark.components.VScrollBar;
			// ---------------------------------------------------------
			
			protected var mFormation:FormationSelector = null;
			protected var mBullet:BulletSelector = null;
			protected var mMonster:MonsterSelector = null;
			
			////// entrance
			public function init():void
			{
				
				this.mFormation = new FormationSelector;
				this.mFormation.percentWidth = 100;

				var hgroup:HGroup = new HGroup();
				with( hgroup ) {
					percentWidth = 100; percentHeight = 100; horizontalAlign = "left";
				}
			
				var group:Group = new Group();
				with( group ) {
					percentWidth = 100; percentHeight = 100; clipAndEnableScrolling = true;
				}
				
				var vscrollbar:VScrollBar = new VScrollBar();
				vscrollbar.percentHeight = 100;
				vscrollbar.viewport = group;
			
				group.addElement( this.mFormation );
				hgroup.addElement( group );
				hgroup.addElement( vscrollbar );
				
				this.mFormationPanel.addElement( hgroup );

				{
					
					hgroup = new HGroup();
					with( hgroup ) {
						percentWidth = 100; percentHeight = 100; horizontalAlign = "left";
					}
					
					group = new Group();
					with( group ) {
						percentWidth = 100; percentHeight = 100; clipAndEnableScrolling = true;
					}
					
					vscrollbar = new VScrollBar();
					with( vscrollbar ) {
						percentHeight = 100;
					}
					vscrollbar.viewport = group;
					
					this.mBullet = new BulletSelector;
					with( this.mBullet ) {
						percentWidth = percentHeight = 100;
					}
					
					group.addElement( this.mBullet );
					hgroup.addElement( group );
					hgroup.addElement( vscrollbar );
					
					this.mBulletPanel.addElement( hgroup );
					this.mCreateBulletButton.addEventListener( MouseEvent.CLICK, this.onCreateBullet);
				}
				
				{
					
					hgroup = new HGroup();
					with( hgroup ) {
						percentWidth = 100; percentHeight = 100; horizontalAlign = "left";
					}

					group = new Group();
					with( group ) {
						percentWidth = 100; percentHeight = 100; clipAndEnableScrolling = true;
					}
					
					vscrollbar = new VScrollBar();
					with( vscrollbar ) {
						percentHeight = 100;
					}
					vscrollbar.viewport = group;
					
					this.mMonster = new MonsterSelector;
					with( this.mMonster ) {
						percentWidth = percentHeight = 100;
					}

					group.addElement( this.mMonster );
					hgroup.addElement( group );
					hgroup.addElement( vscrollbar );
					
					this.mMonsterPanel.addElement( hgroup );
					this.mCreateMonsterButton.addEventListener( MouseEvent.CLICK, this.onCreateMonster);
					this.mCreateTrapButton.addEventListener( MouseEvent.CLICK, this.onCreateTrap );
				}
			}
			
			public static var kCONFIGURABLE:String = "HOMEMADE";
			
			protected function genData( type:String, profile_type:String, id:String = null ):Array
			{
				var dynamic_data:Array = Data.getInstance().dynamicArgs[profile_type];
				var monster:Object = Data.getInstance().getEnemyProfileById( 
					Runtime.getInstance().currentLevelID, id
				);
				
				var skins:Array = [];
				for( var key:String in Data.getInstance().skins )
					skins.push( key );
				skins.sort();
				
				// default items
				if( !id || !monster ) {
					
					var enemies:Object = Data.getInstance().getLevelData(
						Runtime.getInstance().currentLevelID 
					).monsters;
					 
					var nextId:int = int(Runtime.getInstance().currentLevelID+"001");
					for each ( var m:Object in enemies )
					{
						nextId = Math.max( nextId, m.monster_id );
					}
					
					var data:Array = [
						["基础数据", "type", type, -1, "类型" ],
						["基础数据", "monster_id", "string", String(nextId+1), "Id" ],
						["基础数据", "monster_name", "string", "神秘的怪", "中文名字" ],
						["基础数据", "face", "combo_box", -1, "资源前缀", [skins, skins]]
					];
					
					ConfigPanel.mergeTo( dynamic_data, data );
				} else {
					for each( var item:Array in dynamic_data )
					{
						if( item[ConfigPanel.kKEY] in monster )
						{
							item[ConfigPanel.kDEFAULT] = monster[item[ConfigPanel.kKEY]];
						}
					}
					
					data = [
						["基础数据", "type", type, monster.type, "类型" ],
						["基础数据", "monster_id", "string", monster.monster_id, "Id" ],
						["基础数据", "monster_name", "string", monster.monster_name, "中文名字" ],
						["基础数据", "face", "combo_box", monster.face, "资源前缀", [skins, skins]]
					]; 
					
					ConfigPanel.mergeTo( dynamic_data, data );
				}
				
				return data;
			}
			
			protected function onCreateMonster(evt:Event):void
			{				
				var level:Object = Data.getInstance().getLevelData( Runtime.getInstance().currentLevelID );
				if( !level ) return ;
				
				var t:ConfigPanel = new ConfigPanel( );
				t.init( function( configs:Object ):void {
		
					Data.getInstance().makeMonster( Runtime.getInstance().currentLevelID, configs.monster_id, configs );
					
				}, function (err:String):void {
					Alert.show( err );
				}, this.genData( "MonsterType", "MonsterProfile" ), false, MapEditor.getInstance());
			}
			
			protected function onCreateBullet(evt:Event):void
			{
				var level:Object = Data.getInstance().getLevelData( Runtime.getInstance().currentLevelID );
				if( !level ) return ;
				
				var t:ConfigPanel = new ConfigPanel( );
				t.init( function( configs:Object ):void {
					
					Data.getInstance().makeMonster( Runtime.getInstance().currentLevelID, configs.monster_id, configs );
					
				}, function (err:String):void {
					Alert.show( err );
				}, this.genData( "BulletType", "BulletProfile" ), false, MapEditor.getInstance());
			}
			
			protected function onCreateTrap(evt:Event):void
			{
				var level:Object = Data.getInstance().getLevelData( Runtime.getInstance().currentLevelID );
				if( !level ) return ;
				
				var t:ConfigPanel = new ConfigPanel( );
				t.init( function( configs:Object ):void {
					
					Data.getInstance().makeMonster( Runtime.getInstance().currentLevelID, configs.monster_id, configs );
					
				}, function (err:String):void {
					Alert.show( err );
				}, this.genData( "TrapType", "TrapProfile" ), false, MapEditor.getInstance());
			}
			
			public function onEditEnemy( lid:String, id:String ):void
			{
				var level:Object = Data.getInstance().getLevelData( Runtime.getInstance().currentLevelID );
				if( !level || !( id in level.monsters ) ) return ;
				
				var type:String = "", profile:String = "";
				if( Data.getInstance().isMonster( level.monsters[id].type ) )
				{
					type = "MonsterType"; profile = "MonsterProfile";
				} 
				else if ( Data.getInstance().isTrap( level.monsters[id].type ) )
				{
					type = "TrapType"; profile = "TrapProfile";
				}
				else if ( Data.getInstance().isBullet( level.monsters[id].type ) )
				{
					type = "BulletType"; profile = "BulletProfile";
				} else return;
				
				var t:ConfigPanel = new ConfigPanel( );
				t.init( function( configs:Object ):void {
					
					Data.getInstance().updateMonster(lid, id, configs);
					
				}, function (err:String):void {
					Alert.show( err );
				},this.genData( type, profile, id ), false, MapEditor.getInstance());
			}
		]]>
	</fx:Script>
	
	<s:BorderContainer id="mSelectorArea" x="0" y="0" width="100%" height="100%" borderVisible="false"
					   dropShadowVisible="true">
		<s:VGroup x="0" y="0" width="100%" height="100%">
			<s:Panel id="mFormationPanel" width="100%" height="25%" dropShadowVisible="false" title="阵型">
			</s:Panel>
			<s:Panel width="100%" height="25%" dropShadowVisible="false" title="子弹">
				<s:Group id="mBulletPanel" left="5" right="5" top="5" bottom="25">
				</s:Group>
				<s:Button id="mCreateBulletButton" right="5" bottom="2.5" label="创建子弹"/>
			</s:Panel>
			
			<s:Panel width="100%" height="50%" dropShadowVisible="false" title="怪物">
				<s:Group id="mMonsterPanel" left="5" right="5" top="5" bottom="25">
				</s:Group>
				<s:Button id="mCreateMonsterButton" right="5" bottom="2.5" label="创建怪物"/>
				<s:Button id="mCreateTrapButton" right="82" bottom="2.5" label="创建陷阱"/>
			</s:Panel>
		</s:VGroup>
	</s:BorderContainer>
</s:Module>
