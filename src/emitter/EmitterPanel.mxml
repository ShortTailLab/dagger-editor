<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:emitter="emitter.*"
			   close="onPressClose(event)" creationComplete="onCreate()" title="发射器组合编辑">
	<fx:Declarations>
		<s:RadioButtonGroup id="radiogroup1"/>
		<s:RadioButtonGroup id="radiogroup2"/>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import misc.PathEditor;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import spark.components.CheckBox;
			import spark.components.ComboBox;
			import spark.events.IndexChangeEvent;
			
			//--------------------------------------
			// parser helpers
			//--------------------------------------
			private static function strToComboBox(val:String, outlet:spark.components.ComboBox): void {
				outlet.selectedIndex = outlet.dataProvider.getItemIndex(val);
			}
			private static function comboBoxToStr(outlet:spark.components.ComboBox):* { 
				return outlet.selectedItem;
			}
			
			private static function numberToText(val:Number, outlet:TextInput): void {
				outlet.text = String(val);
			}
			private static function textToNumber(outlet:TextInput): Number {
				return Number(outlet.text);
			}
			
			private static function numberToCheck(val:Number, outlet:spark.components.CheckBox): void {
				outlet.selected = val == 1;
			}
			private static function checkToNumber(outlet:CheckBox): Number{
				return outlet.selected ? 1 : 0;
			}
			
			private static function numberToCheckFlip(val:Number, outlet:spark.components.CheckBox): void {
				outlet.selected = val == 0;
			}
			private static function checkToNumberFlip(outlet:spark.components.CheckBox): Number{
				return outlet.selected ? 0 : 1;
			}
			
			private static function pathToText(val:Object, outlet:TextInput): void
			{
				outlet.text = JSON.stringify(val);
			}
			private static function textToPath(outlet:TextInput): Object
			{
				// if invalid json, return a vanilla path
				var out:Object = JSON.parse(outlet.text);
				return out ? out : ObjectUtil.copy(PathEditor.PathMeta); 
			}
			
			private static function getBulletTypeAsDataSrc(): ArrayCollection
			{
				return Utils.getKeysAsSortedData( EmitterPanel.BulletMeta );
			}
			
			private static function getResAsDataSrc(): ArrayCollection
			{
				return Utils.getKeysAsSortedData( Data.getInstance().skins );
			}
			
			private static function onChangeValue(event:Event): void
			{
				mInstance.onValueChanged(event);
			}
			
			private static function onEnterText(event:Event): void
			{
				mInstance.onValueChanged(event);
			}
			
			private static function onEditPath(event:Event): void
			{
				var self:TextInput = event.target as TextInput
					
				var pathEditor:PathEditor = new PathEditor;
				PopUpManager.addPopUp(pathEditor, self.parent, true);
				PopUpManager.centerPopUp(pathEditor);
				
				
				pathEditor.setData(JSON.parse(self.text), function(path:Object):void {
					self.text = JSON.stringify(path);
					onChangeValue(event);
				});
			}
			
			private static function onChangeBulletType(event:Event): void
			{
				mInstance.onChangeBulletType(event);
			}
			private static function onChangeBulletRes(event:Event): void
			{
				mInstance.onValueChanged(event);
			}
			
			//--------------------------------------
			// bullet parser templates
			//--------------------------------------
			// DO NOT CHANGE THE KEYS
			private static const BaseBulletParser:Object = {
				type        : { n: 1, toIn : strToComboBox, toVal : comboBoxToStr, label: "子弹类型", controlType: ComboBox, dataSrcGen : getBulletTypeAsDataSrc, handleEvent : { change: onChangeBulletType} },
				res         : { n: 2, toIn : strToComboBox, toVal : comboBoxToStr, label: "资源",    controlType: ComboBox, dataSrcGen : getResAsDataSrc,        handleEvent : { change: onChangeBulletRes}  },
				resRotation : { n: 3, toIn : numberToText,  toVal : textToNumber,  label: "资源角度", controlType: TextInput, handleEvent: {enter: onEnterText} },
				
				pauseTime   : { n: 4, toIn : numberToText,  toVal : textToNumber,  label: "暂停时间(s)",  controlType: TextInput, handleEvent: {enter: onEnterText} },
				duration    : { n: 5, toIn : numberToText,  toVal : textToNumber,  label: "持续时间", controlType: TextInput, handleEvent: {enter: onEnterText} },
				
				direction   : { n: 6, toIn : numberToCheckFlip, toVal : checkToNumberFlip, label: "朝向与速度相同", controlType: CheckBox, handleEvent: {click: onEnterText} },
				speed       : { n: 7, toIn : numberToText,  toVal : textToNumber,  label: "朝向速度(px/s)",  controlType: TextInput, handleEvent: {enter: onEnterText} },
				
				speedMin    : { n: 8, toIn : numberToText,  toVal : textToNumber,  label: "最小速度(px/s)",  controlType: TextInput, handleEvent: {enter: onEnterText} },
				speedMax    : { n: 9, toIn : numberToText,  toVal : textToNumber,  label: "最大速度(px/s)",  controlType: TextInput, handleEvent: {enter: onEnterText} },
				
				a		    : { n: 10, toIn : numberToText,  toVal : textToNumber,  label: "朝向加速度(px/s2)", controlType: TextInput, handleEvent: {enter: onEnterText} },
				w		    : { n: 11, toIn : numberToText,  toVal : textToNumber,  label: "碰撞体/宽(px)",  controlType: TextInput, handleEvent: {enter: onEnterText} }, 
				h		    : { n: 12, toIn : numberToText,  toVal : textToNumber,  label: "碰撞体/高(px)",  controlType: TextInput, handleEvent: {enter: onEnterText} }, 

				scale	    : { n: 20, toIn : numberToText,  toVal : textToNumber,  label: "拉伸",    controlType: TextInput, handleEvent: {enter: onEnterText} },
				scalePerSec : { n: 21, toIn : numberToText,  toVal : textToNumber,   label: "拉伸速度", controlType: TextInput, handleEvent: {enter: onEnterText} },
				scaleMin    : { n: 22, toIn : numberToText,  toVal : textToNumber,   label: "最小拉伸", controlType: TextInput, handleEvent: {enter: onEnterText} },
				scaleMax    : { n: 22, toIn : numberToText,  toVal : textToNumber,   label: "最大拉伸", controlType: TextInput, handleEvent: {enter: onEnterText} },
				
				harm	    : { n: 30, toIn : numberToText,  toVal : textToNumber,  label: "伤害系数", controlType: TextInput, handleEvent: {enter: onEnterText} },				
				health	    : { n: 31, toIn : numberToText,  toVal : textToNumber,  label: "生命", controlType: TextInput, handleEvent: {enter: onEnterText} }
			};
				
			public static const BulletParser:Object = {
				Basic: Utils.fatMerge({
					offset	    : { n:7.1, toIn : numberToText,  toVal : textToNumber, label: "方向偏移", controlType: TextInput, handleEvent: {enter: onEnterText} },
					speedX      : { n:7.2, toIn : numberToText,  toVal : textToNumber, label: "速度X",   controlType: TextInput, handleEvent: {enter: onEnterText} },
					speedY      : { n:7.3, toIn : numberToText,  toVal : textToNumber, label: "速度Y",   controlType: TextInput, handleEvent: {enter: onEnterText} },
					ax		    : { n:7.4, toIn : numberToText,  toVal : textToNumber, label: "加速度X", controlType: TextInput, handleEvent: {enter: onEnterText} },
					ay		    : { n:7.5, toIn : numberToText,  toVal : textToNumber, label: "加速度Y", controlType: TextInput, handleEvent: {enter: onEnterText} },
					rotateSpeed : { n:7.6, toIn : numberToText,  toVal : textToNumber, label: "角速度",  controlType: TextInput, handleEvent: {enter: onEnterText} }
				}, BaseBulletParser),
					
				Chaser: Utils.fatMerge({
					offset	    : { n:7.1, toIn : numberToText,  toVal : textToNumber,  label: "方向偏移", controlType: TextInput, handleEvent: {enter: onEnterText} },
					speedX      : { n:7.2, toIn : numberToText,  toVal : textToNumber,  label: "速度X", controlType: TextInput, handleEvent: {enter: onEnterText} },
					speedY      : { n:7.3, toIn : numberToText,  toVal : textToNumber,  label: "速度Y", controlType: TextInput, handleEvent: {enter: onEnterText} },
					ax		    : { n:7.4, toIn : numberToText,  toVal : textToNumber,  label: "加速度X", controlType: TextInput, handleEvent: {enter: onEnterText} },
					ay		    : { n:7.5, toIn : numberToText,  toVal : textToNumber,  label: "加速度Y", controlType: TextInput, handleEvent: {enter: onEnterText} },
					rotateSpeed : { n:7.6, toIn : numberToText,  toVal : textToNumber,  label: "角速度", controlType: TextInput, handleEvent: {enter: onEnterText} },
					doNotTurn   : { n:7.7, toIn : numberToCheck, toVal : checkToNumber, label: "超过目标不再追踪", controlType: CheckBox, handleEvent: {click: onEnterText} },
					faceTarget  : { n:7.8, toIn : numberToCheck, toVal : checkToNumber, label: "初始朝向目标", controlType: CheckBox, handleEvent: {click: onEnterText} }
				}, BaseBulletParser),
				
				Pather: Utils.fatMerge({
					path : { n: 13, toIn : pathToText, toVal : textToPath, label: "路径", controlType: TextInput, handleEvent : { click : onEditPath } }
				}, BaseBulletParser)
			}
			
				
			//--------------------------------------
			// bullet templates
			//--------------------------------------
			// DO NOT CHANGE THE KEYS
			private static const BaseBullet:Object = {
				type: "Base",
				res:10000,
				resRotation: 0,
				pauseTime:0,
				duration:-1,
				direction:1,
					
				speed:200,

				speedMin : 0,
				speedMax : 20000,
				
				a:0,

				w:0, 
				h:0, 
				harm:0,
				
				offset:0,
				scale:1,
				scalePerSec:0,
				scaleMin: 0,
				scaleMax: 5,
				
				health: -1
			}
			
			public static const BulletMeta:Object = {
				Basic : Utils.fatMerge({
					type : "Basic",
					speedX:0,
					speedY:0,
					ax:0,
					ay:0,
					rotateSpeed:0
				}, BaseBullet, ["type"]),

				Chaser : Utils.fatMerge({
					type : "Chaser",
					speedX:0,
					speedY:0,
					ax:0,
					ay:0,
					rotateSpeed:0,
					doNotTurn : 1,
					faceTarget : 0
				}, BaseBullet, ["type"]),
				
				Pather : Utils.fatMerge({
					type : "Pather",
					path : ObjectUtil.copy(misc.PathEditor.PathMeta)
				}, BaseBullet, ["type"])
			};
			
			// DO NOT CHANGE THE KEYS
			public static const EmitterMeta:Object = {
				Basic : {
					res: NULL_RES, 
					wait: 0.2,
					resRotation: 0,
					speed: 0,
					speedX: 0, 
					speedY: 0,
					a: 0,
					ax: 0, 
					ay: 0, 
					rotation: 0, 
					x: 0, 
					y: 0, 
					rotateSpeed: 0, 
					minRotation: -180,
					maxRotation: 180, 
					rotateType: 0, 
					duration: -1,
					interval: 1, 
					num: 1, 
					numRandom: 0, 
					bulletGapType: 0, 
					w: 0, 
					h: 0, 
					harm: 0,
					attached: true,
					bulletGap: 15, 
					bullet: BulletMeta.Basic
				}
			}

			private var mNamesArray:ArrayCollection;
			private var mSkinsArray:ArrayCollection;
			private var mSkinsArray2:ArrayCollection;
			
			private var mData:Object;
			private var mCreated:Boolean;
			private var mPreviewer:EmitterPreviewer;
			
			private var mBulletConfigPanel:BulletConfig;
			
			private static var CLIPPING:Object;
			
			public static const NULL_RES:String = "";
			public static const PROFILE_EMITTER_TYPE:String = "CompositeBulletEmitter";
			public static const DEFAULT_EMITTER:Object = {
				type:PROFILE_EMITTER_TYPE,
				emitters: [
					EmitterMeta.Basic
				]
			};
			
			private var mMonsterId:String;
			private var mMonsterName:String;
			
			private static var mInstance:EmitterPanel = null;
			
			private function onCreate():void {				
				
				mInstance = this;
				// create context menu
				var menu:ContextMenu = new ContextMenu();
				var item:ContextMenuItem = new ContextMenuItem("新建(Ctrl+N)");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onNewEmitter);
				menu.addItem(item);
				
				item = new ContextMenuItem("复制(Ctrl+C)");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCopyEmitter);
				menu.addItem(item);
				
				item = new ContextMenuItem("删除(Ctrl+D)");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onDeleteEmitter);
				menu.addItem(item);
				
				item = new ContextMenuItem("粘贴(Ctrl+V)");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onPasteEmitter);
				menu.addItem(item);
				
				item = new ContextMenuItem("剪切(Ctrl+X)");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCutEmitter);
				menu.addItem(item);
				
				this.mEmitterList.contextMenu = menu;
				this.stage.addEventListener(KeyboardEvent.KEY_DOWN, onPressKeyboard);
				
				// create data sources
				mNamesArray = new ArrayCollection();
				this.mEmitterList.dataProvider = mNamesArray;
				
				mSkinsArray = Utils.getKeysAsSortedData( Data.getInstance().skins );
				mSkinsArray.addItemAt(NULL_RES, 0);
				mBasicEmitterConfig.resIn.dataProvider = mSkinsArray;

				mBasicEmitterConfig.onValueChanged = onValueChanged;
				mBasicEmitterConfig.onChangeEmitterRes = onChangeEmitterRes;
				
				mCreated = true;
				
				if (mData)
					refreshView();
			}
			
			private function createBulletConfigPanel(type:String): void
			{
				if(mBulletConfigPanel)
				{
					mBulletConfigGroup.removeElement(mBulletConfigPanel);
					mBulletConfigPanel = null;
				}
				
				/*
				switch(type)
				{
					case "Basic": mBulletConfigPanel = new BasicBulletConfig; break;
					case "Chaser": mBulletConfigPanel = new ChaserBulletConfig; break;
					case "Pather": mBulletConfigPanel = new PatherBulletConfig; break;
					default: trace("unknown type"); break;
				}*/
				mBulletConfigPanel = new BulletConfig;
				mBulletConfigGroup.addElement(mBulletConfigPanel);

				//mBulletConfigPanel.onChangeBulletType = onChangeBulletType;
				//mBulletConfigPanel.onValueChanged = onValueChanged;
			}
			
			private function onPressKeyboard(event:KeyboardEvent):void {
				if ((event.ctrlKey && event.keyCode == Keyboard.S && event.shiftKey)) {
					this.onPressSaveAs(event);
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.S) {
					this.onPressSave(event);
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.L) {
					if (this.mSaveToLevel.visible) {
						this.onPressSaveToLevel(event);
					}
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.C) {
					this.onCopyEmitter(event);
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.V) {
					this.onPasteEmitter(event);
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.X) {
					this.onCopyEmitter(event);
					this.onDeleteEmitter(event);
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.D) {
					this.onDeleteEmitter(event);
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.N) {
					this.onNewEmitter(event);
				}
				else if ((event.ctrlKey && event.keyCode == Keyboard.R) || event.keyCode == Keyboard.F5) {
					this.onPressRestart(event);
				}
				else if (event.keyCode == Keyboard.ESCAPE) {
					this.onPressClose(event);
				}
			}
			
			public function setData(data:Object, monsterId:String=null):void {
				mData = data;
				
				if (monsterId)
					mMonsterId = monsterId;
				
				var save:Boolean = false;
				
				// for any missing keys in emitter, assign the default value
				for each (var e:Object in mData.emitters) {
					if(!e.type)
						Utils.xorMerge(e, EmitterMeta.Basic);
					else
						Utils.xorMerge(e, EmitterMeta[e.type]);
					
					if(!e.bullet.type)
						Utils.xorMerge(e.bullet, BulletMeta.Basic);
					else
						Utils.xorMerge(e.bullet, BulletMeta[e.bullet.type]);
				}
				
				if (save)
					this.onPressSave(null);

				if (mCreated)
					refreshView();
			}
			
			private function readData():void {
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) 
					return;
				var data:Object = mData.emitters[index];
				
				if(!mBulletConfigPanel || mBulletConfigPanel.configType != data.bullet.type)
				{
					createBulletConfigPanel(data.bullet.type);
				}
				
				mBasicEmitterConfig.setData(data);
				mBulletConfigPanel.setData(data);	
			}
			
			private var mContainer:UIComponent;
			private function refreshView():void {
				
				var oldSelectedIndex:int = mEmitterList.selectedIndex;
				
				mNamesArray.removeAll();
				
				for (var i:int = 0; i < mData.emitters.length; i++) {
					mNamesArray.addItem("♢ Emitter "+(i+1));
				}
				
				if (!mContainer) {
					var mContainer:UIComponent = new UIComponent();
					mContainer.x = 50;
					mContainer.y = mPreviewerContainer.height-150;
					mPreviewerContainer.addElement(mContainer);
				}
				if (mPreviewer) 
					mPreviewer.destroy();
				
				mPreviewer = new EmitterPreviewer(mData, this);
				mContainer.addChild(mPreviewer);
				
				mEmitterList.selectedIndex = oldSelectedIndex == -1 ? 0 : oldSelectedIndex;
				
				mId1.text = mMonsterId.toString();
				if (mData.monster_name) {
					mMonsterName = mData.monster_name;
					mId2.text = mData.monster_name;
				}
				readData();
				mPreviewer.selectIndex(mEmitterList.selectedIndex);
							
				if (!mFilesArray) {
					this.updateFileList();
					this.updateFileIndex();
				}
			}
			
			public function onCopyEmitter(event:Event):void {
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) return;
				var data:Object = mData.emitters[index];
				CLIPPING = Utils.cloneObjectData(data);
			}
			
			public function onDeleteEmitter(event:Event):void {
				if (this.mNamesArray.length < 2) {
					var alert:Alert = Alert.show("发射器组合至少包含一个发射器!");
					setTimeout(function ():void { if (alert && alert.parent) alert.parent.removeChild(alert); }, 2000);
					return;
				}
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) 
					return;
				mData.emitters.splice(index, 1);
				mNamesArray.removeItemAt(index);
				if (index > 0) 
					mEmitterList.selectedIndex = index-1;
				else 
					mEmitterList.selectedIndex = index;
				readData();
				mPreviewer.removeEmitter(index);
				mPreviewer.selectIndex(mEmitterList.selectedIndex);
			}
			
			public function onPasteEmitter(event:Event):void {
				if (!CLIPPING) 
					return;
				var data:Object = Utils.cloneObjectData(CLIPPING);
				this.mData.emitters.push(data);
				mNamesArray.addItem("♢ Emitter "+(mNamesArray.length+1));
				mEmitterList.selectedIndex = mNamesArray.length-1;
				readData();
				mPreviewer.addEmitter(data);
				mPreviewer.selectIndex(mEmitterList.selectedIndex);
				mPreviewer.restart();
			}
			
			public function onCutEmitter(event:Event):void {
				onCopyEmitter(event);
				onDeleteEmitter(event);
			}
			
			public function onNewEmitter(event:Event):void {
				var e:Object = ObjectUtil.copy(EmitterMeta.Basic);
				this.mData.emitters.push(e);
				mNamesArray.addItem("♢ Emitter "+(mNamesArray.length+1));
				mEmitterList.selectedIndex = mNamesArray.length-1;
				readData();
				
				mPreviewer.addEmitter(e);
				mPreviewer.selectIndex(mEmitterList.selectedIndex);
				mPreviewer.restart();
			}
			
			private function onChangeEmitterRes(event:IndexChangeEvent):void {
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) return;
				var data:Object = mData.emitters[index];
				data.res = mSkinsArray.getItemAt(mBasicEmitterConfig.resIn.selectedIndex);
				mPreviewer.emitters[index].updateImage();
			}
			
			private function onChangeEmitterType(event:Event): void{
				trace("emitter type change");
			}
			
			private function onChangeBulletType(event:Event):void {
				
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) 
					return;
				var data:Object = mData.emitters[index];
				var type:String = mBulletConfigPanel.getBulletType();
				if(type != data.bullet.type)
				{
					var newBullet:Object = ObjectUtil.copy(BulletMeta[type]);
					Utils.thinMerge(newBullet, data.bullet, ["type"]);
					data.bullet = newBullet;						
					refreshView();
				}
			}
			
			private function onValueChanged(event:Event):void {
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) 
					return;
				var data:Object = mData.emitters[index];
								
				mBasicEmitterConfig.applyValue(data);
				mBulletConfigPanel.applyValue(data);
	
				mPreviewer.restart();
			}
			
			public function getHero(): HeroMarker
			{ 
				return mPreviewer.getHero();				
			}
			
			private function onPressSaveToLevel(event:Event):void {
				this.saveDataToLevel();
				var alert:Alert = Alert.show("写入关卡成功!");
				setTimeout(function ():void { if (alert && alert.parent) alert.parent.removeChild(alert); }, 500);
			}
			
			private function onPressSave(event:Event):void {
				this.saveDataToLevel();
				
				var dir:File = Data.getInstance().resolvePath("saved/emitter");
				var targetFile:File = new File(dir.url+"/"+mMonsterName+".json");
				var mark:Boolean = !targetFile.exists;
				var fs:FileStream = new FileStream();
				fs.open(targetFile, FileMode.WRITE);
				fs.writeUTF(JSON.stringify(mData));
				fs.close();
				
				if (event) {
					var alert:Alert = Alert.show("保存成功!");
					setTimeout(function ():void { if (alert && alert.parent) alert.parent.removeChild(alert); }, 500);
				}
				if (mark) {
					updateFileList();
					updateFileIndex();
				}
			}
			
			private function onPressSaveAs(event:Event):void {
				var file:File = Data.getInstance().resolvePath("saved/emitter");
				file.browseForSave("另存为..");
				file.addEventListener(Event.SELECT, onSaveAsComplete);
			}
			
			private function onSaveAsComplete(event:Event):void {
				var file:File = event.currentTarget as File;
				file.removeEventListener(Event.SELECT, onSaveAsComplete);
				
				var f:File = new File(file.url);
				var fs:FileStream = new FileStream();
				fs.open(f, FileMode.WRITE);
				fs.writeUTF(JSON.stringify(mData));
				fs.close();
				
				var alert:Alert = Alert.show(" 保存成功!");
				setTimeout(function ():void { if (alert && alert.parent) alert.parent.removeChild(alert); }, 500);
				mMonsterName = f.name.substr(0, f.name.length-5);
				this.mId2.text = mMonsterName;
				this.mData.monster_name = this.mMonsterName;
				updateFileList();
				updateFileIndex();
			}
			
			private function onPressRestart(event:Event):void {
				mPreviewer.restart();
			}
			
			private function onPressClose(event:Event):void {
				this.stage.removeEventListener(KeyboardEvent.KEY_DOWN, onPressKeyboard);
				mPreviewer.destroy();
				PopUpManager.removePopUp(this);
			}
			
			private function onEmitterSelected(event:IndexChangeEvent):void {
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) return;
				readData();
				mPreviewer.selectIndex(index);
			}
			
			public function setSelectedEmitter(index:int):void {
				this.mEmitterList.selectedIndex = index;
				readData();
			}
			
			private var mFilesArray:ArrayCollection;
			private function updateFileList():void {
				var dir:File = Data.getInstance().resolvePath("saved/emitter");
				var files:Array = dir.getDirectoryListing();
				mFilesArray = new ArrayCollection();
				for each (var f:File in files) {
					if (f.name.indexOf(".json") != -1) {
						mFilesArray.addItem(f.name);
					}
				}
				mFileList.dataProvider = mFilesArray;
			}
			
			private function updateFileIndex():void {
				var index:int = this.mFilesArray.getItemIndex(mMonsterName+".json");
				if (index >= 0) {
					mFileList.textInput.text = mMonsterName+".json";
					this.mSaveToLevel.visible = false;
				}
				else {
					mFileList.textInput.text = "";
					this.mSaveToLevel.visible = true;
				}
			}
			
			private function onSelectFile(event:IndexChangeEvent):void {
				var index:int = mFileList.selectedIndex;
				if (index < 0) return;
				var name:String = mFilesArray.getItemAt(index) as String;
				
				var dir:File = Data.getInstance().resolvePath("saved/emitter");
				var file:File = new File(dir.url+"/"+name);
				var fs:FileStream = new FileStream();
				fs.open(file, FileMode.READ);
				var str:String = fs.readUTF();
				fs.close();
				try {
					var data:Object = JSON.parse(str);
				}
				catch (e:Error) {
					var alert:Alert = Alert.show("导入失败!");
					setTimeout(function ():void { if (alert && alert.parent) alert.parent.removeChild(alert); }, 1000);
					return;
				}
				
				this.mMonsterName = name.substr(0, name.length-5);
				this.mId2.text = this.mMonsterName;
				data.monster_id = this.mMonsterId;
				data.monster_name = this.mMonsterName;
				this.setData(data);
			}
			
			private function saveDataToLevel():void {
				Data.getInstance().updateMonster(Runtime.getInstance().currentLevelID, mData);
			}
			
			private function onNameChanged(event:Event):void {
				this.mMonsterName = this.mId2.text;
				this.mData.monster_name = this.mMonsterName;
				this.updateFileIndex();
			}
			
			
			public function updateCurrentEmitter():void {
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) return;
				var data:Object = mData.emitters[index];
				
				mBasicEmitterConfig.xIn.text = data.x;
				mBasicEmitterConfig.yIn.text = data.y;				
				//this.mInput5.text = data.x;
				//this.mInput6.text = data.y;
			}
			
			public function get previewer():EmitterPreviewer { return mPreviewer; }
			
		]]>
	</fx:Script>
	<s:HGroup x="0" y="0" width="100%" height="100%" gap="0">
		<s:VGroup width="450" height="900" gap="0">
			<s:Group width="100%" height="90">
				<s:Label x="10" y="10" color="#969696" text="标识ID" textAlign="right"/>
				<s:Label id="mId1" x="54" y="10" width="130" color="#000000" fontSize="12"
						 text="标识ID" textAlign="left"/>
				<s:Label x="22" y="36" color="#969696" text="名称" textAlign="right"/>
				<s:TextInput id="mId2" x="54" y="30" width="130" change="onNameChanged(event)"
							 color="#000000" text="名称" textAlign="left" toolTip="发射器组合的名称"/>
				<s:Label x="12" y="64" color="#969696" text="库列表" textAlign="right"/>
				<s:ComboBox id="mFileList" x="54" y="59" width="130" change="onSelectFile(event)"
							contentBackgroundColor="#C8C8C8"/>
				<s:Button x="232" y="8" width="100" height="30" label="重启(F5/R)"
						  click="onPressRestart(event)" fontSize="12" toolTip="重启模拟，F5或者Ctrl+R"/>
				<s:Button x="340" y="8" width="100" height="30" label="保存到库(S)"
						  click="onPressSave(event)" fontSize="12"
						  toolTip="保存到本地库，并同时将数据写入关卡，Ctrl+S"/>
				<s:Button x="232" y="46" width="100" height="30" label="另存为库.."
						  click="onPressSaveAs(event)" fontSize="12" toolTip="Ctrl+Shift+S"/>
				<s:Button id="mSaveToLevel" x="340" y="46" width="100" height="30" toolTip="只将数据写入关卡，不保存到库。Ctrl+L"
						  label="保存到关卡(L)" click="onPressSaveToLevel(event)" fontSize="12"/>
			</s:Group>
			<s:Group id="mPreviewerContainer" width="100%" height="100%">
			</s:Group>
		</s:VGroup>
		<s:VGroup height="100%" gap="1" paddingLeft="8">
			<s:Panel width="100%" height="150" borderVisible="true" dropShadowVisible="false"
					 fontSize="12" title="发射器列表">
				<s:List id="mEmitterList" x="0" y="0" width="100%" height="100%"
						borderVisible="false" change="onEmitterSelected(event)"></s:List>
			</s:Panel>
			<emitter:BasicEmitterConfig id="mBasicEmitterConfig">
			</emitter:BasicEmitterConfig>
		</s:VGroup>
		<s:VGroup id="mBulletConfigGroup" x="726" y="163">
		</s:VGroup>
	</s:HGroup>
	
</s:TitleWindow>
