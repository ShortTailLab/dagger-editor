<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="894" close="onPressClose(event)" creationComplete="onCreate()" title="发射器组合编辑">
	<fx:Declarations>
		<s:RadioButtonGroup id="radiogroup1"/>
		<s:RadioButtonGroup id="radiogroup2"/>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			
			import spark.collections.Sort;
			import spark.events.IndexChangeEvent;
			
			private function onCreate():void {
				this.mInput1.toolTip = "等待一定时间后开始发射子弹";
				this.mInput2.toolTip = "移动速度，单位：像素/秒";
				this.mInput3.toolTip = "X移动加速度，单位：像素/秒^2";
				this.mInput19.toolTip = "Y移动加速度，单位：像素/秒^2";
				this.mInput4.toolTip = "初始面对的角度，取值[-180,180]";
				this.mInput5.toolTip = "相对于发射组的X坐标";
				this.mInput6.toolTip = "相对于发射组的Y坐标";
				this.mInput7.toolTip = "旋转速度，单位：度/秒";
				this.mInput8.toolTip = "可以旋转到的最大角度，取值[-180,180]";
				this.mInput20.toolTip = "可以旋转到的最小角度，取值[-180,180]";
				this.mInput9.toolTip = "从开始发射到结束发射的总时间，不包括等待时间，-1为无限";
				this.mInput10.toolTip = "每隔一定间隔发射一次";
				this.mInput11.toolTip = "每次发射子弹的基础数量";
				this.mInput12.toolTip = "每次发射子弹的额外数量";
				this.mInput13.toolTip = "取值[0,360]，若为固定，值为子弹间的角度间隔；若为随机，子弹发射随机取值[-值/2, 值/2]";
//				this.mInput14.toolTip = "重力X方向大小，>0为向上，<0为向下，单位：像素/秒^2";
//				this.mInput15.toolTip = "重力Y方向大小，>0为向右，<0为向左，单位：像素/秒^2";
				this.mInput16.toolTip = "单个子弹的持续时间，-1为无限";
				this.mInput17.toolTip = "单个子弹的移动速度，单位：像素/秒";
				this.mInput18.toolTip = "单个子弹的移动加速度，单位：像素/秒^2";
				this.mInput24.toolTip = "碰撞面积的长";
				this.mInput25.toolTip = "碰撞面积的高";
				this.mInput27.toolTip = "碰撞面积的长";
				this.mInput28.toolTip = "碰撞面积的高";
				this.mRotateType1.toolTip = "摇摆旋转，当发射器旋转到最大角度时逐渐旋转回到初始角度";
				this.mRotateType2.toolTip = "循环旋转，当发射器旋转到最大角度时立即回到初始角度";
				this.mBulletGap1.toolTip = "固定子弹间隔，发射出的子弹两两之间固定有X角度的夹角";
				this.mBulletGap2.toolTip = "随机子弹间隔，发射出的子弹角度随机取值[0,角度值]";
				this.mBulletDirection.toolTip = "子弹资源方向朝下时，勾选；反之不勾选";
				
				mNamesArray = new ArrayCollection();
				this.mEmitterList.dataProvider = mNamesArray;
				var menu:ContextMenu = new ContextMenu();
				var item:ContextMenuItem = new ContextMenuItem("新建(Ctrl+N)");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onNewEmitter);
				menu.addItem(item);
				item = new ContextMenuItem("复制(Ctrl+C)");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCopyEmitter);
				menu.addItem(item);
				item = new ContextMenuItem("删除(Ctrl+D)");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onDeleteEmitter);
				menu.addItem(item);
				item = new ContextMenuItem("粘贴(Ctrl+V)");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onPasteEmitter);
				menu.addItem(item);
				item = new ContextMenuItem("剪切(Ctrl+X)");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCutEmitter);
				menu.addItem(item);
				this.mEmitterList.contextMenu = menu;
				this.stage.addEventListener(KeyboardEvent.KEY_DOWN, onPressKeyboard);
				
				var skins:ArrayCollection = new ArrayCollection();
				var skins2:ArrayCollection = new ArrayCollection();
				for (var key:String in Data.getInstance().skins) {
					skins.addItem(key);
					skins2.addItem(key);
				}
				var s:Sort = new Sort();
				skins.sort = s;
				skins.refresh();
				skins.addItemAt(NULL_RES, 0);
				mSkinsArray = skins;
				mEmitterRes.dataProvider = skins;
				
				s = new Sort();
				skins2.sort = s;
				skins2.refresh();
				mBulletRes.dataProvider = skins2;
				mBulletRes.selectedIndex = 0;
				mSkinsArray2 = skins2;
				
				mCreated = true;
				
				if (mData) init();
			}
			
			private function onPressKeyboard(event:KeyboardEvent):void {
				if ((event.ctrlKey && event.keyCode == Keyboard.S && event.shiftKey)) {
					this.onPressSaveAs(event);
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.S) {
					this.onPressSave(event);
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.L) {
					if (this.mSaveToLevel.visible) {
						this.onPressSaveToLevel(event);
					}
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.C) {
					this.onCopyEmitter(event);
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.V) {
					this.onPasteEmitter(event);
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.X) {
					this.onCopyEmitter(event);
					this.onDeleteEmitter(event);
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.D) {
					this.onDeleteEmitter(event);
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.N) {
					this.onNewEmitter(event);
				}
				else if ((event.ctrlKey && event.keyCode == Keyboard.R) || event.keyCode == Keyboard.F5) {
					this.onPressRestart(event);
				}
				else if (event.keyCode == Keyboard.ESCAPE) {
					this.onPressClose(event);
				}
			}
			
			private var mNamesArray:ArrayCollection;
			private var mSkinsArray:ArrayCollection;
			private var mSkinsArray2:ArrayCollection;
			private var mData:Object;
			private var mCreated:Boolean;
			private var mPreviewer:EmitterPreviewer;
			private static var CLIPPING:Object;
			public static const NULL_RES:String = "";
			public static const PROFILE_EMITTER_TYPE = "CompositeBulletEmitter";
			public static const DEFAULT_EMITTER:Object = {
				type:PROFILE_EMITTER_TYPE,
				emitters: [{
					res:NULL_RES, wait:0.2, speedX:0, speedY:0, a:0, ax:0, ay:0, rotation:0, x:0, y:0, 
					rotateSpeed:0, minRotation:-180, maxRotation:180, rotateType:0, duration:-1,
					interval:1, num:1, numRandom:0, bulletGapType:0, w:0, h:0, harm:0,
					bulletGap:15, 
					bullet:{
						res:10000,
						direction:0,
						duration:-1,
						speed:200,
						a:0,
						ax:0, w:0, h:0, harm:0,
						ay:0
					}
				}]
			};
			private var mMonsterId:String;
			private var mMonsterName:String;
			public function setData(data:Object, monsterId:String=null):void {
				mData = data;
				if (monsterId) {
					mMonsterId = monsterId;
				}
				for each (var d:Object in mData.emitters) {
					var save:Boolean = false;
					// for compatibility with older files
					if (!d.hasOwnProperty("w")) {
						d.w = 0;
						save = true;
					}
					if (!d.hasOwnProperty("h")) {
						d.h = 0;
						save = true;
					}
					if (!d.hasOwnProperty("harm")) {
						d.harm = 0;
						save = true;
					}
					if (!d.hasOwnProperty("speedX")) {
						d.speedX = -d.speed*Math.sin(d.rotation/180*Math.PI)/2;
						d.speedY =-d.speed*Math.cos(d.rotation/180*Math.PI)/2;
						delete d.speed;
						save = true;
					}
					if (d.hasOwnProperty("id")) {
						d.monster_name = d.id;
						delete d.id;
						save = true;
					}
					if (!d.bullet.hasOwnProperty("w")) {
						d.bullet.w = 0;
						save = true;
					}
					if (!d.bullet.hasOwnProperty("h")) {
						d.bullet.h = 0;
						save = true;
					}
					if (!d.bullet.hasOwnProperty("harm")) {
						d.bullet.harm = 0;
						save = true;
					}
					if (!d.hasOwnProperty("a") || !d.bullet.hasOwnProperty("a")) {
						if (!d.hasOwnProperty("a")) {
							d.a = 0;
						}
						if (!d.bullet.hasOwnProperty("a")) {
							d.bullet.a = 0;
						}
						save = true;
					}
					if (d.res == "00无资源00") {
						d.res = NULL_RES;
						save = true;
					}
					if (save) {
						this.onPressSave(null);
					}
				}
				
				if (mCreated) init();
			}
			
			private var mContainer:UIComponent;
			private function init():void {
				mNamesArray.removeAll();
				for (var i:int = 0; i < mData.emitters.length; i++) {
					mNamesArray.addItem("♢ Emitter "+(i+1));
				}
				
				if (!mContainer) {
					var mContainer:UIComponent = new UIComponent();
					mPreviewerContainer.addElement(mContainer);
					mContainer.x = 100;
					mContainer.y = mPreviewerContainer.height-130;
				}
				if (mPreviewer) mPreviewer.destroy();
				mPreviewer = new EmitterPreviewer(mData, this);
				mContainer.addChild(mPreviewer);
				
				mEmitterList.selectedIndex = 0;
				mId1.text = mMonsterId.toString();
				if (mData.monster_name) {
					mMonsterName = mData.monster_name;
					mId2.text = mData.monster_name;
				}
				readData();
				mPreviewer.selectIndex(mEmitterList.selectedIndex);
							
				if (!mFilesArray) {
					this.updateFileList();
					this.updateFileIndex();
				}
			}
			
			public function onCopyEmitter(event:Event):void {
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) return;
				var data:Object = mData.emitters[index];
				CLIPPING = Utils.cloneObjectData(data);
			}
			
			public function onDeleteEmitter(event:Event):void {
				if (this.mNamesArray.length < 2) {
					var alert:Alert = Alert.show("发射器组合至少包含一个发射器!");
					setTimeout(function ():void { if (alert && alert.parent) alert.parent.removeChild(alert); }, 2000);
					return;
				}
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) return;
				mData.emitters.splice(index, 1);
				mNamesArray.removeItemAt(index);
				if (index > 0) mEmitterList.selectedIndex = index-1;
				else mEmitterList.selectedIndex = index;
				readData();
				mPreviewer.removeEmitter(index);
				mPreviewer.selectIndex(mEmitterList.selectedIndex);
			}
			
			public function onPasteEmitter(event:Event):void {
				if (!CLIPPING) return;
				var data:Object = Utils.cloneObjectData(CLIPPING);
				this.mData.emitters.push(data);
				mNamesArray.addItem("♢ Emitter "+(mNamesArray.length+1));
				mEmitterList.selectedIndex = mNamesArray.length-1;
				readData();
				mPreviewer.addEmitter(data);
				mPreviewer.selectIndex(mEmitterList.selectedIndex);
				mPreviewer.restart();
			}
			
			public function onCutEmitter(event:Event):void {
				onCopyEmitter(event);
				onDeleteEmitter(event);
			}
			
			private function readData():void {
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) return;
				var data:Object = mData.emitters[index];
				
				this.mInput1.text = data.wait;
				this.mInput2.text = data.speedX;
				this.mInput30.text = data.speedY;
				this.mInput3.text = data.ax;
				this.mInput19.text = data.ay;
				this.mInput4.text = data.rotation;
				this.mInput5.text = data.x;
				this.mInput6.text = data.y;
				this.mInput7.text = data.rotateSpeed;
				this.mInput20.text = data.minRotation;
				this.mInput8.text = data.maxRotation;
				this.mInput9.text = data.duration;
				this.mInput10.text = data.interval;
				this.mInput11.text = data.num;
				this.mInput12.text = data.numRandom;
				this.mInput13.text = data.bulletGap;
				this.mInput16.text = data.bullet.duration;
				this.mInput17.text = data.bullet.speed;
				this.mInput18.text = data.bullet.ax;
				this.mInput21.text = data.bullet.ay;
				this.mInput22.text = data.a;
				this.mInput23.text = data.bullet.a;
				this.mInput24.text = data.w;
				this.mInput25.text = data.h;
				this.mInput26.text = data.harm;
				this.mInput27.text = data.bullet.w;
				this.mInput28.text = data.bullet.h;
				this.mInput29.text = data.bullet.harm;
				
				if (data.res == "") {
					mEmitterRes.selectedIndex = 0;
				}
				else {
					mEmitterRes.selectedIndex = mSkinsArray.getItemIndex(data.res);
				}
				mBulletRes.selectedIndex = mSkinsArray2.getItemIndex(data.bullet.res);
				this.mRotateType1.selected = data.rotateType==0;
				this.mRotateType2.selected = data.rotateType==1;
				this.mBulletGap1.selected = data.bulletGapType==0;
				this.mBulletGap2.selected = data.bulletGapType==1;
				this.mBulletDirection.selected = data.bullet.direction==0;
			}
			
			public function onNewEmitter(event:Event):void {
				var data:Object = Utils.cloneObjectData(DEFAULT_EMITTER);
				this.mData.emitters.push(data);
				mNamesArray.addItem("♢ Emitter "+(mNamesArray.length+1));
				mEmitterList.selectedIndex = mNamesArray.length-1;
				readData();
				mPreviewer.addEmitter(data);
				mPreviewer.selectIndex(mEmitterList.selectedIndex);
				mPreviewer.restart();
			}
			
			private function onChangeEmitterRes(event:IndexChangeEvent):void {
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) return;
				var data:Object = mData.emitters[index];
				data.res = mSkinsArray.getItemAt(mEmitterRes.selectedIndex);
				mPreviewer.emitters[index].updateImage();
			}
			
			private function onValueChanged(event:Event):void {
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) return;
				var data:Object = mData.emitters[index];
				
				data.wait = Number(this.mInput1.text);
				data.speedX = Number(this.mInput2.text);
				data.speedY = Number(this.mInput30.text);
				data.a = Number(this.mInput22.text);
				data.ax = Number(this.mInput3.text);
				data.ay = Number(this.mInput19.text);
				
				data.rotation = Number(this.mInput4.text);
				if (data.rotation > 180) data.rotation = 180;
				if (data.rotation < -180) data.rotation = -180;
				if (!isNaN(data.rotation)) this.mInput4.text = data.rotation;
				
				data.x = Number(this.mInput5.text);
				data.y = Number(this.mInput6.text);
				data.rotateSpeed = Number(this.mInput7.text);
				
				data.minRotation = Number(this.mInput20.text);
				if (data.minRotation > 180) data.minRotation = 180;
				if (data.minRotation < -180) data.minRotation = -180;
				if (!isNaN(data.minRotation)) this.mInput20.text = data.minRotation;
				
				data.maxRotation = Number(this.mInput8.text);
				if (data.maxRotation > 180) data.maxRotation = 180;
				if (data.maxRotation < -180) data.maxRotation = -180;
				if (!isNaN(data.maxRotation)) this.mInput8.text = data.maxRotation;
				
				data.duration = Number(this.mInput9.text);
				data.interval = Number(this.mInput10.text);
				data.num = Number(this.mInput11.text);
				data.numRandom = Number(this.mInput12.text);
				
				data.bulletGap = Number(this.mInput13.text);
				if (data.bulletGap > 360) data.bulletGap = 360;
				if (data.bulletGap < 0) data.bulletGap = 0;
				this.mInput13.text = data.bulletGap;
				
				data.w = Number(this.mInput24.text);
				data.h = Number(this.mInput25.text);
				data.harm = Number(this.mInput26.text);
				
				data.bullet.duration = Number(this.mInput16.text);
				data.bullet.speed = Number(this.mInput17.text);
				data.bullet.a = Number(this.mInput23.text);
				data.bullet.ax = Number(this.mInput18.text);
				data.bullet.ay = Number(this.mInput21.text);
				
				if (mEmitterRes.selectedIndex <= 0) data.res = NULL_RES;
				else data.res = mSkinsArray.getItemAt(mEmitterRes.selectedIndex);
				data.bullet.res = mSkinsArray2.getItemAt(mBulletRes.selectedIndex);
				data.rotateType = this.mRotateType1.selected?0:1;
				data.bulletGapType = this.mBulletGap1.selected?0:1;
				data.bullet.direction = this.mBulletDirection.selected?0:1;
				
				data.bullet.w = Number(this.mInput27.text);
				data.bullet.h = Number(this.mInput28.text);
				data.bullet.harm = Number(this.mInput29.text);
				
				var none:Array = [mInput24, mInput25, mInput26, mInput27, mInput28, mInput29 ];
				if (event.currentTarget == mInput5 || event.currentTarget == mInput6) {
					mPreviewer.emitters[index].updatePosition();
				}
				else if (event.currentTarget == mInput4) {
					mPreviewer.emitters[index].updatePosition();
					mPreviewer.restart();
				}
				else if (none.indexOf(event.currentTarget) != -1) {
					
				}
				else {
					mPreviewer.restart();
				}
//				if (restart.indexOf(event.currentTarget) != -1) {
//					mPreviewer.restart();
//				}
			}
			
			private function onPressSaveToLevel(event:Event):void {
				this.saveDataToLevel();
				var alert:Alert = Alert.show("写入关卡成功!");
				setTimeout(function ():void { if (alert && alert.parent) alert.parent.removeChild(alert); }, 500);
			}
			
			private function onPressSave(event:Event):void {
				this.saveDataToLevel();
				
				var dir:File = Data.getInstance().resolvePath("saved/emitter");
				var targetFile:File = new File(dir.url+"/"+mMonsterName+".json");
				var mark:Boolean = !targetFile.exists;
				var fs:FileStream = new FileStream();
				fs.open(targetFile, FileMode.WRITE);
				fs.writeUTF(JSON.stringify(mData));
				fs.close();
				
				if (event) {
					var alert:Alert = Alert.show("保存成功!");
					setTimeout(function ():void { if (alert && alert.parent) alert.parent.removeChild(alert); }, 500);
				}
				if (mark) {
					updateFileList();
					updateFileIndex();
				}
			}
			
			private function onPressSaveAs(event:Event):void {
				var file:File = Data.getInstance().resolvePath("saved/emitter");
				file.browseForSave("另存为..");
				file.addEventListener(Event.SELECT, onSaveAsComplete);
			}
			
			private function onSaveAsComplete(event:Event):void {
				var file:File = event.currentTarget as File;
				file.removeEventListener(Event.SELECT, onSaveAsComplete);
				
				var f:File = new File(file.url);
				var fs:FileStream = new FileStream();
				fs.open(f, FileMode.WRITE);
				fs.writeUTF(JSON.stringify(mData));
				fs.close();
				
				var alert:Alert = Alert.show(" 保存成功!");
				setTimeout(function ():void { if (alert && alert.parent) alert.parent.removeChild(alert); }, 500);
				mMonsterName = f.name.substr(0, f.name.length-5);
				this.mId2.text = mMonsterName;
				this.mData.monster_name = this.mMonsterName;
				updateFileList();
				updateFileIndex();
			}
			
			private function onPressRestart(event:Event):void {
				mPreviewer.restart();
			}
			
			private function onPressClose(event:Event):void {
				this.stage.removeEventListener(KeyboardEvent.KEY_DOWN, onPressKeyboard);
				mPreviewer.destroy();
				PopUpManager.removePopUp(this);
			}
			
			private function onEmitterSelected(event:IndexChangeEvent):void {
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) return;
				readData();
				mPreviewer.selectIndex(index);
			}
			
			public function setSelectedEmitter(index:int):void {
				this.mEmitterList.selectedIndex = index;
				readData();
			}
			
			private var mFilesArray:ArrayCollection;
			private function updateFileList():void {
				var dir:File = Data.getInstance().resolvePath("saved/emitter");
				var files:Array = dir.getDirectoryListing();
				mFilesArray = new ArrayCollection();
				for each (var f:File in files) {
					if (f.name.indexOf(".json") != -1) {
						mFilesArray.addItem(f.name);
					}
				}
				mFileList.dataProvider = mFilesArray;
			}
			
			private function updateFileIndex():void {
				var index:int = this.mFilesArray.getItemIndex(mMonsterName+".json");
				if (index >= 0) {
					mFileList.textInput.text = mMonsterName+".json";
					this.mSaveToLevel.visible = false;
				}
				else {
					mFileList.textInput.text = "";
					this.mSaveToLevel.visible = true;
				}
			}
			
			private function onSelectFile(event:IndexChangeEvent):void {
				var index:int = mFileList.selectedIndex;
				if (index < 0) return;
				var name:String = mFilesArray.getItemAt(index) as String;
				
				var dir:File = Data.getInstance().resolvePath("saved/emitter");
				var file:File = new File(dir.url+"/"+name);
				var fs:FileStream = new FileStream();
				fs.open(file, FileMode.READ);
				var str:String = fs.readUTF();
				fs.close();
				try {
					var data:Object = JSON.parse(str);
				}
				catch (e:Error) {
					var alert:Alert = Alert.show("导入失败!");
					setTimeout(function ():void { if (alert && alert.parent) alert.parent.removeChild(alert); }, 1000);
					return;
				}
				
				this.mMonsterName = name.substr(0, name.length-5);
				this.mId2.text = this.mMonsterName;
				data.monster_id = this.mMonsterId;
				data.monster_name = this.mMonsterName;
				this.setData(data);
			}
			
			private function saveDataToLevel():void {
				Data.getInstance().updateMonster(Runtime.getInstance().currentLevelID, mData);
			}
			
			private function onNameChanged(event:Event):void {
				this.mMonsterName = this.mId2.text;
				this.mData.monster_name = this.mMonsterName;
				this.updateFileIndex();
			}
			
			public function updateCurrentEmitter():void {
				var index:int = this.mEmitterList.selectedIndex;
				if (index < 0) return;
				var data:Object = mData.emitters[index];
				this.mInput5.text = data.x;
				this.mInput6.text = data.y;
			}
			
			public function get previewer():EmitterPreviewer { return mPreviewer; }
			
		]]>
	</fx:Script>
	<s:HGroup x="0" y="0" width="100%" height="100%" gap="0">
		<s:VGroup width="100%" height="100%" gap="0">
			<s:BorderContainer id="mPreviewerContainer" width="100%" height="100%"
							   borderVisible="false">
				<s:Button right="117" top="15" width="80" height="30" label="保存到库(S)" toolTip="保存到本地库，并同时将数据写入关卡，Ctrl+S"
						  click="onPressSave(event)" fontSize="12"/>
				<s:Button right="24" top="16" width="80" height="30" label="另存为库.." toolTip="Ctrl+Shift+S"
						  click="onPressSaveAs(event)" fontSize="12"/>
				<s:Button right="211" top="14" width="80" height="30" label="重启(F5/R)" toolTip="重启模拟，F5或者Ctrl+R"
						  click="onPressRestart(event)" fontSize="12"/>
				<s:ComboBox id="mFileList" right="377" top="63" width="130" height="25"
							change="onSelectFile(event)" contentBackgroundColor="#C8C8C8"
							fontSize="14"/>
				<s:Label right="525" top="66" width="58" color="#969696" fontSize="14" text="库列表"
						 textAlign="right"/>
				<s:Label x="8" y="10" width="60" color="#969696" fontSize="14" text="标识ID"
						 textAlign="right"/>
				<s:Label id="mId1" x="90" y="10" width="130" color="#000000" fontSize="14"
						 text="标识ID" textAlign="left"/>
				<s:Label x="30" y="37" width="40" color="#969696" fontSize="14" text="名称"
						 textAlign="right"/>
				<s:TextInput id="mId2" x="90" y="32" width="130" change="onNameChanged(event)" toolTip="发射器组合的名称"
							 color="#000000" fontSize="14" text="名称" textAlign="left"/>
				<s:Button id="mSaveToLevel" x="408" y="55" width="146" height="30" toolTip="只将数据写入关卡，不保存到库。Ctrl+L"
						  label="写入关卡(不保存到库)(L)" click="onPressSaveToLevel(event)" fontSize="11"/>
			</s:BorderContainer>
		</s:VGroup>
		<s:VGroup width="295" height="100%" gap="1" paddingLeft="8">
			<s:Panel width="287" height="150" borderVisible="false" dropShadowVisible="true"
					 fontSize="12" title="发射器列表">
				<s:List id="mEmitterList" x="0" y="0" width="100%" height="100%"
						borderVisible="false" change="onEmitterSelected(event)"></s:List>
			</s:Panel>
			<s:Panel width="287" height="100%" borderVisible="false" title="发射器参数">
				<s:TileGroup x="0" y="0" columnWidth="140" horizontalAlign="justify"
							 requestedColumnCount="2">
					<s:Label fontFamily="Arial" fontSize="14" text="资源前缀" textAlign="right"
							 verticalAlign="middle"/>
					<s:ComboBox id="mEmitterRes" width="80" change="onChangeEmitterRes(event)"
								textAlign="center"/>
					<s:Label fontFamily="Arial" fontSize="14" text="初始等待时间(s)" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput1" width="80" change="onValueChanged(event)" text="0.2"
								 textAlign="center"/>
					<s:Label fontFamily="Arial" fontSize="14" text="初始速度X/Y(px/s)" textAlign="right"
							 verticalAlign="middle"/>
					<s:HGroup width="100%" height="23" verticalAlign="middle">
						<s:TextInput id="mInput2" width="60" change="onValueChanged(event)" text="0"
									 textAlign="center"/>
						<s:Label fontFamily="Arial" fontSize="14" text="/" verticalAlign="middle"/>
						<s:TextInput id="mInput30" width="60" change="onValueChanged(event)" text="0"
									 textAlign="center"/>
					</s:HGroup>
					<s:Label fontFamily="Arial" fontSize="14" text="朝向加速度(px/s2)" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput22" width="80" change="onValueChanged(event)" text="0"
								 textAlign="center"/>
					<s:Label fontFamily="Arial" fontSize="14" text="加速度X/Y(px/s2)" textAlign="right"
							 verticalAlign="middle"/>
					<s:HGroup verticalAlign="middle">
						<s:TextInput id="mInput3" width="60" change="onValueChanged(event)" text="0"
									 textAlign="center"/>
						<s:Label fontFamily="Arial" fontSize="14" text="/" verticalAlign="middle"/>
						<s:TextInput id="mInput19" width="60" change="onValueChanged(event)" text="0"
									 textAlign="center"/>
					</s:HGroup>
					<s:Label fontFamily="Arial" fontSize="14" text="初始角度" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput4" width="80" change="onValueChanged(event)" text="0"
								 textAlign="center"/>
					<s:Label fontFamily="Arial" fontSize="14" text="位置X/Y" textAlign="right"
							 verticalAlign="middle"/>
					<s:HGroup verticalAlign="middle">
						<s:TextInput id="mInput5" width="60" change="onValueChanged(event)" text="0"
									 textAlign="center"/>
						<s:Label fontFamily="Arial" fontSize="14" text="/" verticalAlign="middle"/>
						<s:TextInput id="mInput6" width="60" change="onValueChanged(event)" text="0"
									 textAlign="center"/>
					</s:HGroup>
					<s:Label fontFamily="Arial" fontSize="14" text="旋转速度(°/s)" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput7" width="80" change="onValueChanged(event)" text="0"
								 textAlign="center"/>
					<s:Label fontFamily="Arial" fontSize="14" text="旋转最小角度(°)" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput20" width="80" change="onValueChanged(event)" text="0"
								 textAlign="center"/>
					<s:Label fontFamily="Arial" fontSize="14" text="旋转最大角度(°)" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput8" width="80" change="onValueChanged(event)" text="0"
								 textAlign="center"/>
					<s:Label fontFamily="Arial" fontSize="14" text="旋转行为" textAlign="right"
							 verticalAlign="middle"/>
					<s:HGroup>
						<s:RadioButton id="mRotateType1" label="摇摆" click="onValueChanged(event)"
									   fontSize="14" groupName="radiogroup1" selected="true"/>
						<s:RadioButton id="mRotateType2" label="循环" click="onValueChanged(event)"
									   fontSize="14" groupName="radiogroup1"/>
					</s:HGroup>
					<s:Label fontFamily="Arial" fontSize="14" text="发射持续时间" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput9" width="80" change="onValueChanged(event)" text="10"
								 textAlign="center"/>
					<s:Label fontFamily="Arial" fontSize="14" text="发射间隔" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput10" width="80" change="onValueChanged(event)" text="0.2"
								 textAlign="center"/>
					<s:Label fontFamily="Arial" fontSize="14" text="单次数量" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput11" width="80" change="onValueChanged(event)" text="1"
								 textAlign="center"/>
					<s:Label fontFamily="Arial" fontSize="14" text="数量随机附加" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput12" width="80" change="onValueChanged(event)" text="0"
								 textAlign="center"/>
					<s:Label fontFamily="Arial" fontSize="14" text="子弹间隔" textAlign="right"
							 verticalAlign="middle"/>
					<s:HGroup>
						<s:RadioButton id="mBulletGap1" label="固定" click="onValueChanged(event)"
									   fontSize="14" groupName="radiogroup2" selected="true"/>
						<s:RadioButton id="mBulletGap2" label="随机" click="onValueChanged(event)"
									   fontSize="14" groupName="radiogroup2"/>
					</s:HGroup>
					<s:Label fontFamily="Arial" fontSize="14" text="子弹间隔角度" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput13" width="80" change="onValueChanged(event)" text="15"
								 textAlign="center"/>
					<s:Label fontFamily="Arial" fontSize="14" text="碰撞体长/高" textAlign="right"
							 verticalAlign="middle"/>
					<s:HGroup verticalAlign="middle">
						<s:TextInput id="mInput24" width="60" change="onValueChanged(event)" text="0"
									 textAlign="center"/>
						<s:Label fontFamily="Arial" fontSize="14" text="/" verticalAlign="middle"/>
						<s:TextInput id="mInput25" width="60" change="onValueChanged(event)" text="0"
									 textAlign="center"/>
					</s:HGroup>
					<s:Label fontFamily="Arial" fontSize="14" text="伤害系数" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput26" width="80" change="onValueChanged(event)" text="0"
								 textAlign="center"/>
				</s:TileGroup>
			</s:Panel>
			<s:Panel borderVisible="false" title="子弹参数">
				<s:TileGroup x="2" y="1" columnWidth="140" requestedColumnCount="2">
					<s:Label fontSize="14" text="朝向与速度相同" textAlign="right" verticalAlign="middle"/>
					<s:CheckBox id="mBulletDirection" click="onValueChanged(event)" enabled="true"
								fontSize="14" selected="true"/>
					<s:Label width="84" fontSize="14" text="资源前缀" textAlign="right"
							 verticalAlign="middle"/>
					<s:ComboBox id="mBulletRes" width="80" change="onValueChanged(event)"
								textAlign="center"/>
					<s:Label width="84" height="17" fontSize="14" text="持续时间(s)" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput16" width="80" change="onValueChanged(event)" text="5"
								 textAlign="center"/>
					<s:Label width="84" height="17" fontSize="14" text="初始速度(px/s)" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput17" width="80" change="onValueChanged(event)" text="200"
								 textAlign="center"/>
					<s:Label width="84" height="17" fontSize="14" text="朝向加速度(px/s2)"
							 textAlign="right" verticalAlign="middle"/>
					<s:TextInput id="mInput23" width="80" change="onValueChanged(event)" text="0"
								 textAlign="center"/>
					<s:Label width="84" height="17" fontSize="14" text="重力X/Y(px/s2)" textAlign="right"
							 verticalAlign="middle"/>
					<s:HGroup verticalAlign="middle">
						<s:TextInput id="mInput18" width="60" change="onValueChanged(event)" text="0"
									 textAlign="center"/>
						<s:Label fontSize="14" text="/" textAlign="right" verticalAlign="middle"/>
						<s:TextInput id="mInput21" width="60" change="onValueChanged(event)" text="0"
									 textAlign="center"/>
					</s:HGroup>
					<s:Label width="20" height="17" fontSize="14" text="碰撞体长/高" textAlign="right"
							 verticalAlign="middle"/>
					<s:HGroup verticalAlign="middle">
						<s:TextInput id="mInput27" width="60" change="onValueChanged(event)" text="0"
									 textAlign="center"/>
						<s:Label fontSize="12" text="/" textAlign="right" verticalAlign="middle"/>
						<s:TextInput id="mInput28" width="60" change="onValueChanged(event)" text="0"
									 textAlign="center"/>
					</s:HGroup>
					<s:Label width="84" height="17" fontSize="14" text="伤害系数" textAlign="right"
							 verticalAlign="middle"/>
					<s:TextInput id="mInput29" width="80" change="onValueChanged(event)" text="0"
								 textAlign="center"/>
				</s:TileGroup>
			</s:Panel>
		</s:VGroup>
	</s:HGroup>
</s:TitleWindow>
