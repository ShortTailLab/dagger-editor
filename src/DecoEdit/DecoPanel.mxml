<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" width="1155" height="800" creationComplete="onCreation()">
	<fx:Declarations>
		<s:RadioButtonGroup id="radiogroup1"/>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import BTEdit.InputDialog;
			
			import manager.EventManager;
			import manager.EventType;
			import manager.GameEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			private var mFilteredLibrary:ArrayCollection;
			private var mFilteredGroups:ArrayCollection;
			
			private var mTabDict:Object;
			private var mTabNames:Array;
			private var mTabSerial:int = 1;
			
			private var mLastAddedTab:String;
			private var mModifiedAndSavedGroups:Object;

			private function onCreation():void {
				this.mTabDict = new Object();
				this.mTabNames = new Array();
				this.mModifiedAndSavedGroups = new Object();
				this.mTabNavigator.addEventListener(IndexChangedEvent.CHANGE, onTabIndexChanged);
				this.mSelector.addEventListener(IndexChangedEvent.CHANGE, onSelectorTabIndexChanged);
				
				var menu:ContextMenu = new ContextMenu;
				var item:ContextMenuItem = new ContextMenuItem("关闭当前");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCloseTabMenu);
				menu.addItem(item);
				item = new ContextMenuItem("关闭所有");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCloseAllTabsMenu);
				menu.addItem(item);
				item = new ContextMenuItem("关闭其他");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCloseOtherTabsMenu);
				menu.addItem(item);
				item = new ContextMenuItem("重命名当前");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onRenameTabMenu);
				menu.addItem(item);
				this.mTabNavigator.contextMenu = menu;
				
				var cellSelector:CellSelector = new CellSelector();
				this.mCellSelector.addElement(cellSelector);
				this.setLibrary();
				if (this.mFilteredLibrary.length > 0) {
					this.addTab(this.mFilteredLibrary[0], 1);
				}
			}
			
			private function onSelectorTabIndexChanged(event:IndexChangedEvent):void {
				if (!this.mFilteredGroups) {
					this.setGroupList();
				}
			}
			
			private function onTabIndexChanged(event:IndexChangedEvent):void {
				if (this.mLastAddedTab == this.mTabNames[event.newIndex]) {
					
				}
				else {
					return;
					var groups:Array = this.mTabDict[this.mTabNames[event.newIndex]].edit.getGroups();
					if (groups && groups.length > 0) {
						var modified:Boolean = false;
						for (var i:int = 0; i < groups.length; i++) {
							if (this.mModifiedAndSavedGroups[groups]) {
								modified = true;
								break;
							}
						}
						if (modified) {
							this.mTabDict[this.mTabNames[event.newIndex]].edit.update();
						}
					}
				}
				this.mLastAddedTab = null;
			}
			
			public function init(name:String, w:Number, h:Number):void {
				this.width = w;
				this.height = h;
			}
			
			private function setLibrary():void {
				var menu:ContextMenu = new ContextMenu;
				var item:ContextMenuItem = new ContextMenuItem("重命名");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onLibraryItemRename);
				menu.addItem(item);
				var item0:ContextMenuItem = new ContextMenuItem("删除");
				item0.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onLibraryItemDelete);
				menu.addItem(item0);;
				this.mLibrary.contextMenu = menu;
				
				this.filterLibrary();
			}
			
			private function setGroupList():void {
				var menu:ContextMenu = new ContextMenu;
				var item:ContextMenuItem = new ContextMenuItem("重命名");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onGroupItemRename);
				menu.addItem(item);
				var item0:ContextMenuItem = new ContextMenuItem("删除");
				item0.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onGroupItemDelete);
				menu.addItem(item0);
				this.mGroupList.contextMenu = menu;
				
				this.filterGroups();
			}
			
			private function onGroupItemRename(event:Event):void {
				if (this.mGroupList.selectedIndex < 0) return;
				EventManager.getInstance().addEventListener(EventType.INPUT_DIALOG_CONFIRM, renameGroup);
				var input:InputDialog = new InputDialog();
				input.setTitle("重命名组合", this.mFilteredGroups[this.mGroupList.selectedIndex]);
				PopUpManager.addPopUp(input, MapEditor.getInstance());
				PopUpManager.centerPopUp(input);
			}
			
			private function renameGroup(event:GameEvent):void {
				EventManager.getInstance().removeEventListener(EventType.INPUT_DIALOG_CONFIRM, renameDeco);
				if (event.data.from == event.data.to || event.data.to==null) return;
				if (Data.getInstance().decoGroupSet[event.data.to]) {
					Alert.show("行为名已经存在，无法改名为 " + event.data.to);
					return;
				}
				
				Data.getInstance().updateDecoGroupSetById(event.data.to, Data.getInstance().decoSet[event.data.from]);
				Data.getInstance().eraseDecoGroupSetById(event.data.from);
				
				renameTab(event.data.from, event.data.to);
				this.filterGroups();
			}
			
			private function onGroupItemDelete(event:Event):void {
				if (this.mGroupList.selectedIndex < 0) return;
				var current:String = this.mFilteredGroups[this.mGroupList.selectedIndex];
				Alert.show("确定删除 "+current+"？", "警告", Alert.OK|Alert.CANCEL, null, onDeleteGroupConfirm);
				
			}
			
			private function onDeleteGroupConfirm(event:CloseEvent):void {
				if (event.detail == Alert.OK) {
					var current:String = this.mFilteredGroups[this.mGroupList.selectedIndex];
					Data.getInstance().eraseDecoGroupSetById(current);
					this.filterGroups();
					closeTab(current);
				}
			}
			
			private function onLibraryItemRename(event:Event):void {
				if (this.mLibrary.selectedIndex < 0) return;
				EventManager.getInstance().addEventListener(EventType.INPUT_DIALOG_CONFIRM, renameDeco);
				var input:InputDialog = new InputDialog();
				input.setTitle("重命名装饰", this.mFilteredLibrary[this.mLibrary.selectedIndex]);
				PopUpManager.addPopUp(input, MapEditor.getInstance());
				PopUpManager.centerPopUp(input);
			}
			
			private function renameDeco(event:GameEvent):void {
				EventManager.getInstance().removeEventListener(EventType.INPUT_DIALOG_CONFIRM, renameDeco);
				if (event.data.from == event.data.to || event.data.to==null) return;
				if (Data.getInstance().decoSet[event.data.to]) {
					Alert.show("行为名已经存在，无法改名为 " + event.data.to);
					return;
				}
				
				Data.getInstance().updateDecoSetById(event.data.to, Data.getInstance().decoSet[event.data.from]);
				Data.getInstance().eraseDecoSetById(event.data.from);
				
				renameTab(event.data.from, event.data.to);
				this.filterLibrary();
			}
			
			private function onLibraryItemDelete(event:Event):void {
				if (this.mLibrary.selectedIndex < 0) return;
				var current:String = this.mFilteredLibrary[this.mLibrary.selectedIndex];
				Alert.show("确定删除 "+current+"？", "警告", Alert.OK|Alert.CANCEL, null, onDeleteConfirm);
				
			}
			
			private function onDeleteConfirm(event:CloseEvent):void {
				if (event.detail == Alert.OK) {
					var current:String = this.mFilteredLibrary[this.mLibrary.selectedIndex];
					Data.getInstance().eraseDecoSetById(current);
					this.filterLibrary();
					closeTab(current);
				}
			}
			
			private function filterLibrary(event:Event=null):void {
				var content:String = this.mSearch.text;
				var searchContent:RegExp = new RegExp(content, "i");
				this.mFilteredLibrary = new ArrayCollection();
				for (var b:String in Data.getInstance().decoSet)
					if(b.search(searchContent) >= 0)
						this.mFilteredLibrary.addItem(b);
				this.mFilteredLibrary.sort = new Sort();
				this.mFilteredLibrary.refresh();
				
				this.mLibrary.dataProvider = this.mFilteredLibrary;
			}
			
			private function filterGroups(event:Event=null):void {
				this.mFilteredGroups = new ArrayCollection();
				for (var g:String in Data.getInstance().decoGroupSet) {
					this.mFilteredGroups.addItem(g);
				}
				this.mFilteredGroups.sort = new Sort();
				this.mFilteredGroups.refresh();
				if (this.mGroupList) this.mGroupList.dataProvider = this.mFilteredGroups;
			}
			
			private function onPressClose(event:Event):void {
				PopUpManager.removePopUp(this);
				EventManager.getInstance().dispatchEvent(new GameEvent(EventType.DECO_PANEL_CLOSE));
			}
			
			private function onPressSave(event:Event):void {
				if (this.mTabNavigator.selectedIndex < 0) return;
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				if (this.mTabDict[current].modified) {
					if (this.mTabDict[current].type == 2) {
						Data.getInstance().updateDecoGroupSetById(current, this.mTabDict[current].edit.export());
						this.mModifiedAndSavedGroups[current] = true;
					}
					else {
						Data.getInstance().updateDecoSetById(current, this.mTabDict[current].edit.export());
					}
					setTabModified(current, false);
					var alert:Alert = Alert.show(current+" 保存成功!");
					setTimeout(function ():void { if (alert) alert.parent.removeChild(alert); }, 1000);
					this.filterLibrary();
					this.filterGroups();
				}
			}
			
			private function onPressSaveAll(event:Event):void {
				for (var tabName:String in this.mTabDict) {
					if (this.mTabDict[tabName].modified) {
						var data:Object = this.mTabDict[tabName].edit.export();
						if (this.mTabDict[tabName].type == 2) {
							Data.getInstance().updateDecoGroupSetById(tabName, data);	
							this.mModifiedAndSavedGroups[tabName] = true;
						}
						else {
							Data.getInstance().updateDecoSetById(tabName, data);	
						}
						setTabModified(tabName, false);
					}
				}
				var alert:Alert = Alert.show(" 保存成功!");
				setTimeout(function ():void { if (alert) alert.parent.removeChild(alert); }, 1000);
				this.filterLibrary();
				this.filterGroups();
			}
			
			private function onPressPreview(event:Event):void {
				
			}
			
			private function onSearchChanged(event:Event):void {
				this.filterLibrary();
			}

			private function onLibrarySelected(e:IndexChangeEvent):void {
				var current:String = this.mFilteredLibrary[this.mLibrary.selectedIndex];
				this.switchToTab(current);
			}
			
			private function onGroupSelected(event:IndexChangeEvent):void {
				var current:String = this.mFilteredGroups[this.mGroupList.selectedIndex];
				this.switchToTab(current, 2);
			}
			
			private function onPressNewTab(event:Event):void {
				var type:int = this.radiogroup1.selectedValue == "装饰"?1:2;
				var name:String = type==1?"新装饰":"新组合";
				var set:Object = type==1?Data.getInstance().decoSet:Data.getInstance().decoGroupSet;
				for (var n:String in set) {
					if (n.indexOf(name) === 0) {
						var str:String = n.substr(3);
						var num:int = int(str);
						if (num >= this.mTabSerial) {
							this.mTabSerial = num+1;
						}
					}
				}
				addTab(name+this.mTabSerial, type);
				this.mTabSerial++;
			}
			
			private function addTab(name:String, type:int):void {
				var tab:NavigatorContent;
				if (this.mTabDict[name]) {
					tab = this.mTabDict[name].tab;
					tab.removeAllElements();
				}
				else {
					tab = new NavigatorContent();
					this.mTabNavigator.addElement(tab);
					this.mTabNames.push(name);
				}
				
				var edit:Object;
				var modified:Object;
				if (type == 1) {
					edit = new DecoLayerEdit();
					edit.init(name, this);
					modified = Data.getInstance().decoSet[name]==null?true:false;
				}
				else {
					edit = new DecoGroupEdit();
					modified = Data.getInstance().decoGroupSet[name]==null?true:false;
				}
				tab.addElement(edit as UIComponent);
				
				tab.label = name+(modified?"*":"");
				var index:int = this.mTabNames.indexOf(name);
				this.mTabNavigator.selectedIndex = index;
				this.mLastAddedTab = name;
				
				this.mTabDict[name] = {tab:tab, modified:modified, edit:edit, type:type};
			}
			
			private function closeTab(name:String):void {
				if (this.mTabDict[name]) {
					this.mTabNavigator.removeChild(this.mTabDict[name].tab);
					this.mTabNames.splice(this.mTabNames.indexOf(name), 1);
					delete this.mTabDict[name];
				}
			}
			
			private function renameTab(from:String, to:String):void {
				if (this.mTabDict[from]) {
					var index:int = this.mTabNames.indexOf(from);
					this.mTabNames[index] = to;
					var info:Object = this.mTabDict[from];
					this.mTabDict[to] = info;
					info.tab.label = to+(info.modified?"*":"");
					info.edit.rename(to);
					this.mTabDict[from] = null;
					delete this.mTabDict[from];
				}
			}
			
			private function switchToTab(name:String, type:int=1):void {
				var index:int = this.mTabNames.indexOf(name);
				if (index >= 0) {
					this.mTabNavigator.selectedIndex = index;
				}
				else {
					this.addTab(name, type);
				}
			}
			
			public function setTabModified(name:String, modified:Boolean):void {
				if (this.mTabDict[name]) {
					this.mTabDict[name].modified = true;
					this.mTabDict[name].tab.label = name+(modified?"*":"");
				}
			}
			
			private function onCloseTabMenu(event:Event):void {
				if (this.mTabNavigator.selectedIndex >= 0 && this.mTabNames.length > 0) {
					if (this.mTabDict[this.mTabNames[this.mTabNavigator.selectedIndex]].modified) {
						Alert.show(this.mTabNames[this.mTabNavigator.selectedIndex]+" 有修改尚未保存，确定关闭？", "警告", Alert.OK|Alert.CANCEL, this, onConfirmClose);
					}
					else {
						this.closeTab(this.mTabNames[this.mTabNavigator.selectedIndex]);
					}
				}
			}
			
			private function onCloseAllTabsMenu(event:Event):void {
				var needWarning:String = null;
				for (var tabName:String in this.mTabDict) {
					if (this.mTabDict[tabName].modified) {
						needWarning = tabName;
						break;
					}
				}
				if (needWarning) {
					Alert.show(needWarning+" 有修改尚未保存，确定关闭？", "警告", Alert.OK|Alert.CANCEL, this, onConfirmCloseAll);
				}
				else {
					for (tabName in this.mTabDict) {
						this.closeTab(tabName);
					}
				}
			}
			
			private function onCloseOtherTabsMenu(event:Event):void {
				var needWarning:String = null;
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				for (var tabName:String in this.mTabDict) {
					if (tabName != current && this.mTabDict[tabName].modified) {
						needWarning = tabName;
						break;
					}
				}
				if (needWarning) {
					Alert.show(needWarning+" 有修改尚未保存，确定关闭？", "警告", Alert.OK|Alert.CANCEL, this, onConfirmCloseOthers);
				}
				else {
					for (tabName in this.mTabDict) {
						if (tabName != current) {
							this.closeTab(tabName);
						}
					}
				}
			}
			
			private function onConfirmClose(event:CloseEvent):void {
				if (event.detail == Alert.OK) {
					var name:String = this.mTabNames[this.mTabNavigator.selectedIndex]
					this.closeTab(name);
				}
			}
			
			private function onConfirmCloseAll(event:CloseEvent):void {
				if (event.detail == Alert.OK) {
					for (var tabName:String in this.mTabDict) {
						this.closeTab(tabName);
					}
				}
			}
			
			private function onConfirmCloseOthers(event:CloseEvent):void {
				if (event.detail == Alert.OK) {
					var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
					for (var tabName:String in this.mTabDict) {
						if (tabName != current) {
							this.closeTab(tabName);
						}
					}
				}
			}
			
			private function onRenameTabMenu(event:Event):void {
				if (this.mTabNavigator.selectedIndex < 0) return;
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				EventManager.getInstance().addEventListener(EventType.INPUT_DIALOG_CONFIRM, renameDeco);
				var input:InputDialog = new InputDialog();
				input.setTitle("重命名行为", current);
				PopUpManager.addPopUp(input, MapEditor.getInstance());
				PopUpManager.centerPopUp(input);
			}
		]]>
	</fx:Script>
	
	<s:Button right="0" top="0" width="30" height="20" label="x" click="onPressClose(event)"/>
	<s:HGroup right="155" top="10" horizontalAlign="left">
		<s:Label y="10" paddingTop="3" text="新建类型:"/>
		<s:RadioButton label="装饰" groupName="radiogroup1"
					   selected="true"/>
		<s:RadioButton label="组合" groupName="radiogroup1"/>
	</s:HGroup>
	<s:HGroup x="0" y="0" width="100%" height="30">
		<s:Button width="80" height="25" label="保存当前" click="onPressSave(event)"/>
		<s:Button width="80" height="25" label="保存所有" click="onPressSaveAll(event)"/>
		<s:Button width="80" height="25" label="预览效果" click="onPressPreview(event)"/>
	</s:HGroup>
	<s:HGroup left="0" top="30" width="100%" height="100%" gap="5">
		<s:Panel width="150" height="100%" borderVisible="false" dropShadowVisible="false"
				 title="装饰">
			<s:HGroup x="0" y="0" width="100%" height="100%" gap="0">
				<s:VGroup width="100%" height="100%" gap="0">
					<s:TextInput id="mSearch" width="100%" change="onSearchChanged(event)"/>
					<s:List id="mLibrary" width="100%" height="100%" change="onLibrarySelected(event)"></s:List>
				</s:VGroup>
			</s:HGroup>
		</s:Panel>
		<s:Group width="100%" height="100%">
			<mx:TabNavigator id="mTabNavigator" width="100%" height="100%" paddingTop="0">
			</mx:TabNavigator>
			<s:Button right="0" top="0" width="30" label="+" click="onPressNewTab(event)"/>
		</s:Group>
		<s:Group width="150" height="100%">
			<mx:TabNavigator id="mSelector" x="0" y="0" width="100%" height="100%" paddingTop="0">
				<s:NavigatorContent id="mCellSelector" width="100%" height="100%" label="装饰元素">
				</s:NavigatorContent>
				<s:NavigatorContent width="100%" height="100%" label="装饰组合">
					<s:List id="mGroupList" x="0" y="0" width="100%" height="100%" change="onGroupSelected(event)">
					</s:List>
				</s:NavigatorContent>
			</mx:TabNavigator>
			
		</s:Group>
	</s:HGroup>
</s:BorderContainer>
