<?xml version="1.0" encoding="utf-8"?>
<mx:UIComponent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			import spark.filters.GlowFilter;
			
			private var mData:Object;
			private var mSelected:Boolean;
			private var mLayer:SingleLayer;
			private var mEdit:DecoLayerEdit;
			
			public function setData(data:Object, layer:SingleLayer, edit:DecoLayerEdit):void {
				this.mData = data;
				this.mLayer = layer;
				this.mEdit = edit;
				
				this.updateImages();
				
				this.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				this.addEventListener(MouseEvent.CLICK, onMouseClick);
				this.addEventListener(MouseEvent.ROLL_OVER, onRollOver);
				this.addEventListener(MouseEvent.ROLL_OUT, onRollOut);
				
				var menu:ContextMenu = new ContextMenu();
				var item:ContextMenuItem = new ContextMenuItem("复制");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCopyCell);
				menu.addItem(item);
				item = new ContextMenuItem("删除");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onDeleteCell);
				menu.addItem(item);
				item = new ContextMenuItem("置顶");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onMoveTopCell);
				menu.addItem(item);
				item = new ContextMenuItem("上移一层");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onMoveUpCell);
				menu.addItem(item);
				item = new ContextMenuItem("下移一层");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onMoveDownCell);
				menu.addItem(item);
				item = new ContextMenuItem("置底");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onMoveBottomCell);
				menu.addItem(item);
				this.contextMenu = menu;
				
				this.setSelected(this.data == this.mEdit.currentCellData);
			}
			
			private function onCopyCell(event:Event):void {
				this.mEdit.onCopyCell(this.mData);
			}
			
			private function onDeleteCell(event:Event):void {
				this.mEdit.deleteCell(this, this.mLayer);
			}
			
			private function onMoveTopCell(event:Event):void {
				var max:Number = this.data.i;
				for each (var c:SingleCell in this.mLayer.dict) {
					if (c != this && c.data.i > max) {
						max = c.data.i;
					}
				}
				if (max != this.data.i) {
					this.data.i = max+1;
					this.mLayer.sortCells();
				}
			}
			
			private function onMoveUpCell(event:Event):void {
				var cells:Array = new Array();
				for each (var c:SingleCell in this.mLayer.dict) {
					cells.push(c);
				}
				cells.sort(this.mLayer.sortByCellIndex);
				var index:int = cells.indexOf(this);
				if (index != cells.length-1) {
					if (index == cells.length-2) {
						this.mData.i = cells[cells.length-1].data.i+1;
					}
					else {
						this.mData.i = (cells[index+1].data.i+cells[index+2].data.i)/2;
					}
				}
				this.mLayer.sortCells();
			}
			
			private function onMoveDownCell(event:Event):void {
				var cells:Array = new Array();
				for each (var c:SingleCell in this.mLayer.dict) {
					cells.push(c);
				}
				cells.sort(this.mLayer.sortByCellIndex);
				var index:int = cells.indexOf(this);
				if (index != 0) {
					if (index == 1) {
						this.mData.i = cells[0].data.i-1;
					}
					else {
						this.mData.i = (cells[index-1].data.i+cells[index-2].data.i)/2;
					}
				}
				this.mLayer.sortCells();
			}
			
			private function onMoveBottomCell(event:Event):void {
				var min:Number = this.data.i;
				for each (var c:SingleCell in this.mLayer.dict) {
					if (c != this && c.data.i < min) {
						min = c.data.i;
					}
				}
				if (min != this.data.i) {
					this.data.i = min-1;
					this.mLayer.sortCells();
				}
			}
			
			private var lastMouse:Point;
			private function onMouseDown(event:MouseEvent):void {
				if (this.mSelected) {
					this.stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
					this.stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
					lastMouse = new Point(this.stage.mouseX, this.stage.mouseY);
				}
			}
			
			private function onMouseMove(event:MouseEvent):void {
				var newX:Number = this.x + this.stage.mouseX - lastMouse.x;
				var newY:Number = this.y + this.stage.mouseY - lastMouse.y;
				if (newX < 0) newX = 0;
				if (newX > this.mLayer.data.w) newX = this.mLayer.data.w;
				if (newY < 0) newY = 0;
				if (newY > this.mLayer.data.h) newY = this.mLayer.data.h;
				this.x = newX;
				this.y = newY;
				var newPos:Object = SingleLayer.toCocosWorld(this.x, this.y, this.mData, this.mLayer.data);
				this.mData.x1 = newPos.x;
				this.mData.y1 = newPos.y;
				this.mEdit.updateCurrentCell();
				this.mEdit.setModified(true);
				lastMouse.x = this.stage.mouseX;
				lastMouse.y = this.stage.mouseY;
			}
			
			private function onMouseUp(event:MouseEvent):void {
				this.stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
				this.stage.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
			}
			
			private function onMouseClick(event:MouseEvent):void {
				if (this.mSelected) return;
				this.setSelected(!this.mSelected);
				if (this.mSelected) {
					this.mEdit.setCurrent(this.mLayer, this);
				}
				else {
					this.mEdit.setCurrent(this.mLayer, null);
				}
			}
			
			private function onRollOver(event:Event):void {
				if (!this.mSelected) {
					var filter:spark.filters.GlowFilter = new GlowFilter();
					filter.color = 0xFFFF00;
					filter.strength = 50;
					filter.blurX = 5;
					filter.blurY = 5;
					this.filters = [filter];
				}
			}
			
			private function onRollOut(event:Event):void {
				if (!this.mSelected) {
					this.filters = [];
				}
			}
			
			private function updateImages():void {
				this.removeChildren();
				var file:File = Data.getInstance().resolvePath("images/"+this.mData.n+".png");
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onImageLoad);
				loader.load(new URLRequest(file.url));
			}
			
			private function onImageLoad(event:Event):void {
				var bitmap:Bitmap = event.currentTarget.content
				this.addChild(bitmap);
				bitmap.x = -bitmap.width/2;
				bitmap.y = -bitmap.height/2;
				this.update();
			}
			
			public function update():void {
				var ret:Object = SingleLayer.toFlexWorld(this.mData, this.mLayer.data);
				this.x = ret.x;
				this.y = ret.y;
				this.scaleX = this.scaleY = this.mData.s1;
				if (this.mData.flipx) this.scaleX = -this.scaleX;
				if (this.mData.flipy) this.scaleY = -this.scaleY;
				this.rotation = this.mData.r1;
			}
			
			public function setSelected(bool:Boolean):void {
				this.mSelected = bool;
				if (bool) {
					var filter:spark.filters.GlowFilter = new GlowFilter();
					filter.color = 0xFF0000;
					filter.strength = 50;
					filter.blurX = 5;
					filter.blurY = 5;
					this.filters = [filter];
				}
				else {
					this.filters = [];
				}
			}
			
			public function get data():Object { return this.mData; }
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
</mx:UIComponent>
