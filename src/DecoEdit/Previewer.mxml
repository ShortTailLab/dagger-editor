<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			private var mDataDict:Dictionary;
			private var mPairs:Array;
			private var mCells:Array;
			private var mBg1:UIComponent;
			private var mBg2:UIComponent;
			private var mLoaderDict:Dictionary;

			private var mData:Object;
			
			public function setData(data:Object, w:Number, h:Number):void {
				this.mData = data;
				this.width = w;
				this.height = h;
				this.mDataDict = new Dictionary();
				this.mLoaderDict = new Dictionary();
				this.mPairs = new Array();
				this.mCells = new Array();
				
				this.mBg1 = new UIComponent();
				this.mBg1.width = 960;
				this.mBg1.height = 1280;
				this.mBg2 = new UIComponent();
				this.mBg2.width = 960;
				this.mBg2.height = 1280;
				this.addElement(this.mBg1);
				this.addElement(this.mBg2);
				this.mBg1.y = -1280;
				this.mBg2.y = -2560;
				this.mPairs.push([this.mBg1, this.mBg2]);
				this.setBg();
				
				for each (var l:Object in data.layers) {
					if (l.i == 0) {
						this.mDataDict[this.mBg1] = l;
						this.mDataDict[this.mBg2] = l;
						continue;
					}
					var layer:UIComponent = this.getLayer(l);
					this.addElement(layer);
					layer.y = -layer.height;
					this.mDataDict[layer] = l;
					
					var layer2:UIComponent = this.getLayer(l);
					this.addElement(layer2);
					layer2.y = -2*layer2.height;
					this.mDataDict[layer2] = l;
					
					this.mPairs.push([layer, layer2]);
				}
				
				this.addEventListener(Event.ENTER_FRAME, onEnterFrame);
			}
			
			public function destroy():void {
				this.removeEventListener(Event.ENTER_FRAME, onEnterFrame);
			}
			
			private function onEnterFrame(event:Event):void {
				for each (var pair:Array in this.mPairs) {
					var a:UIComponent = pair[0];
					var b:UIComponent = pair[1];
					var data:Object = this.mDataDict[a];
					var dist:Number = data.s * 1/30;
					a.y += dist;
					b.y += dist;
					if (a.y > 0) {
						a = this.getLayer(data, a);
						a.y = b.y - b.height;
					}
					if (b.y > 0) {
						b = this.getLayer(data, b);
						b.y = a.y - a.height;
					}
				}
				for each (var cell:UIComponent in this.mCells) {
					data = this.mDataDict[cell];
					cell.x += data.xs1;
					cell.y += data.ys1;
					cell.scaleX += data.ss1;
					cell.scaleY += data.ss1;
					cell.rotation += data.rs1;
				}
			}
			
			private function setBg():void {
				if (!this.mData.bg) return;
				var file:File = Data.getInstance().resolvePath("images/bg/"+this.mData.bg+".png");
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onBgLoaded);
				loader.load(new URLRequest(file.url));
			}
			
			private function onBgLoaded(event:Event):void {
				this.mBg1.removeChildren();
				this.mBg1.addChild(event.currentTarget.content);
//				this.mBg1.y = -event.currentTarget.content.height;
				var bitmap:Bitmap = new Bitmap(event.currentTarget.content.bitmapData);
				this.mBg2.removeChildren();
				this.mBg2.addChild(bitmap);
//				this.mBg2.y = -2*bitmap.height;
			}
			
			private function getLayer(data:Object, layer:UIComponent=null):UIComponent {
				if (!layer) layer = new UIComponent();
				layer.width = data.w;
				layer.height = data.h;
				for (var i:int = 0; i < layer.numChildren; i++) {
					var cc:UIComponent = layer.getChildAt(i) as UIComponent;
					delete this.mDataDict[cc];
//					trace("remove "+this.mCells.indexOf(cc));
					this.mCells.splice(this.mCells.indexOf(cc), 1);
				}
				layer.removeChildren();
				
				for each (var c:Object in data.cells) {
					if (c.f) {
						var cell:UIComponent = new UIComponent();
						var loader:Loader = new Loader();
						this.mLoaderDict[loader] = cell;
						var file:File = Data.getInstance().resolvePath("images/"+c.n+".png");
						loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onCellLoaded);
						loader.load(new URLRequest(file.url));
						layer.addChild(cell);
						var p:Object = SingleLayer.toFlexWorld(c, data);
						cell.x = p.x;
						cell.y = p.y;
						cell.rotation = c.r1;
						cell.scaleX = cell.scaleY = c.s1;
						if (c.flipx) cell.scaleX = -cell.scaleX;
						if (c.flipy) cell.scaleY = -cell.scaleY;
						this.mCells.push(cell);
						this.mDataDict[cell] = c;
					}
					else {
						var num:int = int(this.getRandomBetween(c.num1, c.num2));
						for (i = 0; i < num; i++) {
							var newData:Object = {
								"yt": c.yt,
								"num2": c.num2,
								"flipx": c.flipx,
								"num1": c.num1,
								"r2": c.r2,
								"xs1": this.getRandomBetween(c.xs1, c.xs2),
								"yr": c.yr,
								"r1": this.getRandomBetween(c.r1, c.r2),
								"xr": c.xr,
								"ys1": this.getRandomBetween(c.ys1, c.ys2),
								"xs2": c.xs2,
								"flipy": c.flipy,
								"s1": this.getRandomBetween(c.s1, c.s2),
								"rs1": this.getRandomBetween(c.rs1, c.rs2),
								"y2": c.y2,
								"y1": this.getRandomBetween(c.y1, c.y2),
								"xt": c.xt,
								"ys2": c.ys2,
								"s2": c.s2,
								"i": c.i,
								"x1": this.getRandomBetween(c.x1, c.x2),
								"f": 1,
								"ss1": this.getRandomBetween(c.ss1, c.ss2),
								"ss2": c.ss2,
								"rs2": c.rs2,
								"n": c.n,
								"x2": c.x2
							}
							cell = new UIComponent();
							loader = new Loader();
							this.mLoaderDict[loader] = cell;
							file = Data.getInstance().resolvePath("images/"+newData.n+".png");
							loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onCellLoaded);
							loader.load(new URLRequest(file.url));
							layer.addChild(cell);
							p = SingleLayer.toFlexWorld(newData, data);
							cell.x = p.x;
							cell.y = p.y;
							cell.rotation = newData.r1;
							cell.scaleX = cell.scaleY = newData.s1;
							if (newData.flipx) cell.scaleX = -cell.scaleX;
							if (newData.flipy) cell.scaleY = -cell.scaleY;
							this.mCells.push(cell);
							this.mDataDict[cell] = newData;
						}
					}
				}
				
				return layer;
			}
			
			private function getRandomBetween(a:Number, b:Number):Number {
				if (b < a) b = a;
				var ret:Number = Math.random()*(b-a)+a;
				return ret;
			}
			
			private function onCellLoaded(event:Event):void {
				var cell:UIComponent = this.mLoaderDict[event.currentTarget.loader];
				delete this.mLoaderDict[event.currentTarget.loader];
				var bitmap:Bitmap = event.currentTarget.content;
				cell.addChild(bitmap);
				bitmap.x = -bitmap.width/2;
				bitmap.y = -bitmap.height/2;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
</s:Group>
