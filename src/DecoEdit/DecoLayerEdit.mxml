<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
			xmlns:s="library://ns.adobe.com/flex/spark" 
			xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="onCreate()">
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.controls.Menu;
			
			import spark.events.IndexChangeEvent;
			
			private var mPanel:DecoPanel;	
			
			private var mName:String;
			private var mData:Object;
			private var mCreated:Boolean = false;
			private var CLIPPING_LAYER:Object;
			private var CLIPPING_CELL:Object;
			private var mCurrentLayer:Object;
			private var mCurrentCell:Object;
			private var mRender:DecoLayerRender;
			
			private function onCreate():void {
				this.mCreated = true;
				var menu:ContextMenu = new ContextMenu();
				var item:ContextMenuItem = new ContextMenuItem("新建");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onNewLayer);
				menu.addItem(item);
				item = new ContextMenuItem("复制");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCopyLayer);
				menu.addItem(item);
				item = new ContextMenuItem("粘贴");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onPasteLayer);
				menu.addItem(item);
				item = new ContextMenuItem("删除");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onDeleteLayer);
				menu.addItem(item);
				this.mLayerTree.contextMenu = menu;
				
				menu = new ContextMenu();
				item = new ContextMenuItem("复制");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCopyCell);
				menu.addItem(item);
				item = new ContextMenuItem("粘贴");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onPasteCell);
				menu.addItem(item);
				item = new ContextMenuItem("删除");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onDeleteCell);
				menu.addItem(item);
				this.mCellTree.contextMenu = menu;
				
				if (this.mPanel) {
					this.update();
				}
			}
			
			private function onNewLayer(event:Event):void {
				var newIndex:Number = 1;
				if (this.mData.layers) {
					var max:Number = 0;
					for (var i:int = 0; i < this.mData.layers.length; i++) {
						if (this.mData.layers[i].i > max) {
							max = this.mData.layers[i].i;
						}
					}
					newIndex = max + 1;
				}
				this.mData.layers.push({w:960, h:1280, i:newIndex, s:40, cells:[]});
				this.setLayers();
				this.setModified(true);
			}
			
			private function onCopyLayer(event:Event):void {
				var index:int = this.mLayerTree.selectedIndex - 1;
				if (index < 0) return;
				CLIPPING_LAYER = Utils.cloneObjectData(this.mData.layers[index]);
				trace("copied data "+JSON.stringify(CLIPPING_LAYER));
			}
			
			private function onPasteLayer(event:Event):void {
				if (!CLIPPING_LAYER) return;
				var newIndex:Number = 1;
				if (this.mData.layers) {
					var max:Number = 0;
					for (var i:int = 0; i < this.mData.layers.length; i++) {
						if (this.mData.layers[i].i > max) {
							max = this.mData.layers[i].i;
						}
					}
					newIndex = max + 1;
				}
				var data:Object = Utils.cloneObjectData(CLIPPING_LAYER);
				data.i = newIndex;
				this.mData.layers.push(data);
				this.setLayers();
				this.setModified(true);
			}
			
			private function onDeleteLayer(event:Event):void {
				var index:int = this.mLayerTree.selectedIndex - 1;
				if (index < 0) return;
				if (this.mData.layers[index].i == 0) {
					Alert.show("战斗层不可删除！");
					return;
				}
				this.mData.layers.splice(index, 1);
				this.setLayers();
				this.setModified(true);
			}
			
			private function onCopyCell(event:Event):void {
				var index:int = this.mCellTree.selectedIndex-1;
				if (index < 0) return;
				CLIPPING_CELL = Utils.cloneObjectData(this.mCurrentLayer.cells[index]);
				trace("copied data "+JSON.stringify(CLIPPING_CELL));
			}
			
			private function onPasteCell(event:Event):void {
				if (!CLIPPING_CELL) return;
				var data:Object = Utils.cloneObjectData(CLIPPING_CELL);
				this.mCurrentLayer.cells.push(data);
				this.setLayerProperties();
				this.setModified(true);
			}
			
			private function onDeleteCell(event:Event):void {
				var index:int = this.mCellTree.selectedIndex - 1;
				if (index < 0) return;
				this.mCurrentLayer.cells.splice(index, 1);
				this.setLayerProperties();
				this.setModified(true);
			}
			
			public function init(name:String, panel:DecoPanel):void {
				this.mName = name;
				this.mPanel = panel;
				if (this.mCreated) {
					this.update();
				}
			}
			
			public function update(readFromSelf:Boolean=false):void {
				if (!readFromSelf) {
					if (Data.getInstance().decoSet[this.mName]) {
						this.mData = Utils.cloneObjectData(Data.getInstance().decoSet[this.mName]);
					}
					else {
						this.mData = {};
					}
				}
				else {
					
				}
				
				this.setBg();
				this.setLayers();
				this.setLayerProperties();
				this.setCellProperties();
				this.setRender();
			}
			
			private function setBg():void {
				var ac:ArrayCollection = new ArrayCollection();
				for (var s:String in Data.getInstance().decoBgSet) {
					ac.addItem(s);
				}
				ac.sort = new Sort();
				ac.refresh();
				this.mBgComboBox.dataProvider = ac;
				if (this.mData.bg) {
					for (var i:int = 0; i < ac.length; i++) {
						if (ac[i] == this.mData.bg) {
							this.mBgComboBox.selectedIndex = i;
							break;
						}
					}
				}
			}
			
			private function onBgChanged(event:IndexChangeEvent):void {
				this.mData.bg = this.mBgComboBox.dataProvider[event.newIndex];
				this.mRender.setBg();
				this.setModified(true);
			}
			
			private function setLayers():void {
				var list:ArrayCollection = new ArrayCollection();
				var layers:ArrayCollection = new ArrayCollection();
				list.addItem({name:this.mName, children:layers});
				if (!this.mData.layers) {
					this.mData.layers = [];
					this.mData.layers.push({w:960, h:1280, i:0, s:40, cells:[]});
				}
				(this.mData.layers as Array).sortOn("i");
				for each (var l:Object in this.mData.layers) {
					layers.addItem({name:l.i==0?"[0]BattleLayer":"["+l.i+"]Layer"});
				}
				this.mLayerTree.labelField = "name";
				this.mLayerTree.dataProvider = list;
				setTimeout(this.expandLayerTree, 50);
			}
			
			private function expandLayerTree():void {
				this.mLayerTree.expandChildrenOf(this.mLayerTree.dataProvider[0], true);
			}
			
			private function onLayerTreeSelected(event:Event):void {
				this.setLayerProperties();
				this.mRender.setCurrentLayer(this.mCurrentLayer);
			}
			
			private function setLayerProperties():void {
				var index:int = this.mLayerTree.selectedIndex-1;
				if (index < 0) index = 0;
				var data:Object = this.mData.layers[index];
				this.mCurrentLayer = data;
				this.mMapWidth.text = data.w;
				this.mMapHeight.text = data.h;
				this.mSpeed.text = data.s;
				this.mMapIndex.text = data.i;
				this.mMapIndex.editable = (data.i != 0);
				
				var list:ArrayCollection = new ArrayCollection();
				var cells:ArrayCollection = new ArrayCollection();
				list.addItem({name:data.i==0?"[0]BattleLayer":"["+data.i+"]Layer", children:cells});
				for each (var c:Object in data.cells) {
					cells.addItem({name:c.n});
				}
				this.mCellTree.labelField = "name";
				this.mCellTree.dataProvider = list;
				setTimeout(this.expandCellTree, 50);
			}
			
			private function expandCellTree():void {
				this.mCellTree.expandChildrenOf(this.mCellTree.dataProvider[0], true);
			}
			
			private static const RELATIVE_POS:Object = {1:"┏", 2:"┓", 3:"┗", 4:"┛", "┏":1, "┓":2, "┗":3, "┛":4};
			private function setCellProperties():void {
				var index:int = this.mCellTree.selectedIndex - 1;
				var data:Object;
				if (index < 0) data = null;
				else data = this.mCurrentLayer.cells[index];
				this.mCurrentCell = data;
				if (data) {
					this.mCellName.text = data.n;
					this.mCellType.text = data.g?"组合":"元素";
					this.radiogroup1.selectedValue = data.f?"固定":"随机";
					this.updateCellFixed();
					this.mX1.text = data.x1;
					this.mX2.text = data.x2;
					this.radiogroup2.selectedValue = data.xt==1?"abs":"p%";
					this.radiogroup3.selectedValue = RELATIVE_POS[data.xr];
					this.mY1.text = data.y1;
					this.mY2.text = data.y2;
					this.radiogroup4.selectedValue = data.yt==1?"abs":"p%";
					this.radiogroup5.selectedValue = RELATIVE_POS[data.yr];
					this.mScale1.text = data.s1;
					this.mScale2.text = data.s2;
					this.mRotation1.text = data.r1;
					this.mRotation2.text = data.r2;
					this.mFlipX.selected = data.flipx==1;
					this.mFlipY.selected = data.flipy==1;
					this.mXSpeed1.text = data.xs1;
					this.mXSpeed2.text = data.xs2;
					this.mYSpeed1.text = data.ys1;
					this.mYSpeed2.text = data.ys2;
					this.mScaleSpeed1.text = data.ss1;
					this.mScaleSpeed2.text = data.ss2;
					this.mRotationSpeed1.text = data.rs1;
					this.mRotationSpeed2.text = data.rs2;
					this.mNum1.text = data.num1;
					this.mNum2.text = data.num2;
				}
				else {
					this.mCellName.text = "null";
					this.mCellType.text = "null";
					this.radiogroup1.selectedValue = "固定";
					this.updateCellFixed();
				}
			}
			
			private function updateCellFixed():void {
				var i:int;
				if (this.radiogroup1.selectedValue == "固定") {
					for (i = 0; i < 9; i++) {
						this["mTilde"+i].visible = false;
					}
					this.mX2.visible = false;
					this.mY2.visible = false;
					this.mScale2.visible = false;
					this.mRotation2.visible = false;
					this.mXSpeed2.visible = false;
					this.mYSpeed2.visible = false;
					this.mScaleSpeed2.visible = false;
					this.mRotationSpeed2.visible = false;
					this.mNum2.visible = false;
					this.mNum1.text = "1";
					this.mNum1.editable = false;
				}
				else {
					for (i = 0; i < 9; i++) {
						this["mTilde"+i].visible = true;
					}
					this.mX2.visible = true;
					this.mY2.visible = true;
					this.mScale2.visible = true;
					this.mRotation2.visible = true;
					this.mXSpeed2.visible = true;
					this.mYSpeed2.visible = true;
					this.mScaleSpeed2.visible = true;
					this.mRotationSpeed2.visible = true;
					this.mNum2.visible = true;
					this.mNum1.editable = true;
				}
			}
			
			public function rename(to:String):void {
				this.mName = to;
			}
			
			private function onValueChanged(event:Event):void {
				if (this.mCurrentCell) {
					var ret:Object;
					if (event.currentTarget is RadioButton) {
						ret = SingleLayer.toFlexWorld(this.mCurrentCell, this.mCurrentLayer);
					}
					else {
						this.mCurrentCell.x1 = int(this.mX1.text);
						this.mCurrentCell.y1 = int(this.mY1.text);
					}
					this.mCurrentCell.x2 = int(this.mX2.text);
					this.mCurrentCell.xt = this.radiogroup2.selectedValue=="abs"?1:0;
					this.mCurrentCell.xr = RELATIVE_POS[this.radiogroup3.selectedValue];
					this.mCurrentCell.y2 = int(this.mY2.text);
					this.mCurrentCell.yt = this.radiogroup4.selectedValue=="abs"?1:0;
					this.mCurrentCell.yr = RELATIVE_POS[this.radiogroup5.selectedValue];
					if (event.target is RadioButton) {
						var newPos:Object = SingleLayer.toCocosWorld(ret.x, ret.y, this.mCurrentCell, this.mCurrentLayer);
						this.mCurrentCell.x1 = newPos.x;
						this.mCurrentCell.y1 = newPos.y;
						this.mX1.text = newPos.x;
						this.mY1.text = newPos.y;
					}
					this.mCurrentCell.s1 = int(this.mScale1.text);
					this.mCurrentCell.s2 = int(this.mScale2.text);
					this.mCurrentCell.r1 = int(this.mRotation1.text);
					this.mCurrentCell.r2 = int(this.mRotation2.text);
					this.mCurrentCell.flipx = this.mFlipX.selected?1:0;
					this.mCurrentCell.flipy = this.mFlipY.selected?1:0;
					this.mCurrentCell.xs1 = int(this.mXSpeed1.text);
					this.mCurrentCell.xs2 = int(this.mXSpeed2.text);
					this.mCurrentCell.ys1 = int(this.mYSpeed1.text);
					this.mCurrentCell.ys2 = int(this.mYSpeed2.text);
					this.mCurrentCell.ss1 = int(this.mScaleSpeed1.text);
					this.mCurrentCell.ss2 = int(this.mScaleSpeed2.text);
					this.mCurrentCell.rs1 = int(this.mRotationSpeed1.text);
					this.mCurrentCell.rs2 = int(this.mRotationSpeed2.text);
					this.mCurrentCell.num1 = int(this.mNum1.text);
					this.mCurrentCell.num2 = int(this.mNum2.text);
					this.setModified(true);
					this.mRender.updateCurrentCell();
				}
			}
			
			private function onLayerValueChanged(event:Event):void {
				this.mCurrentLayer.w = int(this.mMapWidth.text);
				this.mCurrentLayer.h = int(this.mMapHeight.text);
				this.mCurrentLayer.s = int(this.mSpeed.text);
				var i:int = int(this.mMapIndex.text);
				if (event.target == this.mMapIndex && i == 0) {                              
					Alert.show("层级0为战斗层，不可摆放装饰，请输入其他值");
					return;
				}
				else {
					this.mCurrentLayer.i = int(this.mMapIndex.text);
				}
				if (event.target == this.mMapIndex) {
					this.setLayers();
					this.setLayerProperties();
				}
				else if (event.target == this.mMapWidth || event.target == this.mMapHeight) {
					this.mRender.updateBorder();
				}
				this.setModified(true);
			}
			
			private function onCellTreeSelected(event:Event):void {
				this.setCellProperties();
				this.mRender.setCurrentCell(this.mCurrentCell);
			}
			
			private function onAttrChanged(event:Event):void {
				if (this.mCurrentCell) this.mCurrentCell.f = this.radiogroup1.selectedValue=="固定"?1:0;
				this.updateCellFixed();
				this.setModified(true);
			}
			
			private function setRender():void {
				this.mRender = new DecoLayerRender();
				this.mRender.init(this.mData, this.mCurrentLayer, this.mCurrentCell);
				this.mContainer.addElement(this.mRender);
			}
			
			public function export():Object {
				return Utils.cloneObjectData(this.mData);
			}
			
			public function setModified(bool:Boolean):void {
				this.mPanel.setTabModified(this.mName, bool);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="radiogroup1"/>
		<s:RadioButtonGroup id="radiogroup2"/>
		<s:RadioButtonGroup id="radiogroup3"/>
		<s:RadioButtonGroup id="radiogroup4"/>
		<s:RadioButtonGroup id="radiogroup5"/>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Group width="100%" height="100%">
		<s:HGroup x="0" y="0" width="100%" height="100%" gap="0">
			<s:VGroup width="150" height="100%" gap="0">
				<s:Panel width="100%" height="300" dropShadowVisible="false" title="地图图层">
					<s:Label x="11" y="5" text="背景:"/>
					<s:ComboBox id="mBgComboBox" x="48" y="1" width="100" change="onBgChanged(event)"/>
					<mx:Tree id="mLayerTree" x="0" y="25" width="100%" height="100%" borderVisible="true"
							 change="onLayerTreeSelected(event)"></mx:Tree>
				</s:Panel>
				<s:Panel width="100%" height="100%" dropShadowVisible="false" title="图层属性">
					<s:VGroup width="100%" height="100%" gap="0">
						<s:Group width="100%" height="110">
							<s:Label x="10" y="10" text="宽度:"/>
							<s:Label x="10" y="35" text="高度:"/>
							<s:Label x="10" y="60" text="速度:"/>
							<s:Label x="10" y="85" text="层级:"/>
							<s:TextInput id="mMapWidth" x="45" y="5" width="100"
										 change="onLayerValueChanged(event)" text="960"
										 textAlign="center"/>
							<s:TextInput id="mMapHeight" x="45" y="30" width="100"
										 change="onLayerValueChanged(event)" text="1280"
										 textAlign="center"/>
							<s:TextInput id="mSpeed" x="45" y="55" width="100"
										 change="onLayerValueChanged(event)" text="40"
										 textAlign="center"/>
							<s:TextInput id="mMapIndex" x="45" y="80" width="100"
										 change="onLayerValueChanged(event)"
										 toolTip="0为战斗图层（怪物），&gt;0为战斗层上，&lt;0为战斗层下" text="0"
										 textAlign="center"/>
						</s:Group>
						<mx:Tree id="mCellTree" x="0" y="128" width="100%" height="100%"
								 change="onCellTreeSelected(event)"></mx:Tree>
					</s:VGroup>
				</s:Panel>
				
			</s:VGroup>
			<s:Panel width="150" height="100%" dropShadowVisible="false" title="元素属性">
				<s:Label id="mCellName" x="46" y="10" width="100" text="灌木" textAlign="center"/>
				<s:Label id="mCellType" x="47" y="35" width="100" text="元素组合" textAlign="center"/>
				<s:Label x="11" y="10" text="名称:"/>
				<s:Label x="11" y="35" text="类型:"/>
				<s:Label x="11" y="59" text="属性:"/>
				<s:Label x="5" y="98" text="X"/>
				<s:Label x="5" y="175" text="Y"/>
				<s:Label x="0" y="264" text="缩放"/>
				<s:Label x="0" y="294" text="旋转"/>
				<s:Label x="0" y="390" width="30" text="X速度"/>
				<s:Label x="0" y="430" width="30" text="Y速度"/>
				<s:Label x="0" y="470" width="30" text="缩放速度"/>
				<s:Label x="0" y="510" width="30" text="旋转速度"/>
				<s:Label x="0" y="550" width="30" text="每屏数量"/>
				<s:HGroup x="49" y="55" horizontalAlign="left">
					<s:RadioButton label="固定" click="onAttrChanged(event)" groupName="radiogroup1"
								   selected="true"/>
					<s:RadioButton label="随机" click="onAttrChanged(event)" groupName="radiogroup1"/>
				</s:HGroup>
				<s:HGroup x="26" y="91">
					<s:TextInput id="mX1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~" id="mTilde0"/>
					<s:TextInput id="mX2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:VGroup x="26" y="115" horizontalAlign="left">
					<s:HGroup>
						<s:RadioButton label="abs" click="onValueChanged(event)" groupName="radiogroup2"
									   selected="true"/>
						<s:RadioButton label="p%" click="onValueChanged(event)" groupName="radiogroup2"/>
					</s:HGroup>
					<s:HGroup>
						<s:RadioButton label="┗" click="onValueChanged(event)" groupName="radiogroup3"
									   selected="true"/>
						<s:RadioButton label="┛" click="onValueChanged(event)" groupName="radiogroup3"/>
						<s:RadioButton visible="false" label="┏" click="onValueChanged(event)" groupName="radiogroup3"/>
						<s:RadioButton visible="false" label="┓" click="onValueChanged(event)" groupName="radiogroup3"/>
					</s:HGroup>
				</s:VGroup>
				<s:HGroup x="26" y="170">
					<s:TextInput id="mY1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~" id="mTilde1"/>
					<s:TextInput id="mY2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:VGroup x="26" y="195" horizontalAlign="left">
					<s:HGroup>
						<s:RadioButton label="abs" click="onValueChanged(event)" groupName="radiogroup4"
									   selected="true"/>
						<s:RadioButton label="p%" click="onValueChanged(event)" groupName="radiogroup4"/>
					</s:HGroup>
					<s:HGroup>
						<s:RadioButton label="┏" click="onValueChanged(event)" groupName="radiogroup5"/>
						<s:RadioButton label="┗" click="onValueChanged(event)" groupName="radiogroup5"
									   selected="true"/>
						<s:RadioButton visible="false" label="┓" click="onValueChanged(event)" groupName="radiogroup5"/>
						<s:RadioButton visible="false" label="┛" click="onValueChanged(event)" groupName="radiogroup5"/>
					</s:HGroup>
				</s:VGroup>
				<mx:HRule x="0" y="81" width="100%"/>
				<mx:HRule x="0" y="244" width="100%"/>
				<mx:HRule x="0" y="371" width="100%"/>
				<s:HGroup x="25" y="259">
					<s:TextInput id="mScale1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~" id="mTilde2"/>
					<s:TextInput id="mScale2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:HGroup x="25" y="289">
					<s:TextInput id="mRotation1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~" id="mTilde3"/>
					<s:TextInput id="mRotation2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:CheckBox id="mFlipX" x="26" y="319" label="水平翻转" click="onValueChanged(event)"/>
				<s:CheckBox id="mFlipY" x="26" y="345" label="垂直翻转" click="onValueChanged(event)"/>
				<s:HGroup x="25" y="390">
					<s:TextInput id="mXSpeed1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~" id="mTilde4"/>
					<s:TextInput id="mXSpeed2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:HGroup x="25" y="430">
					<s:TextInput id="mYSpeed1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~" id="mTilde5"/>
					<s:TextInput id="mYSpeed2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:HGroup x="25" y="470">
					<s:TextInput id="mScaleSpeed1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~" id="mTilde6"/>
					<s:TextInput id="mScaleSpeed2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:HGroup x="25" y="510">
					<s:TextInput id="mRotationSpeed1" x="0" y="0" width="50"
								 change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~" id="mTilde7"/>
					<s:TextInput id="mRotationSpeed2" x="60" y="0" width="50"
								 change="onValueChanged(event)"/>
				</s:HGroup>
				<s:HGroup x="25" y="550">
					<s:TextInput id="mNum1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~" id="mTilde8"/>
					<s:TextInput id="mNum2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
			</s:Panel>
			<s:Scroller width="100%" height="100%">
				<s:Group width="100%" height="100%">
					<s:Group id="mContainer" width="100%" height="100%">
					</s:Group>
				</s:Group>
			</s:Scroller>
		</s:HGroup>
	</s:Group>
</s:Group>
