<?xml version="1.0" encoding="utf-8"?>
<s:Scroller xmlns:fx="http://ns.adobe.com/mxml/2009" 
			xmlns:s="library://ns.adobe.com/flex/spark" 
			xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="onCreate()">
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.controls.Alert;
			import mx.controls.Menu;
			
			import spark.events.IndexChangeEvent;
			
			private var mPanel:DecoPanel;	
			
			private var mName:String;
			private var mData:Object;
			private var mCreated:Boolean = false;
			private var CLIPPING_LAYER:Object;
			private var CLIPPING_CELL:Object;
			private var mCurrentLayer:Object;
			
			private function onCreate():void {
				this.mCreated = true;
				var menu:ContextMenu = new ContextMenu();
				var item:ContextMenuItem = new ContextMenuItem("新建");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onNewLayer);
				menu.addItem(item);
				item = new ContextMenuItem("复制");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCopyLayer);
				menu.addItem(item);
				item = new ContextMenuItem("粘贴");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onPasteLayer);
				menu.addItem(item);
				item = new ContextMenuItem("删除");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onDeleteLayer);
				menu.addItem(item);
				this.mLayerTree.contextMenu = menu;
				
				menu = new ContextMenu();
				item = new ContextMenuItem("复制");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCopyCell);
				menu.addItem(item);
				item = new ContextMenuItem("粘贴");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onPasteCell);
				menu.addItem(item);
				item = new ContextMenuItem("删除");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onDeleteCell);
				menu.addItem(item);
				this.mCellTree.contextMenu = menu;
				
				if (this.mPanel) {
					this.update();
				}
			}
			
			private function onNewLayer(event:Event):void {
				var newIndex:Number = 1;
				if (this.mData.layers) {
					var max:Number = 0;
					for (var i:int = 0; i < this.mData.layers.length; i++) {
						if (this.mData.layers[i].i > max) {
							max = this.mData.layers[i].i;
						}
					}
					newIndex = max + 1;
				}
				this.mData.layers.push({w:960, h:1280, i:newIndex, s:40, cells:[{n:"baoxiang"}]});
				this.setLayers();
				this.setModified(true);
			}
			
			private function onCopyLayer(event:Event):void {
				var index:int = this.mLayerTree.selectedIndex - 1;
				if (index < 0) return;
				CLIPPING_LAYER = Utils.cloneObjectData(this.mData.layers[index]);
				trace("copied data "+JSON.stringify(CLIPPING_LAYER));
			}
			
			private function onPasteLayer(event:Event):void {
				if (!CLIPPING_LAYER) return;
				var newIndex:Number = 1;
				if (this.mData.layers) {
					var max:Number = 0;
					for (var i:int = 0; i < this.mData.layers.length; i++) {
						if (this.mData.layers[i].i > max) {
							max = this.mData.layers[i].i;
						}
					}
					newIndex = max + 1;
				}
				var data:Object = Utils.cloneObjectData(CLIPPING_LAYER);
				data.i = newIndex;
				this.mData.layers.push(data);
				this.setLayers();
				this.setModified(true);
			}
			
			private function onDeleteLayer(event:Event):void {
				var index:int = this.mLayerTree.selectedIndex - 1;
				if (index < 0) return;
				if (this.mData.layers[index].i == 0) {
					Alert.show("战斗层不可删除！");
					return;
				}
				this.mData.layers.splice(index, 1);
				this.setLayers();
				this.setModified(true);
			}
			
			private function onCopyCell(event:Event):void {
				var index:int = this.mCellTree.selectedIndex-1;
				if (index < 0) return;
				CLIPPING_CELL = Utils.cloneObjectData(this.mCurrentLayer.cells[index]);
				trace("copied data "+JSON.stringify(CLIPPING_CELL));
			}
			
			private function onPasteCell(event:Event):void {
				if (!CLIPPING_CELL) return;
				var data:Object = Utils.cloneObjectData(CLIPPING_CELL);
				this.mCurrentLayer.cells.push(data);
				this.setLayerProperties();
				this.setModified(true);
			}
			
			private function onDeleteCell(event:Event):void {
				var index:int = this.mCellTree.selectedIndex - 1;
				if (index < 0) return;
				this.mCurrentLayer.cells.splice(index, 1);
				this.setLayerProperties();
				this.setModified(true);
			}
			
			public function init(name:String, panel:DecoPanel):void {
				this.mName = name;
				this.mPanel = panel;
				if (this.mCreated) {
					this.update();
				}
			}
			
			public function update(readFromSelf:Boolean=false):void {
				if (!readFromSelf) {
					if (Data.getInstance().decoSet[this.mName]) {
						this.mData = Utils.cloneObjectData(Data.getInstance().decoSet[this.mName]);
					}
					else {
						this.mData = {};
					}
				}
				else {
					
				}
				
				this.setBg();
				this.setLayers();
				this.setLayerProperties();
			}
			
			private function setBg():void {
				var ac:ArrayCollection = new ArrayCollection();
				for (var s:String in Data.getInstance().decoBgSet) {
					ac.addItem(s);
				}
				ac.sort = new Sort();
				ac.refresh();
				this.mBgComboBox.dataProvider = ac;
				if (this.mData.bg) {
					for (var i:int = 0; i < ac.length; i++) {
						if (ac[i] == this.mData.bg) {
							this.mBgComboBox.selectedIndex = i;
							break;
						}
					}
				}
			}
			
			private function onBgChanged(event:IndexChangeEvent):void {
				this.mData.bg = this.mBgComboBox.dataProvider[event.newIndex];
				this.setModified(true);
			}
			
			private function setLayers():void {
				var list:ArrayCollection = new ArrayCollection();
				var layers:ArrayCollection = new ArrayCollection();
				list.addItem({name:this.mName, children:layers});
				if (!this.mData.layers) {
					this.mData.layers = [];
					this.mData.layers.push({w:960, h:1280, i:0, s:40, cells:[]});
				}
				for each (var l:Object in this.mData.layers) {
					layers.addItem({name:l.i==0?"BattleLayer":"layer"+l.i});
				}
				this.mLayerTree.labelField = "name";
				this.mLayerTree.dataProvider = list;
				setTimeout(this.expandLayerTree, 100);
			}
			
			private function expandLayerTree():void {
				this.mLayerTree.expandChildrenOf(this.mLayerTree.dataProvider[0], true);
			}
			
			private function onLayerTreeSelected(event:Event):void {
				this.setLayerProperties();
			}
			
			private function setLayerProperties():void {
				var index:int = this.mLayerTree.selectedIndex-1;
				if (index < 0) index = 0;
				var data:Object = this.mData.layers[index];
				this.mCurrentLayer = data;
				this.mMapWidth.text = data.w;
				this.mMapHeight.text = data.h;
				this.mSpeed.text = data.s;
				this.mMapIndex.text = data.i;
				this.mMapIndex.editable = (data.i != 0);
				
				var list:ArrayCollection = new ArrayCollection();
				var cells:ArrayCollection = new ArrayCollection();
				list.addItem({name:data.i==0?"BattleLayer":"layer"+data.i, children:cells});
				for each (var c:Object in data.cells) {
					cells.addItem({name:c.n});
				}
				this.mCellTree.labelField = "name";
				this.mCellTree.dataProvider = list;
				setTimeout(this.expandCellTree, 100);
			}
			
			private function expandCellTree():void {
				this.mCellTree.expandChildrenOf(this.mCellTree.dataProvider[0], true);
			}
			
			public function rename(to:String):void {
				this.mName = to;
			}
			
			private function onValueChanged(event:Event):void {
				
			}
			
			private function onLayerValueChanged(event:Event):void {
				this.mCurrentLayer.w = this.mMapWidth.text;
				this.mCurrentLayer.h = this.mMapHeight.text;
				this.mCurrentLayer.s = this.mSpeed.text;
				this.mCurrentLayer.i = this.mMapIndex.text;
				this.setModified(true);
			}
			
			private function onCellTreeSelected(event:Event):void {
				
			}
			
			private function onAttrChanged(event:Event):void {
				
			}
			
			public function export():Object {
				return Utils.cloneObjectData(this.mData);
			}
			
			public function setModified(bool:Boolean):void {
				this.mPanel.setTabModified(this.mName, bool);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="radiogroup1"/>
		<s:RadioButtonGroup id="radiogroup2"/>
		<s:RadioButtonGroup id="radiogroup3"/>
		<s:RadioButtonGroup id="radiogroup4"/>
		<s:RadioButtonGroup id="radiogroup5"/>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Group width="100%" height="100%">
		<s:HGroup x="0" y="0" width="100%" height="100%" gap="0">
			<s:VGroup width="150" height="100%" gap="0">
				<s:Panel width="100%" height="300" dropShadowVisible="false" title="地图图层">
					<s:Label x="11" y="5" text="背景:"/>
					<s:ComboBox id="mBgComboBox" x="48" y="1" width="100" change="onBgChanged(event)"/>
					<mx:Tree id="mLayerTree" x="0" y="25" width="100%" height="100%" borderVisible="true"
							 change="onLayerTreeSelected(event)"></mx:Tree>
				</s:Panel>
				<s:Panel width="100%" height="100%" dropShadowVisible="false" title="图层属性">
					<s:VGroup width="100%" height="100%" gap="0">
						<s:Group width="100%" height="110">
							<s:Label x="10" y="10" text="宽度:"/>
							<s:Label x="10" y="35" text="高度:"/>
							<s:Label x="10" y="60" text="速度:"/>
							<s:Label x="10" y="85" text="层级:"/>
							<s:TextInput id="mMapWidth" x="45" y="5" width="100"
										 change="onLayerValueChanged(event)" text="960"
										 textAlign="center"/>
							<s:TextInput id="mMapHeight" x="45" y="30" width="100"
										 change="onLayerValueChanged(event)" text="1280"
										 textAlign="center"/>
							<s:TextInput id="mSpeed" x="45" y="55" width="100"
										 change="onLayerValueChanged(event)" text="40"
										 textAlign="center"/>
							<s:TextInput id="mMapIndex" x="45" y="80" width="100"
										 change="onLayerValueChanged(event)"
										 toolTip="0为战斗图层（怪物），&gt;0为战斗层上，&lt;0为战斗层下" text="0"
										 textAlign="center"/>
						</s:Group>
						<mx:Tree id="mCellTree" x="0" y="128" width="100%" height="100%"
								 change="onCellTreeSelected(event)"></mx:Tree>
					</s:VGroup>
				</s:Panel>
				
			</s:VGroup>
			<s:Panel width="150" height="100%" dropShadowVisible="false" title="元素属性">
				<s:Label id="mCellName" x="46" y="10" width="100" text="灌木" textAlign="center"/>
				<s:Label id="mCellType" x="47" y="35" width="100" text="元素组合" textAlign="center"/>
				<s:Label x="11" y="10" text="名称:"/>
				<s:Label x="11" y="35" text="类型:"/>
				<s:Label x="11" y="59" text="属性:"/>
				<s:Label x="5" y="98" text="X"/>
				<s:Label x="5" y="175" text="Y"/>
				<s:Label x="0" y="264" text="缩放"/>
				<s:Label x="0" y="294" text="旋转"/>
				<s:Label x="0" y="390" width="30" text="X速度"/>
				<s:Label x="0" y="430" width="30" text="Y速度"/>
				<s:Label x="0" y="470" width="30" text="缩放速度"/>
				<s:Label x="0" y="510" width="30" text="旋转速度"/>
				<s:Label x="0" y="550" width="30" text="每屏数量"/>
				<s:HGroup x="49" y="55" horizontalAlign="left">
					<s:RadioButton label="固定" click="onAttrChanged(event)" groupName="radiogroup1"
								   selected="true"/>
					<s:RadioButton label="随机" click="onAttrChanged(event)" groupName="radiogroup1"/>
				</s:HGroup>
				<s:HGroup x="26" y="91">
					<s:TextInput id="mX1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~"/>
					<s:TextInput id="mX2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:VGroup x="26" y="115" horizontalAlign="left">
					<s:HGroup>
						<s:RadioButton label="abs" click="onValueChanged(event)" groupName="radiogroup2"
									   selected="true"/>
						<s:RadioButton label="p%" click="onValueChanged(event)" groupName="radiogroup2"/>
					</s:HGroup>
					<s:HGroup>
						<s:RadioButton label="┏" click="onValueChanged(event)" groupName="radiogroup3"/>
						<s:RadioButton label="┓" click="onValueChanged(event)" groupName="radiogroup3"/>
						<s:RadioButton label="┗" click="onValueChanged(event)" groupName="radiogroup3"
									   selected="true"/>
						<s:RadioButton label="┛" click="onValueChanged(event)" groupName="radiogroup3"/>
					</s:HGroup>
				</s:VGroup>
				<s:HGroup x="26" y="170">
					<s:TextInput id="mY1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~"/>
					<s:TextInput x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:VGroup x="26" y="195" horizontalAlign="left">
					<s:HGroup>
						<s:RadioButton label="abs" click="onValueChanged(event)" groupName="radiogroup4"
									   selected="true"/>
						<s:RadioButton label="p%" click="onValueChanged(event)" groupName="radiogroup4"/>
					</s:HGroup>
					<s:HGroup>
						<s:RadioButton label="┏" click="onValueChanged(event)" groupName="radiogroup5"/>
						<s:RadioButton label="┓" click="onValueChanged(event)" groupName="radiogroup5"/>
						<s:RadioButton label="┗" click="onValueChanged(event)" groupName="radiogroup5"
									   selected="true"/>
						<s:RadioButton label="┛" click="onValueChanged(event)" groupName="radiogroup5"/>
					</s:HGroup>
				</s:VGroup>
				<mx:HRule x="0" y="81" width="100%"/>
				<mx:HRule x="0" y="244" width="100%"/>
				<mx:HRule x="0" y="371" width="100%"/>
				<s:HGroup x="25" y="259">
					<s:TextInput id="mScale1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~"/>
					<s:TextInput id="mScale2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:HGroup x="25" y="289">
					<s:TextInput id="mRotation1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~"/>
					<s:TextInput id="mRotation2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:CheckBox id="mFlipX" x="26" y="319" label="水平翻转" click="onValueChanged(event)"/>
				<s:CheckBox id="mFlipY" x="26" y="345" label="垂直翻转" click="onValueChanged(event)"/>
				<s:HGroup x="25" y="390">
					<s:TextInput id="mXSpeed1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~"/>
					<s:TextInput id="mXSpeed2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:HGroup x="25" y="430">
					<s:TextInput id="mYSpeed1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~"/>
					<s:TextInput id="mYSpeed2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:HGroup x="25" y="470">
					<s:TextInput id="mScaleSpeed1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~"/>
					<s:TextInput id="mScaleSpeed2" x="60" y="0" width="50" change="onValueChanged(event)"/>
				</s:HGroup>
				<s:HGroup x="25" y="510">
					<s:TextInput id="mRotationSpeed1" x="0" y="0" width="50"
								 change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~"/>
					<s:TextInput id="mRotationSpeed2" x="60" y="0" width="50"
								 change="onValueChanged(event)"/>
				</s:HGroup>
				<s:HGroup x="25" y="550">
					<s:TextInput id="mNum1" x="0" y="0" width="50" change="onValueChanged(event)"/>
					<s:Label x="55" y="0" text="~"/>
				</s:HGroup>
			</s:Panel>
			<s:Scroller width="100%" height="100%">
				<s:Group width="100%" height="100%">
					<s:Group id="mContainer" width="100%" height="100%">
					</s:Group>
				</s:Group>
			</s:Scroller>
		</s:HGroup>
	</s:Group>
</s:Scroller>
