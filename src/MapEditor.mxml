<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" width="1155" height="800"
					   horizontalCenter="0" creationComplete="init()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.controls.Tree;
			import mx.events.ResizeEvent;
			
			import spark.components.Group;
			import spark.components.VScrollBar;
			
			import bgedit.BgEditView;
			import bgedit.BgModel;
			
			import excel.SkillConfigReader;
			
			import manager.SyncManager;
			
			// ---------------------------------------------------------
			
			////// entrance
			private static var gMapEditorInstance:MapEditor = null;
			public 	static function getInstance():MapEditor { return gMapEditorInstance; }

			private var _log:String = "";
	
			private var mVIEWFormation:FormationSelector = null;
			private var mVIEWMonster:MonsterSelector = null;
			private var mVIEWScene:MainScene = null;
			
			private var _bgEditView:BgEditView;
			
			// setup during launch of app
			private function init():void
			{
				gMapEditorInstance = this;
				var self:MapEditor = this;
				
				// address project path
				var mask:* = Utils.makeManualPanel("正在初始化数据（需要联网）…", this);
				Data.getInstance().init(function():void
				{
					Utils.releaseManualPanel( mask );
					self.onDataReady();	
				});
					
				BgModel.getInstance().init();
			
				this.addEventListener(ResizeEvent.RESIZE, onResize);
//				this.addEventListener(MouseEvent.CLICK, function(e:*):void{
//					self.stage.focus = self.mVIEWScene; 
//				});
				this.addEventListener(MouseEvent.RIGHT_CLICK, onRightClick);
			}
		
			private function onResize(e:ResizeEvent):void
			{
				//if( this.mVIEWScene)
					//this.mVIEWScene.onResize(e);
			}
			
			private function onRightClick(e:MouseEvent):void
			{
				this.stage.focus = this.mVIEWScene;
				Runtime.getInstance().selectedComponentType = null;
				Runtime.getInstance().selectedFormationType = null;
				//this.mVIEWScene.onCancelSelect();
			}

			private function onDataReady(e:Event=null):void
			{	
				// update level tree view;
				with( this.mLevelTree ) {
					visible = true; 
					selectedIndex = 0;
					dataProvider = Data.getInstance().levelXML;
				}
				
				this.mLevelTree.mouseFocusEnabled = false;
				this.mLevelTree.focusEnabled = false;
			
				{
					this.mVIEWScene = new MainScene();	
					this.mSceneArea.addElement( this.mVIEWScene );
					this.mVIEWScene.init();
					this.mVIEWScene.mouseFocusEnabled = true;
				}

				{
					var formationPanel:Panel = new Panel();
					with( formationPanel ) {
						percentHeight = 40; percentWidth = 100; title = "阵型";
					}
					formationPanel.setStyle("dropShadowVisible", false);
					
					var hgroup:HGroup = new HGroup();
					with( hgroup ) {
						percentWidth = 100; percentHeight = 100; horizontalAlign = "left";
					}
					
					var group:Group = new Group();
					with( group ) {
						percentWidth = 100; percentHeight = 100; clipAndEnableScrolling = true;
					}
	
					var vscrollbar:VScrollBar = new VScrollBar();
					with( vscrollbar ) {
						percentHeight = 100;
					}
					vscrollbar.viewport = group;
					
					this.mVIEWFormation = new FormationSelector;
					with( this.mVIEWFormation ) { percentWidth = 100; }
				
					group.addElement( this.mVIEWFormation );
					hgroup.addElement(group);
					hgroup.addElement(vscrollbar);
					
					formationPanel.addElement( hgroup );
				}	

				{
					var monsterPanel:Panel = new Panel();
					with( monsterPanel ) {
						percentHeight = 60; percentWidth = 100; title = "资源";
					}
					monsterPanel.setStyle("dropShadowVisible", false);
					
					hgroup = new HGroup();
					with( hgroup ) {
						percentWidth = 100; percentHeight = 100; horizontalAlign = "left";
					}

					group = new Group();
					with( group ) {
						percentWidth = 100; percentHeight = 100; clipAndEnableScrolling = true;
					}
					
					vscrollbar = new VScrollBar();
					with( vscrollbar ) {
						percentHeight = 100;
					}
					vscrollbar.viewport = group;
					
					this.mVIEWMonster = new MonsterSelector;
					with( this.mVIEWMonster ) {
						percentWidth = percentHeight = 100;
					}

					group.addElement( this.mVIEWMonster );
					hgroup.addElement( group );
					hgroup.addElement( vscrollbar );
					
					monsterPanel.addElement( hgroup );
				}
				
				this.setCurrLevel( Data.getInstance().getFirstLevelId() );
				
				var leftVGroup:VGroup = new VGroup();
				with( leftVGroup ) {
					percentHeight = percentWidth = 100;
					verticalAlign = "top"; horizontalAlign = "center";
				}
				leftVGroup.addElement(formationPanel);
				leftVGroup.addElement(monsterPanel);
				
				this.mSelectorArea.addElement(leftVGroup);
			}

			public function onItemClick(event:Event):void
			{
				var item:XML = this.mLevelTree.selectedItem as XML;
				if(item.name() == "level")
					setCurrLevel(item.@level_id);
				else {
					this.mLevelTree.expandItem(
						this.mLevelTree.selectedItem, 
						!this.mLevelTree.isItemOpen(this.mLevelTree.selectedItem)
					);
				}
			}
			
			private function setCurrLevel( lid:String ):void
			{
				this.mVIEWScene.reset( lid );
				this.mVIEWMonster.reset( lid );
				Runtime.getInstance().currentLevelID = lid;
			}
			
			private function saveLevel(e:Event):void
			{
				this.mVIEWScene.save();
			}
			
			private function sendToStaticServer(e:Event):void
			{
				if(mLevelTree.selectedIndex == -1)
				{
					Alert.show("上传前请先选择关卡！");
					return;
				}
		
				var mask:* = Utils.makeManualPanel("上传关卡中，请稍后…", this);
				var export:File = Data.getInstance().resolvePath("export/");
				SyncManager.getInstance().uploadLevelsToOSS( 
					(this.mLevelTree.selectedItem as XML).@level_id,  
					function(msg:String):void
					{
						Utils.releaseManualPanel( mask );
						Alert.show(msg);
					});
			}
			
			private function parseSkillConfigFile(e:Event):void
			{
				var browser:File = new File(Data.getInstance().conf.skillPathCache);
				browser.browseForOpen("请选择上传的技能配置文件(.xlsx)");
				
				var self:* = this;
				browser.addEventListener(Event.SELECT, function (e:Event):void 
				{
					var file:File = e.target as File;
					Data.getInstance().setEditorConfig("skillPathCache", file.nativePath);
					
					var mask:* = Utils.makeManualPanel("解析技能配置中，请稍后…", self);	
					SkillConfigReader.parseSkillConfigFromPath(file.nativePath, 
						function(skillDict:*):void
						{
							var jsonOut:String = JSON.stringify(skillDict, null, "\t");

							var saved:File = Data.getInstance().resolvePath("config/skill.json");
							Utils.WriteRawFile( saved, jsonOut );
							
							SyncManager.getInstance().uploadConfigFileToOSSFromPath(
								saved.nativePath, 
								function(t:String):void 
								{
									Utils.releaseManualPanel( mask );
									Alert.show( t );
								}
							);
						}
					);
				});
			}
			
			private function uploadConfigFile(e:Event):void
			{
				var self:* = this;
				var browser:File = new File(Data.getInstance().conf.sendPathCache);
				browser.browseForOpen("请选择上传的配置文件");
				browser.addEventListener(Event.SELECT, function (e:Event):void {
					
					var file:File = e.target as File;
					Data.getInstance().setEditorConfig("sendPathCache", file.nativePath);
					
					var mask:* = Utils.makeManualPanel("正在上传配置文件…", self);
					file.addEventListener(Event.COMPLETE, function(e:Event):void {
						
						SyncManager.getInstance().uploadConfigFileToOSS( file,
							function(t:String):void 
							{
								Utils.releaseManualPanel( mask );
								Alert.show( t );
							}
						);
						
					});
					file.load();
				});
			}
			
			private function parseExcel(e:Event):void
			{
				var self:* = this;
				var browser:File = new File(Data.getInstance().conf.profilePathCache);
				browser.browseForOpen("请选择上传的场景文件");
				browser.addEventListener(Event.SELECT, function (e:Event):void {
					
					var file:File = e.target as File;
					Data.getInstance().setEditorConfig("profilePathCache", file.nativePath);
					
					var mask:* = Utils.makeManualPanel("正在上传配置文件…", self);
					file.addEventListener(Event.COMPLETE, function(e:Event):void {
						Data.getInstance().mergeLevelProfile( file, 
							function(t:String):void
							{
								Utils.releaseManualPanel( mask );
								Alert.show( t );
							}
						);
					});
					file.load();
				});
			}
			
			private function setPathRoot(e:Event):void 
			{
				Data.getInstance().setProjectPath(function(msg:String):void
				{
					Alert.show(msg);
				});
			}
			
			public function addLog(content:String):void {
				_log = _log+(_log==""?"":"\n")+content;
				var logFile:File = File.desktopDirectory.resolvePath("editor/log.txt");
				var fileStream:FileStream = new FileStream();
				fileStream.open(logFile, FileMode.WRITE);
				fileStream.writeUTFBytes(_log);
				fileStream.close();
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle" horizontalAlign="center"/>
	</s:layout>
	<s:VGroup height="100%" width="100%" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
		<s:HGroup id="toolbar" width="100%" verticalAlign="middle" horizontalAlign="left">
			
			<s:HGroup height="100%" width="100%" verticalAlign="top" horizontalAlign="left">
				<s:Button id="saveLevelBtn" label="保存关卡" click="saveLevel(event)"/>
				<s:Button id="sendBtn2" label="关卡上传" click="sendToStaticServer(event)"/>
			</s:HGroup>
			
			<s:HGroup height="100%" width="100%" verticalAlign="top" horizontalAlign="right">
				<s:Label text="编辑器" color="0x777777"/>	
				<s:Button id="set_project_path" label="重设路径" click="setPathRoot(event)"/>
				<s:Label text="配置项目" color="0x777777"/>	
				<s:Button id="parse_excel" label="场景文件" click="parseExcel(event)"/>
				<s:Button id="config" label="JSON配置" click="uploadConfigFile(event)"/>
				<s:Button id="configSkill" label="技能配置" click="parseSkillConfigFile(event)"/>
			</s:HGroup>
			
		</s:HGroup>
		
		<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="left">
			<s:Panel title="关卡列表" dropShadowVisible="false" width="200" height="100%">
				<mx:Tree id="mLevelTree" visible="false" showRoot="false" width="100%" height="100%" borderVisible="false" itemClick="onItemClick(event);" labelField="@label">
				</mx:Tree>
			</s:Panel>
			
			<s:BorderContainer id="mSceneArea" height="100%" width="100%">
			</s:BorderContainer>
		</s:HGroup>
	</s:VGroup>
	
	<s:VGroup height="100%" width="280" verticalAlign="top" horizontalAlign="right" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
		<s:BorderContainer id="mSelectorArea" height="100%" width="100%" dropShadowVisible="false" borderVisible="false">
		</s:BorderContainer>
	</s:VGroup>
		
</s:WindowedApplication>