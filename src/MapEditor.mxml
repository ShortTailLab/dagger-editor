<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   creationComplete="init()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.hurlant.crypto.symmetric.NullPad;
			
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.Tree;
			import mx.managers.PopUpManager;
			
			import spark.components.Group;
			import spark.components.VScrollBar;
			
			import bgedit.BgEditView;
			import bgedit.BgModel;
			
			import formationEdit.FormationsView;
			
			import manager.SyncManager;
			
			public var fView:FormationsView = null;
			public var matsView:MonsterSelector = null;
			
			private function init():void
			{
				_instance = this;
				
				// address project path
				
				var mask:* = this.MakeMask("正在初始化数据（需要联网）…");
				Data.getInstance().init(function()
				{
					_instance.ReleaseMask( mask );
					_instance.onDataReady();	
				});
					
				BgModel.getInstance().init();
				
				this.addEventListener(MouseEvent.RIGHT_CLICK, onRightClick);
			}
			
			private function onRightClick(e:MouseEvent)
			{
//				matsView.clearSelection();
			}

			private function onDataReady(e:Event=null):void
			{
				{
					// update level tree view;
					levelTree.visible = true;
					levelTree.dataProvider = Data.getInstance().levelXML;
					levelTree.selectedIndex = 0;
				}
			
				{
					// edit view
					_enemyEditView = new EditView(this, middleArea);	
					middleArea.addElement(_enemyEditView);
				}

				{
					var modelView:Panel = new Panel();
					modelView.percentHeight = 40;
					modelView.percentWidth = 100;
					modelView.title = "阵型";
					modelView.setStyle("dropShadowVisible", false);
					
					var hgroup:HGroup = new HGroup();
					hgroup.percentWidth = 100;
					hgroup.percentHeight = 100;
					hgroup.horizontalAlign = "left";
					modelView.addElement(hgroup);
					
					var group:Group = new Group();
					group.clipAndEnableScrolling = true;
					group.percentWidth = 100;
					group.percentHeight = 100;
					hgroup.addElement(group);
	
					var vscrollbar:VScrollBar = new VScrollBar();
					vscrollbar.percentHeight = 100;
					vscrollbar.viewport = group;
					hgroup.addElement(vscrollbar);
					
					fView = new FormationsView;
					fView.percentWidth = 100;
					group.addElement(fView);
				}

				{
					var matsPanel:Panel = new Panel();
					matsPanel.title = "资源";
					matsPanel.percentHeight = 60;
					matsPanel.percentWidth = 100;
					matsPanel.setStyle("dropShadowVisible", false);
					
					hgroup = new HGroup();
					hgroup.percentWidth = 100;
					hgroup.percentHeight = 100;
					hgroup.horizontalAlign = "left";
					matsPanel.addElement(hgroup);

					group = new Group();
					group.clipAndEnableScrolling = true;
					group.percentWidth = 100;
					group.percentHeight = 100;
					hgroup.addElement(group);
					
					vscrollbar = new VScrollBar();
					vscrollbar.percentHeight = 100;
					vscrollbar.viewport = group;
					hgroup.addElement(vscrollbar);
					
					matsView = new MonsterSelector;
					matsView.percentWidth = 100;
					matsView.percentHeight = 100;

					group.addElement(matsView);
				}
				
				this.setCurrLevel( Data.getInstance().getFirstLevelId() );

				_enemyEditVGroup = new VGroup();
				_enemyEditVGroup.percentHeight = 100;
				_enemyEditVGroup.percentWidth = 100;
				_enemyEditVGroup.verticalAlign = "top";
				_enemyEditVGroup.horizontalAlign = "center";
				_enemyEditVGroup.addElement(modelView);
				_enemyEditVGroup.addElement(matsPanel);
				
				rightArea.addElement(_enemyEditVGroup);
			}

			public function onItemClick(event:Event):void
			{
				var tree:Tree = event.currentTarget as Tree;
				var item:XML = tree.selectedItem as XML;
				if(item.name() == "level")
				{
					// leaf node, set current level
					setCurrLevel(item.@level_id);
				}
				else
				{
					// expand/collapse node
					tree.expandItem(tree.selectedItem, !tree.isItemOpen(tree.selectedItem));
				}
			}
			
			private function MakeMask(msg:String):TitleWindow 
			{
				var mask:TitleWindow = new TitleWindow();
				with( mask ) {
					width = 300; height = 50;
					showCloseButton = false; title = msg;
				}
				
				PopUpManager.addPopUp( mask, this, true );
				PopUpManager.centerPopUp( mask );
				return mask;
			}
			
			private function ReleaseMask(mask:TitleWindow):void
			{
				PopUpManager.removePopUp( mask );
			}
			
			private function setCurrLevel(lid:String):void
			{
				_enemyEditView.init(lid);
				matsView.reset( lid );
			}
			
			private function sendToStaticServer(e:Event):void
			{
				if(levelTree.selectedIndex == -1)
				{
					Alert.show("上传前请先选择关卡！");
					return;
				}
		
				var self:* = this;
				var mask:* = this.MakeMask("上传关卡中，请稍后…");
				var export:File = File.desktopDirectory.resolvePath("editor/export/");
				SyncManager.getInstance().uploadLevelsToOSS( export, "dagger-levels",  
					function(msg:String):void
					{
						self.ReleaseMask( mask );
						Alert.show(msg);
					});
			}
			
			private function syncServer(e:Event):void
			{
				var dataList:Array = Data.getInstance().getLevelDataForServer();
				SyncManager.getInstance().uploadLevelsToGameServer(dataList);
			}
			
			private function uploadConfigFile(e:Event):void
			{
				var self:* = this;
				var browser:File = new File(Data.getInstance().conf.sendPathCache);
				browser.browseForOpen("请选择上传的配置文件");
				browser.addEventListener(Event.SELECT, function (e:Event):void {
					
					var file:File = e.target as File;
					Data.getInstance().setEditorConfig("sendPathCache", file.nativePath);
					
					var mask:* = self.MakeMask("正在上传配置文件…");
					file.addEventListener(Event.COMPLETE, function(e:Event):void {
						
						SyncManager.getInstance().uploadConfigFileToOSS( file,
							function(t:String):void 
							{
								self.ReleaseMask( mask );
								Alert.show( t );
							}
						);
						
					});
					file.load();
				});
			}
			
			private function parseExcel(e:Event):void
			{
				var self:* = this;
				var browser:File = new File(Data.getInstance().conf.profilePathCache);
				browser.browseForOpen("请选择上传的场景文件");
				browser.addEventListener(Event.SELECT, function (e:Event):void {
					
					var file:File = e.target as File;
					Data.getInstance().setEditorConfig("profilePathCache", file.nativePath);
					
					var mask:* = self.MakeMask("正在上传配置文件…");
			
					file.addEventListener(Event.COMPLETE, function(e:Event):void {
						Data.getInstance().mergeLevelProfile( file, 
							function(t:String):void
							{
								self.ReleaseMask( mask );
								Alert.show( t );
							}
						);
					});
					file.load();
				});
			}
			
			public function addLog(content:String):void {
				_log = _log+(_log==""?"":"\n")+content;
				var logFile:File = File.desktopDirectory.resolvePath("editor/log.txt");
				var fileStream:FileStream = new FileStream();
				fileStream.open(logFile, FileMode.WRITE);
				fileStream.writeUTFBytes(_log);
				fileStream.close();
			}
			
			public static function getInstance():MapEditor { return _instance; }
			
			private static var _instance:MapEditor;
			private var _log:String = "";
			
			private var _enemyEditView:EditView;
			private var _enemyEditVGroup:VGroup;
			
			private var _bgEditView:BgEditView;
		]]>
	</fx:Script>
	
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle" horizontalAlign="center"/>
	</s:layout>
	<s:VGroup height="100%" width="100%" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
		<s:HGroup id="toolbar" width="100%" verticalAlign="middle" horizontalAlign="left">
			
			<s:HGroup height="100%" width="100%" verticalAlign="top" horizontalAlign="left">
				<s:Button id="sendBtn2" label="关卡上传" click="sendToStaticServer(event)"/>
			</s:HGroup>
			
			<s:HGroup height="100%" width="100%" verticalAlign="top" horizontalAlign="right">
				<s:Label text="编辑器" color="0x777777"/>	
				<s:Button id="parse_excel" label="场景文件" click="parseExcel(event)"/>
				<s:Button id="config" label="配置文件" click="uploadConfigFile(event)"/>
				<s:Button id="levels_to_game_server" label="关卡同步" click="syncServer(event)"/>
			</s:HGroup>
			
		</s:HGroup>
		
		<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="left">
			<s:Panel title="关卡列表" dropShadowVisible="false" width="200" height="100%">
				<mx:Tree id="levelTree" visible="false" showRoot="false" width="100%" height="100%" borderVisible="false" itemClick="onItemClick(event);" labelField="@label">
				</mx:Tree>
			</s:Panel>
			
			<s:BorderContainer height="100%" width="100%">
				<mx:Canvas id="middleArea" height="100%" width="100%" clipContent="true">
				</mx:Canvas>
			</s:BorderContainer>
		</s:HGroup>
	</s:VGroup>
	
	<s:VGroup height="100%" width="280" verticalAlign="top" horizontalAlign="right" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
		<s:BorderContainer id="rightArea" height="100%" width="100%" dropShadowVisible="false" borderVisible="false">
		</s:BorderContainer>
	</s:VGroup>
		
</s:WindowedApplication>