<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   creationComplete="init()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Tree;
			
			import spark.components.Group;
			import spark.components.VScrollBar;
			
			import bgedit.BgEditView;
			import bgedit.BgModel;
			
			import formationEdit.FormationsView;
			
			import manager.EventManager;
			import manager.EventType;
			import manager.GameEvent;
			import manager.SyncManager;
			
			import mapEdit.EditMapControl;
			
			public var fView:FormationsView = null;
			public var matsView:MatsView = null;
			
			private function init():void
			{
				_instance = this;
				
				Data.getInstance().addEventListener(Event.COMPLETE, onDataReady);
				Data.getInstance().init();
				
				EventManager.getInstance().addEventListener(EventType.INIT_BG_DATA_COMPLETE, onBgDataInit);
				BgModel.getInstance().init();
				
				this.addEventListener(Event.ADDED_TO_STAGE, onAddToStage);
				this.addEventListener(MouseEvent.RIGHT_CLICK, onRightClick);				
			}
			
			private function onRightClick(e:MouseEvent)
			{
				matsView.clearSelection();
			}
			
			private function onAddToStage(e:Event):void
			{
				stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
			} 
			private function onKeyDown(e:KeyboardEvent):void
			{
				var code = e.keyCode;
				if(code == Keyboard.S && e.ctrlKey)
					saveFile(null);
			}
			
			private function onDataReady(e:Event):void
			{
				// update level tree view;
				{
					levelTree.visible = true;
					levelTree.selectedIndex = 0;
					levelTree.dataProvider = Data.getInstance().level_xml;
					levelTree.labelField = "@label";
					levelTree.addEventListener(MouseEvent.CLICK, onLevelClick);
				}
				
				_enemyEditView = new EditView(this, middleArea);
				_enemyEditView.init(Data.getInstance().level_list[0]);
				
				{
					var modelView:Panel = new Panel();
					modelView.percentHeight = 40;
					modelView.percentWidth = 100;
					modelView.title = "阵型";
					modelView.setStyle("dropShadowVisible", false);
					
					var hgroup:HGroup = new HGroup();
					hgroup.percentWidth = 100;
					hgroup.percentHeight = 100;
					hgroup.horizontalAlign = "left";
					modelView.addElement(hgroup);
					
					var group:Group = new Group();
					group.clipAndEnableScrolling = true;
					group.percentWidth = 100;
					group.percentHeight = 100;
					hgroup.addElement(group);
	
					var vscrollbar:VScrollBar = new VScrollBar();
					vscrollbar.percentHeight = 100;
					vscrollbar.viewport = group;
					hgroup.addElement(vscrollbar);
					
					fView = new FormationsView;
					fView.percentWidth = 100;
					group.addElement(fView);
				}
				
				{
					var matsPanel:Panel = new Panel();
					matsPanel.title = "资源";
					matsPanel.percentHeight = 60;
					matsPanel.percentWidth = 100;
					matsPanel.setStyle("dropShadowVisible", false);
					
					hgroup = new HGroup();
					hgroup.percentWidth = 100;
					hgroup.percentHeight = 100;
					hgroup.horizontalAlign = "left";
					matsPanel.addElement(hgroup);

					group = new Group();
					group.clipAndEnableScrolling = true;
					group.percentWidth = 100;
					group.percentHeight = 100;
					hgroup.addElement(group);
					
					vscrollbar = new VScrollBar();
					vscrollbar.percentHeight = 100;
					vscrollbar.viewport = group;
					hgroup.addElement(vscrollbar);
					
					matsView = new MatsView;
					matsView.percentWidth = 100;
					matsView.percentHeight = 100;
					group.addElement(matsView);
				}

				_enemyEditVGroup = new VGroup();
				_enemyEditVGroup.percentHeight = 100;
				_enemyEditVGroup.percentWidth = 100;
				_enemyEditVGroup.verticalAlign = "top";
				_enemyEditVGroup.horizontalAlign = "center";
				_enemyEditVGroup.addElement(modelView);
				_enemyEditVGroup.addElement(matsPanel);
				
				//changeEditType(0);
				
				middleArea.addElement(_enemyEditView);
				rightArea.addElement(_enemyEditVGroup);
			}
			
			/*
			public function changeEditType( type:int ):void {
				//accordion.selectedIndex = type;
				middleArea.removeAllElements();
				rightArea.removeAllElements();
				if (type == 0) {
					middleArea.addElement(_enemyEditView);
					rightArea.addElement(_enemyEditVGroup);
				}
				else {
					middleArea.addElement(_bgEditView);
				}
			}*/
			
			private function onBgDataInit(event:GameEvent):void 
			{
				/*
				EventManager.getInstance().removeEventListener(EventType.INIT_BG_DATA_COMPLETE, onBgDataInit);
				
				var pathList:Array = File.desktopDirectory.resolvePath("editor").getDirectoryListing();
				var resultList:ArrayCollection = new ArrayCollection;
				for (var i:uint = 0; i < pathList.length; i++) 
				{
					var splitStr:String = Capabilities.os.substring(0, 3) == "Mac" ? "/" : "\\";
					var path:String = String(pathList[i].nativePath).split(splitStr).pop();
					if(path.split(".").pop() == "tmx")
						resultList.addItem(path);
				}
				bgList.dataProvider = resultList;
				bgList.setVisible(true);
				bgList.addEventListener(MouseEvent.CLICK, onTMXClick);
				*/
			}
			
			private function onLevelClick(e:Event):void{
				setCurrLevel(levelTree.selectedIndex);
			}	
			
			private function setCurrLevel(index:int):void
			{
				levelTree.selectedIndex = index;
				var list:Array = Data.getInstance().level_list;
				Data.getInstance().currSelectedLevel = list[index];
				_enemyEditView.init(list[index]);
				
				var data:Object = Data.getInstance().getCurrentLevelEnemyProfile();
				matsView.refreshDataAndView(data);
			}
			
			private function onTMXClick(e:MouseEvent):void
			{
				/*
				var file:File = File.desktopDirectory.resolvePath("editor/"+List(e.currentTarget).selectedItem);
				EditMapControl.getInstance().setMapTMX(file);
				_enemyEditView.switchMap();
				 */
			}
					
			private function saveFile(event:Event):void
			{
				_enemyEditView.save();
				if( Data.getInstance().saveLocal() && Data.getInstance().exportJS() )
				{
					Alert.show("成功导出数据");
				}
			}
			
			private function openBgFile(event:Event):void {
				var browseForOpenFile:File = File.desktopDirectory;
				var tip:String = "请选择背景地图文件(.tmx)";
				var filter:FileFilter = new FileFilter("Tiled Map File","*.tmx");
				browseForOpenFile.browseForOpen(tip, [filter]);
				browseForOpenFile.addEventListener(Event.SELECT, function (e:Event):void {
					var file:File = e.target as File;
					EditMapControl.getInstance().setMapTMX(file);
					_enemyEditView.switchMap();
				});
			}
			
			private function openFileToSend(e:Event):void
			{
				var browseForOpenFile:File = new File(Data.getInstance().conf.sndFileCashe);
				
				var tip:String = "请选择上传的文件";
				browseForOpenFile.browseForOpen(tip);
				browseForOpenFile.addEventListener(Event.SELECT, function (e:Event):void {
					var file:File = e.target as File;
					Data.getInstance().conf.sndFileCashe = file.nativePath;
					Data.getInstance().saveConf();
					SyncManager.getInstance().uploadFileToServerPath(file, sendPath.text, tagInput.text);
				});
			}
			
			var process:NativeProcess;
			private function sendToStaticServer(e:Event):void
			{
				if(levelTree.selectedIndex == -1)
				{
					Alert.show("上传前请先选择关卡！");
					return;
				}
				
				saveFile(null);
				if (SyncManager.getInstance().uploadFilesToServer(File.desktopDirectory.resolvePath("editor/export"), tagInput.text)) {
//					Alert.show("上传成功！");
				}
				else {
					Alert.show("上传失败！"); 
				}
			}
			
			private function syncServer(e:Event):void
			{
				var dataList:Array = Data.getInstance().getLevelDataForServer();
				//Utils.dumpObject(dataList);
				SyncManager.getInstance().uploadLevelsToServer(dataList);
			}
			
			private function onAccordionClick(e:Event):void 
			{
				//changeEditType((e.currentTarget as Accordion).selectedIndex);
			}
			
			public function addLog(content:String):void {
				_log = _log+(_log==""?"":"\n")+content;
				var logFile:File = File.desktopDirectory.resolvePath("editor/log.txt");
				var fileStream:FileStream = new FileStream();
				fileStream.open(logFile, FileMode.WRITE);
				fileStream.writeUTFBytes(_log);
				fileStream.close();
			}
			
			public static function getInstance():MapEditor { return _instance; }
			
			private static var _instance:MapEditor;
			private var _log:String = "";
			
			private var _enemyEditView:EditView;
			private var _enemyEditVGroup:VGroup;
			
			private var _bgEditView:BgEditView;
		]]>
	</fx:Script>
	
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle" horizontalAlign="center"/>
	</s:layout>
	<s:VGroup height="100%" width="100%" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
		<s:HGroup id="toolbar" width="100%" verticalAlign="middle" horizontalAlign="left">
				<s:Button id="sendBtn" label="关卡同步" click="syncServer(event)"/>
				<s:Button id="saveBtn" label="保存关卡配置" click="saveFile(event)"/>
				<s:Button id="openBgBtn" label="添加背景地图" click="openBgFile(event)"/>
				<s:Button id="sendBtn2" label="关卡上传" click="sendToStaticServer(event)"/>
				<s:Label text="服务器Tag" color="0x777777"/>
				<s:TextInput id="tagInput" width="100" text="zwf"/>
				<s:Button id="sendBtn3" label="文件上传" click="openFileToSend(event)"/>
				<s:Label text="上传目录" color="0x777777"/>
				<s:TextInput id="sendPath" width="100" text="config"/>
		</s:HGroup>
		
		<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="left">
			<s:Panel title="关卡列表" dropShadowVisible="false" width="200" height="100%">
				<mx:Tree id="levelTree" visible="false" showRoot="false" width="100%" height="100%" borderVisible="false">
				</mx:Tree>
			</s:Panel>
			
			<s:BorderContainer height="100%" width="100%">
				<mx:Canvas id="middleArea" height="100%" width="100%" clipContent="true">
				</mx:Canvas>
			</s:BorderContainer>
		</s:HGroup>
	</s:VGroup>
	
	<s:VGroup height="100%" width="280" verticalAlign="top" horizontalAlign="right" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
		<s:BorderContainer id="rightArea" height="100%" width="100%" dropShadowVisible="false" borderVisible="false">
		</s:BorderContainer>
	</s:VGroup>
		
</s:WindowedApplication>