<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:ns1="*"
					   width="1155" height="800" creationComplete="init()" horizontalCenter="0">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import DecoEdit.DecoPanel;
			
			import bgedit.BgEditView;
			import bgedit.BgModel;
			
			import excel.ExchangeManager;
			import excel.SkillConfigReader;
			
			import manager.EventManager;
			import manager.EventType;
			import manager.SyncManager;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Tree;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.Group;
			import spark.components.VScrollBar;
			
			// ---------------------------------------------------------
			
			////// entrance
			private static var gMapEditorInstance:MapEditor = null;
			public 	static function getInstance():MapEditor { return gMapEditorInstance; }

			private var _log:String = "";
			
			protected var mStatusTimer:Timer = null;
			// setup during launch of app
			private function init():void
			{
				gMapEditorInstance = this;
				var self:MapEditor = this;
				
				// address project path
				var mask:* = Utils.makeManualPanel("正在初始化数据（需要联网）…", this);
				Data.getInstance().init(function():void
				{
					Utils.releaseManualPanel( mask );
					self.onDataReady();	
				});

				BgModel.getInstance().init();
				this.addEventListener(MouseEvent.RIGHT_CLICK, onRightClick);
				
				Runtime.getInstance().addEventListener(Runtime.CURRENT_LEVEL_CHANGE,
					function( evt:Event ):void {
						self.onRightClick();	//cancel everything
					}
				);
				
				Runtime.getInstance().addEventListener(Runtime.PROFLE_DATA_CHANGE,
					function( evt:Event ):void {
						self.onRightClick();	
					}
				);
				
				this.statusText.showTruncationTip = true;
				this.statusText.setStyle("color",0x5555FF);
				this.statusText.setStyle("fontSize", 15);
				this.statusText.setStyle("fontWeight", "bold" );
				
				this.mStatusTimer = new Timer( 50 );
				this.mStatusTimer.addEventListener(TimerEvent.TIMER, function(evt:TimerEvent):void
				{
					if( self.statusText.alpha > 0.5 ) 
						self.statusText.alpha -= 0.025;
					else self.statusText.alpha -= 0.05;
				});
				this.mStatusTimer.start();
			}
			
			public function writeToStatusBar(str:String):void
			{
				this.statusText.text = str;
				this.statusText.alpha = 1;
			}
			
			protected function onKeyboardAction(event:KeyboardEvent):void
			{
				event.stopImmediatePropagation();
				event.preventDefault();
			}
			
			private function onRightClick(e:MouseEvent=null):void
			{
				this.stage.focus = this.mMainScene;
				this.mMainScene.onRightClick();
				Runtime.getInstance().selectedComponentType = null;
				Runtime.getInstance().selectedFormationType = null;
				Runtime.getInstance().onCancelSelection();
			}

			private function onDataReady(e:Event=null):void
			{	
				var decoList:ArrayCollection = new ArrayCollection();
				for (var deco:String in Data.getInstance().decoSet) {
					decoList.addItem(deco);
				}
				this.mDeco.dataProvider = decoList;

				
				this.mEditLevel.refresh();
				
				this.mMainScene.init();
				this.mMainScene.mouseFocusEnabled = true;
				
				this.mEditMonster.init();
				
				this.mExportChapterToExcel.addEventListener(
					MouseEvent.CLICK, this.exportToExcel
				);
			}
			
			private function exportToExcel(e:MouseEvent):void
			{
				var data:Object = Data.getInstance().getChapterProfileById(
					Runtime.getInstance().currentLevelID
				);
				
				var bytes:ByteArray = ExchangeManager.export( data );
				var fr:FileReference = new FileReference();
				fr.save(bytes, data.id+".xls");
			}
			
			private function saveLevel(e:Event):void
			{
				this.mMainScene.save();
			}
			
			private function sendToStaticServer(e:Event):void
			{
				var currentLevelID:String = Runtime.getInstance().currentLevelID;
				if( !currentLevelID )
				{
					Alert.show("上传前请先选择关卡！");
					return;
				}
				
				var mask:* = Utils.makeManualPanel("上传关卡中，请稍后…", this);
				var export:File = Data.getInstance().resolvePath("export/");
				SyncManager.getInstance().uploadLevelsToOSS( currentLevelID,  
					function(msg:String):void
					{
						Utils.releaseManualPanel( mask );
						Alert.show(msg);
					});
			}
			
			private function parseSkillConfigFile(e:Event):void
			{
				var browser:File = new File(Data.getInstance().conf.skillPathCache);
				browser.browseForOpen("请选择上传的技能配置文件(.xlsx)");
				
				var self:* = this;
				browser.addEventListener(Event.SELECT, function (e:Event):void 
				{
					var file:File = e.target as File;
					Data.getInstance().setEditorConfig("skillPathCache", file.nativePath);
					
					var mask:* = Utils.makeManualPanel("解析技能配置中，请稍后…", self);	
					SkillConfigReader.parseSkillConfigFromPath(file.nativePath, 
						function(skillDict:*):void
						{
							var jsonOut:String = JSON.stringify(skillDict, null, "\t");

							var saved:File = Data.getInstance().resolvePath("config/skill.json");
							Utils.WriteRawFile( saved, jsonOut );
							
							SyncManager.getInstance().uploadConfigFileToOSSFromPath(
								saved.nativePath, 
								function(t:String):void 
								{
									Utils.releaseManualPanel( mask );
									Alert.show( t );
								}
							);
						}
					);
				});
			}
			
			private function uploadConfigFile(e:Event):void
			{
				var self:* = this;
				var browser:File = new File(Data.getInstance().conf.sendPathCache);
				browser.browseForOpen("请选择上传的配置文件");
				browser.addEventListener(Event.SELECT, function (e:Event):void {
					
					var file:File = e.target as File;
					Data.getInstance().setEditorConfig("sendPathCache", file.nativePath);
					
					var mask:* = Utils.makeManualPanel("正在上传配置文件…", self);
					file.addEventListener(Event.COMPLETE, function(e:Event):void {
						
						SyncManager.getInstance().uploadConfigFileToOSS( file,
							function(t:String):void 
							{
								Utils.releaseManualPanel( mask );
								Alert.show( t );
							}
						);
						
					});
					file.load();
				});
			}
			
//			private function parseExcel(e:Event):void
//			{
//				var self:* = this;
//				var browser:File = new File(Data.getInstance().conf.profilePathCache);
//				browser.browseForOpen("请选择上传的场景文件");
//				browser.addEventListener(Event.SELECT, function (e:Event):void {
//					
//					var file:File = e.target as File;
//					Data.getInstance().setEditorConfig("profilePathCache", file.nativePath);
//					
//					var mask:* = Utils.makeManualPanel("正在上传配置文件…", self);
//					file.addEventListener(Event.COMPLETE, function(e:Event):void {
//						Data.getInstance().mergeLevelProfile( file, 
//							function(t:String):void
//							{
//								Utils.releaseManualPanel( mask );
//								Alert.show( t );
//							}
//						);
//					});
//					file.load();
//				});
//			}
			
			private function setPathRoot(e:Event):void 
			{
				Data.getInstance().setProjectPath(function(msg:String):void
				{
					Alert.show(msg);
				});
			}
			
			public function addLog(content:String):void {
				_log = _log+(_log==""?"":"\n")+content;
			}
			
			private function onDecoSelected(event:Event):void {
				
			}
			
			private function onPressDeco(event:Event):void {
				var deco:DecoPanel = new DecoPanel();
				deco.init(this.mDeco.textInput.text, this.stage.stageWidth, this.stage.stageHeight);
				EventManager.getInstance().addEventListener(EventType.DECO_PANEL_CLOSE, onDecoClose);
				PopUpManager.addPopUp(deco, MapEditor.getInstance());
			}
			
			private function onDecoClose(event:Event):void {
				EventManager.getInstance().removeEventListener(EventType.DECO_PANEL_CLOSE, onDecoClose);
				var decoList:ArrayCollection = new ArrayCollection();
				for (var deco:String in Data.getInstance().decoSet) {
					decoList.addItem(deco);
				}
				this.mDeco.dataProvider = decoList;
				if (!Data.getInstance().decoSet[this.mDeco.textInput.text]) {
					this.mDeco.textInput.text = "";
				}
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle" horizontalAlign="center"/>
	</s:layout>
	<s:VGroup height="100%" width="100%" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
		<s:HGroup id="toolbar" width="100%" verticalAlign="middle" horizontalAlign="left">
			
			<s:HGroup height="100%" width="100%" verticalAlign="top" horizontalAlign="left">
				<s:Button id="saveLevelBtn" label="保存关卡" click="saveLevel(event)"/>
				<s:Button id="sendBtn2" label="关卡上传" click="sendToStaticServer(event)"/>
				<s:Label visible="false" text="地图装饰" color="0x777777"/>
				<s:ComboBox visible="true" id="mDeco" width="80" change="onDecoSelected(event)"/>
				<s:Button visible="true" label="装饰编辑" click="onPressDeco(event)"/>
			</s:HGroup>
			
			<s:HGroup height="100%" width="100%" verticalAlign="top" horizontalAlign="right">
				<s:Label text="EXCEl" color="0x777777"/>	
				<s:Button id="mExportChapterToExcel" label="导出章节"/>
				<s:Button id="mImportToChapter" label="导入章节"/>
				<s:Label text="编辑器" color="0x777777"/>
				<s:Button id="set_project_path" label="重设路径" click="setPathRoot(event)"/>
				<s:Label text="配置项目" color="0x777777"/>
				<s:Button id="config" label="JSON配置" click="uploadConfigFile(event)"/>
				<s:Button id="configSkill" label="技能配置" click="parseSkillConfigFile(event)"/>
			</s:HGroup>
			
		</s:HGroup>
		
		<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="left">
			
			<ns1:EditLevel id="mEditLevel" width="200" height="100%">
			</ns1:EditLevel>
			
			<s:BorderContainer id="mSceneArea" width="100%" height="100%" dropShadowVisible="true">
				<ns1:MainScene id="mMainScene" x="0" y="0" width="100%" height="100%">
				</ns1:MainScene>
			</s:BorderContainer>
			
			<s:Group id="mSelectorArea" width="200" height="100%">
				<ns1:EditMonster id="mEditMonster" x="0" y="0" width="100%" height="100%">
				</ns1:EditMonster>
			</s:Group>
			
		</s:HGroup>
	</s:VGroup>
	
</s:WindowedApplication>