<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:mapEdit="mapEdit.*" width="350" initialize="onCreate()">
	
	<fx:Script>
		<![CDATA[
			import mx.containers.FormItem;
			import mx.containers.FormItemDirection;
			import mx.controls.Alert;
			import mx.controls.HRule;
			import mx.controls.TextInput;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.CheckBox;
			import spark.components.Form;
			import spark.components.HGroup;
			import spark.components.Label;
			import spark.components.VGroup;
			import spark.primitives.Line;
			
			protected var mCBComplete:Function = null;
			protected var mCBError:Function = null;
			protected var mKey2Group:Object = {};
			protected var mKey2UIComponents:Object = {};
			protected var mKey2Data:Object = {};
			protected var mSource:Object = {};
			protected var mIsPopUp:DisplayObject = null;
			
			// in 	: args 	{ group : [ [key, cnKey, type, default], ... ] }
			// out 	: ret 	{ key : value }
			protected static const kTAG:int 	= 0;
			protected static const kKEY:int	 	= 1;
			protected static const kTYPE:int 	= 2;
			protected static const kDEFAULT:int = 3;
			protected static const kDESC:int 	= 4;
			
			protected function onCreate():void  {
				this.addEventListener(KeyboardEvent.KEY_DOWN, onKeyboardAction);
//				this.mRootPanel.moveArea.addEventListener(MouseEvent.MOUSE_DOWN, onMoveAreaMouseDown);
//				this.mRootPanel.moveArea.addEventListener(MouseEvent.MOUSE_UP, onMoveAreaMouseUp);
				
				// make items by group
				{	
					this.mTabNavigator.removeAllChildren();
					this.mTabNavigator.removeAllElements();
					
					var max:Number = 0;
					for each( var item:Array in this.mSource ) 
					{
						if( !(item[kTAG] in this.mKey2Group) )
						{
							var page:NavigatorContent = new NavigatorContent;
							page.label = item[kTAG];
							
							var group:Form = new Form;
							page.addElement( group );
							this.mTabNavigator.addElement( page );
							
							this.mKey2Group[item[kTAG]] = group;
						}
						
						this.mKey2Group[item[kTAG]].addElement( 
							this.createAndRegisterItem( item ) 
						);
						
						var rule:HRule = new HRule;
						rule.percentWidth = 100; rule.height = 1; rule.x = 75;
						this.mKey2Group[item[kTAG]].addElement( rule );
						
						this.mKey2Data[item[kKEY]] = item;
						
						max = Math.max( max, this.mKey2Group[item[kTAG]].numElements/2 );
					}
					
					//this.mRootPanel.height = max*52+45;
				}
				
			};
			
			public function init( onComplete:Function, onError:Function, data:Object, isPopUp:DisplayObject = null ):void
			{
				this.mCBComplete = onComplete;
				this.mCBError 	 = onError;
				this.mSource 	 = data;
				this.mIsPopUp 	 = isPopUp;
				if( this.mIsPopUp ) {
					PopUpManager.addPopUp( this, this.mIsPopUp, true );
					PopUpManager.centerPopUp( this );
				}
			}
			
			protected function onMoveAreaMouseDown(event:Event):void
			{
				if( this.mIsPopUp ) this.startDrag();
			}
			
			protected function onMoveAreaMouseUp(event:Event):void
			{
				if( this.mIsPopUp ) this.stopDrag();
			}
			
			protected function onKeyboardAction(event:KeyboardEvent):void
			{	
				//trace( event.ctrlKey +" "+event.charCode);
				if( !this.mIsPopUp ) return;
				if( event.ctrlKey && event.charCode == Keyboard.ENTER )
				{
					this.onConfirm();
				}
			}
			
			protected function onClose(event:Event):void
			{
				if( !this.mIsPopUp ) return;
				
				var ret:Object = {};
				for each ( var item:Array in this.mSource ) 
				{
					ret[item[kKEY]] = item[kDEFAULT];
				}
				
				this.mCBComplete( ret  );
				if( this.mIsPopUp )
					PopUpManager.removePopUp( this );
			}
			
			protected function onConfirm(event:MouseEvent=null):void
			{
				var ret:Object = {};
				for( var key:String in this.mKey2UIComponents )
				{
					try {
						var item:Array = this.mKey2UIComponents[key];
						var data:Array = this.mKey2Data[key];
						if( data[kTYPE] == "bool" )
						{
							ret[key] = item[0].selected;
						}
						else if( data[kTYPE] == "ccp" || data[kTYPE] == "ccsize" )
						{
							ret[key] = [Number(item[0].text), Number(item[1].text)];
						}
						else if( data[kTYPE] == "array_int" ) 
						{
							ret[key] = JSON.parse( item[0].text ) as Array;
							var weight:int = 0;
							for( var i:int=1; i<ret[key].length; i+=2 )
								weight += ret[key][i];
							if( weight > 100 ) 
							{
								this.mCBError( data[kTAG]+"|"+data[kDESC]+"总权重大于100，请检查" );
								return;
							}
						}
						else if( data[kTYPE] == "string" )
						{
							ret[key] = item[0].text;
						} 
						else 
						{
							ret[key] = JSON.parse( item[0].text );
						}
					}catch(err:Error) {
						this.mCBError( data[kTAG] +"|"+data[kDESC]+"填写错误，请检查" );
						return;
					}
				}
				this.mCBComplete( ret );
				if( this.mIsPopUp )
					PopUpManager.removePopUp( this );
			}
			
			protected function createAndRegisterItem( item:Object ):UIComponent
			{
				var self:ConfigPanel = this;
				this.mKey2UIComponents[item[kKEY]] = [];
				
				var head:FormItem = new FormItem;
				head.direction = FormItemDirection.HORIZONTAL;
				
				var label:Label = new Label;
				label.text = item[kDESC];
				label.width = 75;
				head.addElement( label );
				
				if( item[kTYPE] == "float" || item[kTYPE] == "int" )
				{
					var input:TextInput = new TextInput;
					input.text 	= item[kDEFAULT];
					input.width	= 75;
	
					if( item.type == "float" ) input.restrict = "\.\0-9\ ";
					else if( item.type == "int" ) input.restrict = "0-9";
					
					head.addElement( input );
					this.mKey2UIComponents[item[kKEY]].push(input);
				} 
				else if ( item[kTYPE] == "string" )
				{
					var str_input:TextInput = new TextInput;
					str_input.text = item[kDEFAULT];
					str_input.width = 75;
					
					head.addElement( str_input );
					this.mKey2UIComponents[item[kKEY]].push( str_input );
				}
				else if ( item[kTYPE] == "bool" )
				{
					var check:CheckBox = new CheckBox;
					check.selected = Boolean(item[kDEFAULT]);
					
					head.addElement( check );
					this.mKey2UIComponents[item[kKEY]].push(check);
				} 
				else if ( item[kTYPE] == "ccp" || item[kTYPE] == "ccsize" ) 
				{	
					var x_width:TextInput = new TextInput;
					x_width.text 	= item[kDEFAULT][0];
					x_width.width	= 75;
					x_width.restrict = "0-9";
					head.addElement( x_width );
					
					var y_height:TextInput = new TextInput;
					y_height.text 	= item[kDEFAULT][1];
					y_height.width	= 75;
					y_height.restrict = "0-9";
					head.addElement( y_height );
					
					this.mKey2UIComponents[item[kKEY]].push(x_width);
					this.mKey2UIComponents[item[kKEY]].push(y_height);
				}
				else if ( item[kTYPE] == "array_int" )
				{				
					var array:TextInput = new TextInput;
					array.text = String(JSON.stringify( item[kDEFAULT] ));
					array.restrict = "\[\]\,\0-9\ ";
					
					head.addElement( array );
					this.mKey2UIComponents[item[kKEY]].push( array );
				}
				
				return head;
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
		
	<s:TitleWindow id="mRootPanel" left="0" top="0" width="100%" height="100%" borderVisible="true"
				   chromeColor="#CFCFCF" close="onClose(event)" dropShadowVisible="true"
				   fontFamily="Arial" fontSize="13" fontStyle="normal" fontWeight="normal"
				   skinClass="spark.skins.spark.PanelSkin" textDecoration="none" title="参数配置">
		
		<mx:TabNavigator id="mTabNavigator" left="5" right="5" top="5" bottom="35">
			<s:NavigatorContent width="100%" height="100%" label="选项卡 1">
			</s:NavigatorContent>
		</mx:TabNavigator>
		
		<s:Button id="mConfirmButton" right="5" bottom="5" height="27" label="确认修改(Ctrl+Enter)"
				  click="onConfirm(event)" enabled="true" fontSize="13"/>
	</s:TitleWindow>
</s:Module>
