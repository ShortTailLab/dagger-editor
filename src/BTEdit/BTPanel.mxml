<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="1155" height="800" creationComplete="onCreation()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import manager.EventManager;
			import manager.EventType;
			import manager.GameEvent;
			
			import mapEdit.Entity;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.NavigatorContent;
			import spark.events.IndexChangeEvent;
			
			private var mTarget:Entity;
			private var mPhoto:UIComponent;
			private var mFilteredLibrary:ArrayCollection;
			private var mTargetBehaviors:Array;
			/** tab name -> tab */
			private var mTabDict:Object;
			private var mTabNames:Array;
			private var mTabSerial:int = 1;
			
			public static var CLIPPING:Object = null;
			
			private var mLastAddedTab:String = null;
			private var modifiedAndSavedFiles:Object;
			
			[Embed(source="assets/root.png")] 
			public static const ICON_ROOT:Class;
			[Embed(source="assets/zhixing.png")] 
			public static const ICON_EXEC:Class;
			[Embed(source="assets/shunxu.png")] 
			public static const ICON_SEQ:Class;
			[Embed(source="assets/youxian.png")] 
			public static const ICON_PRIO:Class;
			[Embed(source="assets/tongbu.png")] 
			public static const ICON_SPAWN:Class;
			[Embed(source="assets/tiaojian.png")] 
			public static const ICON_COND:Class;
			[Embed(source="assets/xunhuan.png")] 
			public static const ICON_LOOP:Class;
			[Embed(source="assets/subtree.png")] 
			public static const ICON_SUBTREE:Class;
			[Embed(source="assets/once.png")] 
			public static const ICON_ONCE:Class;
			[Embed(source="assets/every.png")] 
			public static const ICON_EVERY:Class;
			[Embed(source="assets/random.png")] 
			public static const ICON_RANDOM:Class;
			
			private function onCreation():void {
				this.mTabDict = new Object();
				this.mTabNames = new Array();
				registerContextMenu();
				EventManager.getInstance().dispatchEvent(new GameEvent(EventType.BT_EDIT_PANEL_CREATE));
			}
			
			public function init(target:Entity, w:Number, h:Number):void {
				this.width = w;
				this.height = h;
				this.mTarget = target;
				this.modifiedAndSavedFiles = new Object();
				this.mTabNavigator.addEventListener(IndexChangedEvent.CHANGE, onTabIndexChanged);
					
				this.setLibrary();
				this.setCharacterInfo();
				if (this.mTargetBehaviors.length > 0) {
//					var data:Array = [];
//					for (var i:int = 0; i < this.mTargetBehaviors.length; i++) {
//						data.push(Data.getInstance().getBehaviorById(this.mTargetBehaviors[i]));
//					}
					this.addTab(this.mTargetBehaviors[0], [null]);
				}
				
				this.addEventListener(KeyboardEvent.KEY_DOWN, onPressKeyboard);
			}
			
			private function onPressKeyboard(event:KeyboardEvent):void {
				if (event.ctrlKey && event.keyCode == Keyboard.S) {
					this.onPressSave();
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.C) {
					var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
					var bt:BT = this.mTabDict[current].bt;
					if (bt.CURRENT_EDIT_NODE) {
						bt.CURRENT_EDIT_NODE.onCopyNode();
					}
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.V) {
					current = this.mTabNames[this.mTabNavigator.selectedIndex];
					bt = this.mTabDict[current].bt;
					if (bt.CURRENT_EDIT_NODE) {
						bt.CURRENT_EDIT_NODE.onPasteNode();
					}
				}
				else if (event.ctrlKey && event.keyCode == Keyboard.X) {
					current = this.mTabNames[this.mTabNavigator.selectedIndex];
					bt = this.mTabDict[current].bt;
					if (bt.CURRENT_EDIT_NODE) {
						bt.CURRENT_EDIT_NODE.onCutNode();
					}
				}
				else if (event.keyCode == Keyboard.BACKSPACE || event.keyCode == Keyboard.DELETE) {
//					current = this.mTabNames[this.mTabNavigator.selectedIndex];
//					bt = this.mTabDict[current].bt;
//					if (bt.CURRENT_EDIT_NODE) {
//						bt.CURRENT_EDIT_NODE.onDeleteNode();
//					}
				}
				else if (event.ctrlKey && event.shiftKey && event.keyCode == Keyboard.S) {
					this.onPressSaveAll();
				}
				else if (event.keyCode == Keyboard.MINUS) {
					if (this.mZoom.value > this.mZoom.minimum) {
						this.mZoom.value -= 0.1;
						if (this.mZoom.value < this.mZoom.minimum) this.mZoom.value = this.mZoom.minimum;
						this.onZoomChanged(event);
					}
				}
				else if (event.keyCode == Keyboard.EQUAL) {
					if (this.mZoom.value < this.mZoom.maximum) {
						this.mZoom.value += 0.1;
						if (this.mZoom.value > this.mZoom.maximum) this.mZoom.value = this.mZoom.maximum;
						this.onZoomChanged(event);
					}
				}
			}
			
			private function onTabIndexChanged(event:IndexChangedEvent):void {
				if (this.mLastAddedTab == this.mTabNames[event.newIndex]) {
					
				}
				else {
					var subTrees:Array = this.mTabDict[this.mTabNames[event.newIndex]].bt.getSubTrees();
					if (subTrees && subTrees.length > 0) {
						var modified:Boolean = false;
						for (var i:int = 0; i < subTrees.length; i++) {
							if (this.modifiedAndSavedFiles[subTrees]) {
								modified = true;
								break;
							}
						}
						if (modified) {
							this.mTabDict[this.mTabNames[event.newIndex]].bt.updateTree();
						}
					}
				}
				this.mLastAddedTab = null;
			}
			
			private function setLibrary():void {
				this.mLibrary.addEventListener(MouseEvent.CLICK, onLibraryItemSelect);
				
				var menu:ContextMenu = new ContextMenu;
				var item1:ContextMenuItem = new ContextMenuItem("重命名");
				item1.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onLibraryItemRename);
				menu.addItem(item1);
				item1 = new ContextMenuItem("复制");
				item1.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onLibraryItemCopy);
				menu.addItem(item1);
				var item0:ContextMenuItem = new ContextMenuItem("删除");
				item0.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onLibraryItemDelete);
				menu.addItem(item0);;
				this.mLibrary.contextMenu = menu;
				
				this.filterLibrary();
			}
			
			private function filterLibrary(event:Event=null):void {
				var content:String = this.mSearch.text;
				var searchContent:RegExp = new RegExp(content, "i");
				this.mFilteredLibrary = new ArrayCollection();
				for(var b:String in Data.getInstance().behaviorSet)
					if(b.search(searchContent) >= 0)
						this.mFilteredLibrary.addItem(b);
				this.mFilteredLibrary.sort = new Sort();
				this.mFilteredLibrary.refresh();
				
				this.mLibrary.dataProvider = this.mFilteredLibrary;
				this.mComboBox.dataProvider = this.mFilteredLibrary;
				
				this.mTargetBehaviors = Data.getInstance().getEnemyBehaviorsById(Runtime.getInstance().currentLevelID, this.mTarget.classId) as Array;
				if (this.mTargetBehaviors.length > 0) {
					for (var i:int = 0; i < this.mFilteredLibrary.length; i++) {
						if (this.mFilteredLibrary[i] == this.mTargetBehaviors[0]) {
							this.mComboBox.selectedIndex = i;
							return;
						}
					}
				}
				this.mComboBox.selectedIndex = -1;
				this.mComboBox.textInput.text = "";
			}
			
			private function onLibraryItemSelect(event:Event):void {
				if (this.mLibrary.selectedIndex >= 0) {
					switchToTab(this.mFilteredLibrary[this.mLibrary.selectedIndex]);
				}
			}
			
			private function onLibraryItemDelete(event:Event):void {
				if (this.mLibrary.selectedIndex >= 0)
					Alert.show("删除库行为会一并删除所有相关的行为，确定删除 "+this.mFilteredLibrary[this.mLibrary.selectedIndex]+"？", "警告", Alert.OK|Alert.CANCEL, this, onDeleteClose);
				else {
					Alert.show("请先选择要删除的行为");
				}
			}
			
			private function onDeleteClose(event:CloseEvent):void {
				if (event.detail == Alert.OK) {
					removeBehavior(this.mFilteredLibrary[this.mLibrary.selectedIndex]);
				}
			}
			
			private function removeBehavior(name:String):void {
				closeTab(name);
				
				// find all instances using the behavior and remove the references
				var enemies:Array = Data.getInstance().findEnemiesByBehavior(Runtime.getInstance().currentLevelID, name);
				for (var i:int = 0; i < enemies.length; i++) {				
					Data.getInstance().updateEnemyBehaviorsById( 
						Runtime.getInstance().currentLevelID, enemies[i], [] 
					);
				}
				
				// remove it directly from data
				Data.getInstance().eraseBehaviorById(name);
				this.filterLibrary();
			}
			
			private function onLibraryItemRename(event:Event):void {
				if (this.mLibrary.selectedIndex < 0) return;
				EventManager.getInstance().addEventListener(EventType.INPUT_DIALOG_CONFIRM, renameBehavior);
				var input:InputDialog = new InputDialog();
				input.setTitle("重命名行为", this.mFilteredLibrary[this.mLibrary.selectedIndex]);
				PopUpManager.addPopUp(input, MapEditor.getInstance());
				PopUpManager.centerPopUp(input);
			}
			
			private function onLibraryItemCopy(event:Event):void {
				if (this.mLibrary.selectedIndex < 0) return;
				var name:String = this.mFilteredLibrary[this.mLibrary.selectedIndex];
				BTPanel.CLIPPING = Utils.cloneObjectData(Data.getInstance().behaviorSet[name]);
				trace("clipping data "+JSON.stringify(BTPanel.CLIPPING));
			}
			
			private function renameBehavior(event:GameEvent):void {
				EventManager.getInstance().removeEventListener(EventType.INPUT_DIALOG_CONFIRM, renameBehavior);
				if (event.data.from == event.data.to || event.data.to==null)
					return;
				
				if (Data.getInstance().getBehaviorById(event.data.to)) {
					Alert.show("行为名已经存在，无法改名为 " + event.data.to);
					return;
				}
				
				renameTab(event.data.from, event.data.to);
				
				// save with toName first
				var behaviorData:Object = Data.getInstance().getBehaviorById(event.data.from);
				Data.getInstance().updateBehaviorSetById(event.data.to, behaviorData);
				
				// find all instances using the behavior
				var enemies:Array = Data.getInstance().findEnemiesByBehavior(Runtime.getInstance().currentLevelID, event.data.from);
				
				// change references to using new names
				for (var i:int = 0; i < enemies.length; i++) {				
					Data.getInstance().updateEnemyBehaviorsById( 
						Runtime.getInstance().currentLevelID, enemies[i], [event.data.to] 
					);
				}
				
				// remove old behavior
				removeBehavior(event.data.from);
			}
			
			private function setCharacterInfo():void {
				var profile:Object = Data.getInstance().getEnemyProfileById( Runtime.getInstance().currentLevelID, this.mTarget.classId);
				var bitmapData:BitmapData = Data.getInstance().getSkinById(profile.face);
				this.mPhoto = new UIComponent();
				if (bitmapData) {
					var bmp:Bitmap = new Bitmap(bitmapData);
					bmp.x = bmp.width/2;
					bmp.y = bmp.height/2;
					this.mPhoto.addChild(bmp);
				} 
				else {
					var tf:TextField = new TextField();
					tf.defaultTextFormat = new TextFormat("Missing Photo", 14, 0xFF0000, true);
					tf.x = tf.width/2;
					tf.y = tf.height/2;
					this.mPhoto.addChild(tf);
				}
				this.mPhotoContainer.addElement(this.mPhoto);
			}
			
			private function onPressClose(event:Event):void {
				PopUpManager.removePopUp(this);
			}
			
			private function onSelectBehavior(event:Event):void {
				var val:Array = [this.mFilteredLibrary[this.mComboBox.selectedIndex]];
				Data.getInstance().updateEnemyBehaviorsById(Runtime.getInstance().currentLevelID, this.mTarget.classId, val);
			}
			
			private function onPressSave(event:Event=null):void {
				if (this.mTabNavigator.selectedIndex == -1) return;
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				if (this.mTabDict[current].modified) {
					var data:Object = this.mTabDict[current].bt.export();
					Data.getInstance().updateBehaviorSetById(current, data);
					setTabModified(current, false);
					var alert:Alert = Alert.show(current+" 保存成功!");
					setTimeout(function ():void { if (alert && alert.parent) alert.parent.removeChild(alert); }, 1000);
					this.filterLibrary();
					this.modifiedAndSavedFiles[current] = true;
				}
			}
			
			private function onPressSaveAll(event:Event=null):void {
				for (var tabName:String in this.mTabDict) {
					if (this.mTabDict[tabName].modified) {
						var data:Object = this.mTabDict[tabName].bt.export();
						Data.getInstance().updateBehaviorSetById(tabName, data);
						setTabModified(tabName, false);
						this.modifiedAndSavedFiles[tabName] = true;
					}
				}
				var alert:Alert = Alert.show(" 保存成功!");
				setTimeout(function ():void { if (alert && alert.parent) alert.parent.removeChild(alert); }, 1000);
				this.filterLibrary();
			}
			
			private function onPressApply(event:Event):void {
				var val:Array = [this.mTabNames[this.mTabNavigator.selectedIndex]];
				Data.getInstance().updateEnemyBehaviorsById(Runtime.getInstance().currentLevelID, this.mTarget.classId, val);
				for (var i:int = 0; i < this.mFilteredLibrary.length; i++) {
					if (this.mFilteredLibrary[i] == val[0]) {
						this.mComboBox.selectedIndex = i;
						break;
					}
				}
			}
			
			private function onPressAutoLayout(event:Event):void {
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				this.mTabDict[current].bt.autoLayout();
			}
			
			private function onSearchChanged(event:Event):void {
				this.filterLibrary();
			}
			
			private function onPressNewTab(event:Event):void {
				for (var name:String in Data.getInstance().behaviorSet) {
					if (name.indexOf("新行为") === 0) {
						var str:String = name.substr(3);
						var num:int = int(str);
						if (num >= this.mTabSerial) {
							this.mTabSerial = num+1;
						}
					}
				}
				addTab("新行为"+this.mTabSerial, [{type:"执行", children:[], data:null}]);
				this.mTabSerial++;
			}
			
			private function onPressNode1(event:Event):void {
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				this.mTabDict[current].bt.setSelected(BTNode.FUNC_NODE_EXEC);
			}
			
			private function onPressNode2(event:Event):void {
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				this.mTabDict[current].bt.setSelected(BTNode.FUNC_NODE_SEQ);
			}
			
			private function onPressNode3(event:Event):void {
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				this.mTabDict[current].bt.setSelected(BTNode.FUNC_NODE_PRIO);
			}
			
			private function onPressNode4(event:Event):void {
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				this.mTabDict[current].bt.setSelected(BTNode.FUNC_NODE_SPAWN);
			}
			
			private function onPressNode5(event:Event):void {
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				this.mTabDict[current].bt.setSelected(BTNode.FUNC_NODE_COND);
			}
			
			private function onPressNode6(event:Event):void {
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				this.mTabDict[current].bt.setSelected(BTNode.FUNC_NODE_LOOP);
			}
			
			private function onPressNode7(event:Event):void {
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				this.mTabDict[current].bt.setSelected(BTNode.FUNC_NODE_ONCE);
			}
			
			private function onPressNode8(event:Event):void {
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				this.mTabDict[current].bt.setSelected(BTNode.FUNC_NODE_EVERY);
			}
			
			private function onPressNode9(event:Event):void {
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				this.mTabDict[current].bt.setSelected(BTNode.FUNC_NODE_RANDOM);
			}
			
			private function addTab(name:String, data:Array):void {
				var tab:NavigatorContent;
				if (this.mTabDict[name]) {
					tab = this.mTabDict[name].tab;
					tab.removeAllElements();
				}
				else {
					tab = new NavigatorContent();
					this.mTabNavigator.addElement(tab);
					this.mTabNames.push(name);
				}
				
				var tree:BT = new BT();
				tree.setData(name, data, this);
				tab.addElement(tree);
				tree.setScale(this.mZoom.value);
				var modified:Boolean = Data.getInstance().behaviorSet[name]==null?true:false;
				
				tab.label = name+(modified?"*":"");
				var index:int = this.mTabNames.indexOf(name);
				this.mTabNavigator.selectedIndex = index;
				this.mLastAddedTab = name;

				this.mTabDict[name] = {tab:tab, modified:modified, bt:tree};
			}
			
			public function setTabModified(name:String, modified:Boolean):void {
				if (this.mTabDict[name]) {
					this.mTabDict[name].modified = true;
					this.mTabDict[name].tab.label = name+(modified?"*":"");
				}
			}
			
			private function registerContextMenu():void {
				var menu:ContextMenu = new ContextMenu;
				var item:ContextMenuItem = new ContextMenuItem("关闭当前");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCloseTabMenu);
				menu.addItem(item);
				item = new ContextMenuItem("关闭所有");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCloseAllTabsMenu);
				menu.addItem(item);
				item = new ContextMenuItem("关闭其他");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onCloseOtherTabsMenu);
				menu.addItem(item);
				item = new ContextMenuItem("重命名当前");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onRenameTabMenu);
				menu.addItem(item);
				this.mTabNavigator.contextMenu = menu;
			}
			
			private function onCloseTabMenu(event:Event):void {
				if (this.mTabNavigator.selectedIndex >= 0 && this.mTabNames.length > 0) {
					if (this.mTabDict[this.mTabNames[this.mTabNavigator.selectedIndex]].modified) {
						Alert.show(this.mTabNames[this.mTabNavigator.selectedIndex]+" 有修改尚未保存，确定关闭？", "警告", Alert.OK|Alert.CANCEL, this, onConfirmClose);
					}
					else {
						this.closeTab(this.mTabNames[this.mTabNavigator.selectedIndex]);
					}
				}
			}
			
			private function onCloseAllTabsMenu(event:Event):void {
				var needWarning:String = null;
				for (var tabName:String in this.mTabDict) {
					if (this.mTabDict[tabName].modified) {
						needWarning = tabName;
						break;
					}
				}
				if (needWarning) {
					Alert.show(needWarning+" 有修改尚未保存，确定关闭？", "警告", Alert.OK|Alert.CANCEL, this, onConfirmCloseAll);
				}
				else {
					for (tabName in this.mTabDict) {
						this.closeTab(tabName);
					}
				}
			}
			
			private function onCloseOtherTabsMenu(event:Event):void {
				var needWarning:String = null;
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				for (var tabName:String in this.mTabDict) {
					if (tabName != current && this.mTabDict[tabName].modified) {
						needWarning = tabName;
						break;
					}
				}
				if (needWarning) {
					Alert.show(needWarning+" 有修改尚未保存，确定关闭？", "警告", Alert.OK|Alert.CANCEL, this, onConfirmCloseOthers);
				}
				else {
					for (tabName in this.mTabDict) {
						if (tabName != current) {
							this.closeTab(tabName);
						}
					}
				}
			}
			
			private function onConfirmClose(event:CloseEvent):void {
				if (event.detail == Alert.OK) {
					var name:String = this.mTabNames[this.mTabNavigator.selectedIndex]
					this.closeTab(name);
				}
			}
			
			private function onConfirmCloseAll(event:CloseEvent):void {
				if (event.detail == Alert.OK) {
					for (var tabName:String in this.mTabDict) {
						this.closeTab(tabName);
					}
				}
			}
			
			private function onConfirmCloseOthers(event:CloseEvent):void {
				if (event.detail == Alert.OK) {
					var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
					for (var tabName:String in this.mTabDict) {
						if (tabName != current) {
							this.closeTab(tabName);
						}
					}
				}
			}
			
			private function onRenameTabMenu(event:Event):void {
				if (this.mTabNavigator.selectedIndex < 0) return;
				var current:String = this.mTabNames[this.mTabNavigator.selectedIndex];
				EventManager.getInstance().addEventListener(EventType.INPUT_DIALOG_CONFIRM, renameBehavior);
				var input:InputDialog = new InputDialog();
				input.setTitle("重命名行为", current);
				PopUpManager.addPopUp(input, MapEditor.getInstance());
				PopUpManager.centerPopUp(input);
			}
			
			private function closeTab(name:String):void {
				if (this.mTabDict[name]) {
					this.mTabNavigator.removeChild(this.mTabDict[name].tab);
					this.mTabNames.splice(this.mTabNames.indexOf(name), 1);
					delete this.mTabDict[name];
				}
			}
			
			private function renameTab(from:String, to:String):void {
				if (this.mTabDict[from]) {
					var index:int = this.mTabNames.indexOf(from);
					this.mTabNames[index] = to;
					var info:Object = this.mTabDict[from];
					this.mTabDict[to] = info;
					info.tab.label = to+(info.modified?"*":"");
					info.bt.rename(to);
					this.mTabDict[from] = null;
					delete this.mTabDict[from];
				}
			}
			
			private function switchToTab(name:String):void {
				var index:int = this.mTabNames.indexOf(name);
				if (index >= 0) {
					this.mTabNavigator.selectedIndex = index;
				}
				else {
					this.addTab(name, [ null ]);
				}
			}
			
			private function onZoomChanged(event:Event):void {
				if (this.mTabNames.length > 0) {
					for each (var elem:Object in this.mTabDict) {
						elem.bt.setScale(this.mZoom.value);
					}
				}
				this.mZoomValue.text = int(this.mZoom.value*100) + "%";
			}
			
		]]>
	</fx:Script>
	
	<s:Button right="0" top="0" width="30" height="20" label="x" click="onPressClose(event)"/>
	<s:HGroup x="0" y="0" width="100%" height="30">
		<s:Button width="80" height="25" label="保存当前" click="onPressSave(event)"/>
		<s:Button width="80" height="25" label="保存所有" click="onPressSaveAll(event)"/>
		<s:Button width="100" height="25" label="使用当前行为" click="onPressApply(event)"/>
		<s:Button width="80" height="25" label="重排行为树" click="onPressAutoLayout(event)"/>
	</s:HGroup>
	<s:HGroup left="0" top="30" width="100%" height="100%" gap="5">
		<s:VGroup width="170" height="100%" gap="0">
			<s:Panel width="100%" height="250" borderVisible="false" dropShadowVisible="false"
					 title="角色信息">
				<s:Group id="mPhotoContainer" x="0" y="0" width="100%" height="185">
				</s:Group>
				<s:ComboBox id="mComboBox" right="0" bottom="5" width="130" change="onSelectBehavior(event)"/>
				<s:Label left="5" bottom="10" fontSize="14" text="行为"/>
			</s:Panel>
			<s:Panel width="100%" height="100%" borderVisible="false" dropShadowVisible="false"
					 title="行为库">
				<s:HGroup x="0" y="0" width="100%" height="100%" gap="0">
					<s:VGroup width="100%" height="100%" gap="0">
						<s:TextInput id="mSearch" width="100%" change="onSearchChanged(event)"/>
						<s:List id="mLibrary" width="100%" height="100%"></s:List>
					</s:VGroup>
				</s:HGroup>
			</s:Panel>
		</s:VGroup>
		<s:VGroup width="100%" height="100%" gap="5">
			<s:HGroup width="100%" height="50" gap="20" paddingLeft="0">
				<s:Button width="50" height="50" label="增加执行节点" buttonMode="true"
						  click="onPressNode1(event)" cornerRadius="0" fontFamily="Arial"
						  fontStyle="normal" fontWeight="normal" icon="@Embed('assets/zhixing.png')"/>
				<s:Button width="50" height="50" label="增加顺序节点" buttonMode="true"
						  click="onPressNode2(event)" cornerRadius="0" fontFamily="Arial"
						  fontStyle="normal" fontWeight="normal" icon="@Embed('assets/shunxu.png')"/>
				<s:Button width="50" height="50" label="增加优先节点" buttonMode="true"
						  click="onPressNode3(event)" cornerRadius="0" fontFamily="Arial" 
						  fontStyle="normal" fontWeight="normal" icon="@Embed('assets/youxian.png')"/>
				<s:Button width="50" height="50" label="增加同步节点" buttonMode="true"
						  click="onPressNode4(event)" cornerRadius="0" fontFamily="Arial"
						  fontStyle="normal" fontWeight="normal" icon="@Embed('assets/tongbu.png')"/>
				<s:Button width="50" height="50" label="增加条件节点" buttonMode="true"
						  click="onPressNode5(event)" cornerRadius="0" fontFamily="Arial"
						  fontStyle="normal" fontWeight="normal" icon="@Embed('assets/tiaojian.png')"/>
				<s:Button width="50" height="50" label="增加循环节点" buttonMode="true"
						  click="onPressNode6(event)" cornerRadius="0" fontFamily="Arial"
						  fontStyle="normal" fontWeight="normal" icon="@Embed('assets/xunhuan.png')"/>
				<s:Button width="50" height="50" label="增加once节点" buttonMode="true"
						  click="onPressNode7(event)" cornerRadius="0" fontFamily="Arial"
						  fontStyle="normal" fontWeight="normal" icon="@Embed('assets/once.png')"/>
				<s:Button width="50" height="50" label="增加every节点" buttonMode="true"
						  click="onPressNode8(event)" cornerRadius="0" fontFamily="Arial"
						  fontStyle="normal" fontWeight="normal" icon="@Embed('assets/every.png')"/>
				<s:Button width="50" height="50" label="增加随机节点" buttonMode="true"
						  click="onPressNode9(event)" cornerRadius="0" fontFamily="Arial"
						  fontStyle="normal" fontWeight="normal" icon="@Embed('assets/random.png')"/>
			</s:HGroup>
			<s:Group width="100%" height="100%">
				<mx:TabNavigator id="mTabNavigator" x="0" y="0" width="100%" height="100%"
								 paddingTop="5">
				</mx:TabNavigator>
				<s:Button right="0" top="0" width="30" label="+" click="onPressNewTab(event)"/>
				<s:HSlider id="mZoom" right="30" bottom="0" change="onZoomChanged(event)" maximum="1.5"
						   minimum="0.1" stepSize="0.01" value="1" toolTip="按+/-键进行调节"/>
				<s:Label id="mZoomValue" right="0" bottom="1" width="30" backgroundColor="#C8C8C8"
						 fontSize="10" text="100%" textAlign="center" verticalAlign="top"/>
			</s:Group>
		</s:VGroup>
	</s:HGroup>
</s:BorderContainer>
