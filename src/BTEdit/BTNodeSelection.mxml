<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="400" height="600" close="onPressClose(event)" creationComplete="onCreate()"
			   title="更换节点行为类型">
	<fx:Script>
		<![CDATA[
			import manager.EventManager;
			import manager.EventType;
			import manager.GameEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.supportClasses.ItemRenderer;
			import spark.events.IndexChangeEvent;
			
			private var mSelectedData:Object;
			private var mTab1Data:ArrayCollection;
			private var mTab3Data:ArrayCollection;
			
			private function onCreate():void {
				mTab1Data = new ArrayCollection();
				var array:Array = Data.getInstance().behaviorNodes as Array;
				for (var i:int = 0; i < array.length; i++) {
					mTab1Data.addItem(Utils.cloneObjectData(array[i]));
				}
				mTab1Data.sort = new Sort();
				mTab1Data.refresh();
				this.mNodeList.dataProvider = mTab1Data;
				
				this.mTabNavigator.addEventListener(IndexChangedEvent.CHANGE, onTabChanged);
			}
			
			private function onTabChanged(event:IndexChangedEvent):void {
//				if (event.newIndex == 2 && this.mLibraryList && this.mLibraryList.dataProvider == null) {
//					this.mTab3Data = new ArrayCollection();
//					for (var b:String in Data.getInstance().behaviorSet) {
//						mTab3Data.addItem(b);
//					}
//					mTab3Data.sort = new Sort();
//					mTab3Data.refresh();
//					this.mLibraryList.dataProvider = mTab3Data;
//				}
			}
			
			private function onPressClose(event:Event=null):void {
				PopUpManager.removePopUp(this);
				EventManager.getInstance().dispatchEvent(new GameEvent(EventType.BT_NODE_SELECTION_COMPLETE, this.mSelectedData));
			}
			
			private function onSelectNode(event:ListEvent):void {
				mSelectedData = {type:BTNode.TYPE_EXEC, name:this.mTab1Data[event.rowIndex]};
				this.onPressClose();
			}
						
			private function onPressFunc1(event:MouseEvent):void {
				mSelectedData = {type:BTNode.TYPE_FUNC, name:BTNode.FUNC_NODE_EXEC};
				this.onPressClose();
			}
			
			private function onPressFunc2(event:MouseEvent):void {
				mSelectedData = {type:BTNode.TYPE_FUNC, name:BTNode.FUNC_NODE_SEQ};
				this.onPressClose();
			}

			private function onPressFunc3(event:MouseEvent):void {
				mSelectedData = {type:BTNode.TYPE_FUNC, name:BTNode.FUNC_NODE_PRIO};
				this.onPressClose();
			}
			
			private function onPressFunc4(event:MouseEvent):void {
				mSelectedData = {type:BTNode.TYPE_FUNC, name:BTNode.FUNC_NODE_SPAWN};
				this.onPressClose();
			}
			
			private function onPressFunc5(event:MouseEvent):void {
				mSelectedData = {type:BTNode.TYPE_FUNC, name:BTNode.FUNC_NODE_COND};
				this.onPressClose();
			}
			
			private function onPressFunc6(event:MouseEvent):void {
				mSelectedData = {type:BTNode.TYPE_FUNC, name:BTNode.FUNC_NODE_LOOP};
				this.onPressClose();
			}
			
			private function onPressFunc7(event:MouseEvent):void {
				mSelectedData = {type:BTNode.TYPE_FUNC, name:BTNode.FUNC_NODE_ONCE};
				this.onPressClose();
			}
			
			private function onPressFunc8(event:MouseEvent):void {
				mSelectedData = {type:BTNode.TYPE_FUNC, name:BTNode.FUNC_NODE_EVERY};
				this.onPressClose();
			}
			
			private function onPressFunc9(event:MouseEvent):void {
				mSelectedData = {type:BTNode.TYPE_FUNC, name:BTNode.FUNC_NODE_RANDOM};
				this.onPressClose();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<mx:TabNavigator id="mTabNavigator" x="0" y="0" width="100%" height="100%" paddingTop="0">
		<s:NavigatorContent width="100%" height="100%" label="BT.Node.">
			<mx:List id="mNodeList" x="0" y="0" width="100%" height="100%"
					change="onSelectNode(event)">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{data.func}" toolTip="描述: {data.desc}">
						</mx:Label>
					</fx:Component>
				</mx:itemRenderer>
			</mx:List>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="功能节点">
			<s:HGroup gap="40">
				<s:VGroup x="0" y="0" width="100%" height="100%" gap="20">
					<s:Button width="50" height="50" label="按钮" click="onPressFunc1(event)" buttonMode="true"
							  icon="@Embed('assets/zhixing.png')"/>
					<s:Button width="50" height="50" label="按钮" click="onPressFunc2(event)" buttonMode="true"
							  icon="@Embed('assets/shunxu.png')"/>
					<s:Button width="50" height="50" label="按钮" click="onPressFunc3(event)" buttonMode="true"
							  icon="@Embed('assets/youxian.png')"/>
					<s:Button width="50" height="50" label="按钮" click="onPressFunc4(event)" buttonMode="true"
							  icon="@Embed('assets/tongbu.png')"/>
					<s:Button width="50" height="50" label="按钮" click="onPressFunc5(event)" buttonMode="true"
							  icon="@Embed('assets/tiaojian.png')"/>
					<s:Button width="50" height="50" label="按钮" click="onPressFunc6(event)" buttonMode="true"
							  icon="@Embed('assets/xunhuan.png')"/>
					<s:Button width="50" height="50" label="按钮" click="onPressFunc7(event)" buttonMode="true"
							  icon="@Embed('assets/once.png')"/>
					<s:Button width="50" height="50" label="按钮" click="onPressFunc8(event)" buttonMode="true"
							  icon="@Embed('assets/every.png')"/>
				</s:VGroup>
				<s:VGroup x="149" y="222" width="100%" height="100%">
					<s:Button width="50" height="50" label="按钮" click="onPressFunc9(event)" buttonMode="true"
							  icon="@Embed('assets/random.png')"/>
				</s:VGroup>
			</s:HGroup>
		</s:NavigatorContent>
	</mx:TabNavigator>
</s:TitleWindow>
