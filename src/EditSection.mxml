<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="ctor()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mapEdit.Component;
			import mapEdit.Entity;
			import mapEdit.SectionManager;
			
			import misc.ConfirmPanel;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.ComboBase;
			import mx.core.INavigatorContent;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			
			import spark.components.Form;
			import spark.components.Group;
			import spark.components.Label;
			import spark.components.NavigatorContent;
			import spark.core.SpriteVisualElement;
			import spark.primitives.Rect;
			
			// ---------------------------------------------------------
			////// constant variables
			public static var kSceneScalor:Number 	= 0.5;
			public static var kSceneWidth:Number 	= 315;
			public static var kSceneHeight:Number 	= 640;
			
			public static var kGridWidth:Number 	= 35;
			public static var kGridHeight:Number 	= 46;
			
			// ---------------------------------------------------------
			////// 
			protected var mSelectedComponents:Array = null;
			protected var mSelectedTipsLayer:Group 	= null;
			
			protected var mSelectFrame:SpriteVisualElement 	= null;
			protected var mFocusComponent:Component 		= null;
			
			protected var mCopiedComponents:Array 	= null;
			protected var mPasteTipsLayer:Group 	= null;
			
			protected var mSectionInd2Content:* 	= null;
			protected var mSectionInd2Manager:* 	= null;
			protected var mSectionInd2Info:* 		= null;
			protected var mCopiedSection:* 			= null;
			protected var mSectionCountor:int 		= 0;
			
			protected function ctor():void
			{
				this.mSelectedTipsLayer = new Group();
				this.mSelectedTipsLayer.alpha = 0.5;
				this.addElement( this.mSelectedTipsLayer );
				
				this.mSelectFrame = new SpriteVisualElement;
				this.mSelectFrame.visible = false;
				this.addElement( this.mSelectFrame );
				
				this.mPasteTipsLayer = new Group();
				this.mPasteTipsLayer.alpha = 0.5;
				this.addElement( this.mPasteTipsLayer );
				
				var self:EditSection = this;
				this.mAppendSection.addEventListener(MouseEvent.CLICK, function(e:Event):void
				{
					self.appendSection( {}, String(self.mSectionCountor++) );
				});
				
				this.mCopySection.addEventListener(MouseEvent.CLICK, this.copyCurrentSection);
				this.mPasteSection.addEventListener(MouseEvent.CLICK, this.pasteToCurrentSection);
				this.mEraseSection.addEventListener(MouseEvent.CLICK, this.eraseCurrentSection);
				this.mEditSection.addEventListener(MouseEvent.CLICK, this.editCurrentSection);
				
				this.mSecDelayInput.restrict = ".0-9";
				this.mSecDelayInput.addEventListener(FlexEvent.ENTER, this.onSectionDelayInput);
				
				Runtime.getInstance().addEventListener( 
					Runtime.SELECT_DATA_CHANGE, this.onSelectedTypeChange
				);
				Runtime.getInstance().addEventListener(
					Runtime.CANCEL_SELECTION, this.onCancelEvent
				);
				Runtime.getInstance().addEventListener(Runtime.CURRENT_LEVEL_CHANGE,
					function(e:Event):void
					{
						self.reset( Runtime.getInstance().currentLevelID );	
					}
				)
				
				this.addEventListener(Event.ENTER_FRAME, this.update);
				this.addEventListener(MouseEvent.MOUSE_DOWN, this.onMouseDown);
				this.addEventListener(MouseEvent.MOUSE_MOVE, this.onMouseMove);
				this.addEventListener(MouseEvent.MOUSE_UP, this.onMouseUp);
				this.addEventListener(KeyboardEvent.KEY_DOWN, this.onKeyDown);
			}
			// ---------------------------------------------------------
			////// entrance
			protected var mLastLevelId:String = null;
			public function reset( lid:String ):void 
			{
				if( mLastLevelId ) 
					this.save( mLastLevelId );
				this.mLastLevelId = lid;
					
				var level:Array = Data.getInstance().getLevelDataById( lid ) as Array, 
					section:Object = null;
				
				this.mSectionInd2Content 	= {};
				this.mSectionInd2Info 		= {};
				this.mSectionInd2Manager 	= {};
				
				this.mSelectedComponents 	= [];
				this.mCopiedComponents 		= [];
				this.mSectionCountor 		= 1;
				this.mCopiedSection 		= null;
				this.mMainNavigator.removeAllElements();
				this.mSelectedTipsLayer.removeAllElements();
				
				this.onCancelEvent();
				
				for each( section in level )
					this.appendSection( section, String(this.mSectionCountor++) );
				
				this.mSelectedList.labelField = "label";
				this.stage.focus = this;
			}
			
			public function appendSection( section:Object, ind:String ):void 
			{
				if( !Runtime.getInstance().currentLevelID ) return;
				
				var page:NavigatorContent = new NavigatorContent;
				page.label 			= ind;
				page.id    			= ind;
				
				this.mSectionInd2Content[ind] = new Group();
				this.mSectionInd2Info[ind] = section.info || {};
				
				page.addElement( this.mSectionInd2Content[ind] );		
				this.mMainNavigator.addElement( page );
				
				var content:Group = this.mSectionInd2Content[ind];
				content.height = 640;
				
				var man:SectionManager = new SectionManager(this, ind);
				man.y = 100; man.x = 0;
				man.unserialize( section.targets );
				content.addElement( man );
				this.mSectionInd2Manager[ind] = man;
				
				EditSection.makeCoordinator( content );
				
				for each( var inst:Object in section.inst )
				{
					var item:Component = EditSection.makeComponentByType( inst.type );
					if( !item ) continue;
					item.unserialize( inst );
					this.insertComponent( item, content );
				}
			}
			
			public function save( lid:String ):void 
			{
				var secList:Array = [], item:INavigatorContent = null, ind:String = null;
				
				for( ind in this.mSectionInd2Info )
				{
					var section:Object = { info:{}, inst:{}, targets:[] };
					section.info = Utils.deepCopy( this.mSectionInd2Info[ind] );
					for each(var entity:Entity in this.getEntitiesByInd(ind) )
					{
						section.inst[entity.globalId] = entity.serialize();
					}
					section.targets = (this.mSectionInd2Manager[ind] as SectionManager).serialize() as Array;
					secList.push( section );
				}
				
				Data.getInstance().updateLevelDataById( 
					lid, secList
				);
				MapEditor.getInstance().writeToStatusBar("保存关卡"+lid);
			}
			
			// ------------------------
			////// routine update 
			public function update(e:Event):void
			{
				if( this.mSelectedTipsLayer ) 
				{
					this.mSelectedTipsLayer.x = this.mouseX;
					this.mSelectedTipsLayer.y = this.mouseY;
				}
				
				if( this.mPasteTipsLayer )
				{
					this.mPasteTipsLayer.x = this.mouseX;
					this.mPasteTipsLayer.y = this.mouseY;
				}
				
				var section:Group = this.currentSection;
				if( section && this.currentManager )
				{
					var x:Number = section.mouseX/EditSection.kSceneScalor;
					var y:Number = (EditSection.kSceneHeight-section.mouseY)/EditSection.kSceneScalor;
					this.mInfoMousePos.text = "鼠标位置：("+x+", "+y+")";
					section.setElementIndex( 
						this.currentManager, section.numElements-1 
					);
				}
			}
			
			// ------------------------
			////// event handling
			public function onSectionDelayInput(e:Event=null):void
			{
				try{
					var val:Number = Number( this.mSecDelayInput.text );
					for each( var item:Entity in this.mSelectedComponents )
						item.sectionDelay = val;
						
					MapEditor.getInstance().writeToStatusBar("更改延迟时间");
				}catch ( err:Error ) { return; }
			}
			
			public function onCancelEvent(e:Event=null):void
			{
				if( !this.currentSection ) return; 
				
				this.cancelSelected();
				this.copyComponents();
				
				this.mInfoCopiedSection.text = "回合黏贴：未开启";
				this.mPasteSection.enabled = false;
			}
			
			public function onSelectedTypeChange(e:Event):void 
			{
				var self:EditSection = this;
				
				this.mSelectedTipsLayer.removeAllElements();
				var type:String = Runtime.getInstance().selectedComponentType;
				if( !type ) return;
				
				var item:Component = EditSection.makeComponentByType( type );
				if( !item ) return;
				this.mSelectedTipsLayer.addElement( item );
			}
			
			public function onKeyDown(e:KeyboardEvent):void 
			{
				e.stopPropagation();
				
				var code:uint = e.keyCode, item:Component = null, flag:Boolean = false;
				
				if( code == Keyboard.C && e.ctrlKey )
					this.copyComponents();
				else if( code == Keyboard.V && e.ctrlKey )
					this.pasteComponents();
				else if( code == Keyboard.S && e.ctrlKey )
					this.save(Runtime.getInstance().currentLevelID);
				else if( code == Keyboard.DELETE || (code == Keyboard.D && e.ctrlKey) )
					this.eraseSelectedEntities();
				else if( code == Keyboard.LEFT )
				{
					for each( item in this.mSelectedComponents )
						item.x -= EditSection.kGridWidth * 0.5;
				}
				else if( code == Keyboard.RIGHT )
				{
					for each( item in this.mSelectedComponents )
						item.x += EditSection.kGridWidth * 0.5;
				}
				else if( code == Keyboard.UP )
				{
					for each( item in this.mSelectedComponents )
						item.y -= EditSection.kGridHeight;
				}
				else if( code == Keyboard.DOWN )
				{
					for each( item in this.mSelectedComponents )
						item.y += EditSection.kGridHeight;
				} else {
					flag = true;
				}
				
				if( !flag ) e.stopPropagation(); 
				
				if( code == Keyboard.UP || code == Keyboard.LEFT || 
					code == Keyboard.DOWN || code == Keyboard.RIGHT  )
				{
					for each( item in this.mSelectedComponents )
					{
						var now:Point = EditSection.getGridPos( new Point(item.x, item.y) );
						item.x = now.x;
						item.y = now.y;	
					}
				}
			}
			
			public function onMouseDown(e:Event):void 
			{				
				var section:Group = this.currentSection;
				if( !section ) return;
				if( !section.getBounds(this).containsPoint( new Point(this.mouseX, this.mouseY) ) ) 
					return;
				
				this.cancelSelected();
				var type:String = Runtime.getInstance().selectedComponentType;
				if( type ) 
				{
					var item:Component = EditSection.makeComponentByType( type );
					if( !item ) return;

					var pos:Point = EditSection.getGridPos( 
						new Point( section.mouseX, section.mouseY+EditSection.kGridHeight ) 
					);
					item.x = pos.x; item.y = pos.y;
	
					this.insertComponent( item );
				} else {
					this.mSelectFrame.graphics.clear();
					this.mSelectFrame.x = this.mouseX;
					this.mSelectFrame.y = this.mouseY;
					this.mSelectFrame.visible = true;
				}
			}
			protected var mLastMousePos:Point = new Point();
			public function onMouseMove(e:MouseEvent):void
			{
				if( this.mFocusComponent )
				{
					var deltaX:Number = this.mouseX - this.mLastMousePos.x;
					var deltaY:Number = this.mouseY - this.mLastMousePos.y;
					var item:Component = null;
					for each( item in this.mSelectedComponents )
					{
						item.x += deltaX;
						item.y += deltaY;
					}
					this.mLastMousePos.x = this.mouseX;
					this.mLastMousePos.y = this.mouseY;
				} else if ( this.mSelectFrame.visible ) {
					this.mSelectFrame.graphics.clear();
					this.mSelectFrame.graphics.lineStyle( 1 );
					this.mSelectFrame.graphics.drawRect(
						0, 0,
						this.mouseX-this.mSelectFrame.x,
						this.mouseY-this.mSelectFrame.y
					);
					
					if( !e.buttonDown ) this.mSelectFrame.visible = false;
				}
			}
			public function onMouseUp(e:Event):void 
			{
				var section:Group = this.currentSection, 
					group:Array = this.currentEntities,
					item:Component = null;
				if( this.mSelectFrame.visible || !section )
				{
					var from:Rectangle = this.mSelectFrame.getBounds(section);
					this.cancelSelected();
					for each ( item in group )
					{
						var to:Rectangle = item.getBounds(section);
						if( from.intersects( to ) )
							this.selectComponent( item );
					}
				}
				
				this.mFocusComponent = null;
				this.mSelectFrame.visible = false;
			}
			
			protected var mDoubleClickTimer:Timer = new Timer(300, 1);
			public function onMouseDown_Component(e:MouseEvent):void 
			{
				e.stopPropagation();
				var item:Component = e.currentTarget as Component;
				if( !item ) return;
				
				if( this.mDoubleClickTimer.running ) 
				{ 
					this.mDoubleClickTimer.stop();
					this.selectComponentsByType( item.classId );
				} else {
					this.mDoubleClickTimer.start();
					
					if( this.isSelected( item ) )
					 	this.mFocusComponent = item;
					else
					{
						if( !e.shiftKey ) this.cancelSelected();
						this.selectComponent( item );
						this.mFocusComponent = item;
					}
					
					this.mLastMousePos.x = this.mouseX;
					this.mLastMousePos.y = this.mouseY;
				}
			}
			
			// ---------------------------
			////// facilities
			
			public function insertComponent( item:Component, section:Group=null ):void 
			{
				if( !section ) section = this.currentSection;
				if( !section ) return;
				
				if( Data.getInstance().isBullet( item.classId ) )
				{
					MapEditor.getInstance().writeToStatusBar("【错误】不可将子弹类型放入场景中");
					return;
				}

				if( item.globalId == "" || !item.globalId )
					item.globalId = EditSection.makeGlobalId();
				
				item.addEventListener( MouseEvent.MOUSE_DOWN, this.onMouseDown_Component );
				section.addElement( item );
				
				this.mInfoNumComponents.text = "实体数量："+this.currentEntities.length;
			}
			
			public function eraseAllEntites( e:Event = null ):void
			{
				var section:Group 	= this.currentSection;
				var group:Array  	= this.currentEntities;
				
				var i:int = 0;
				for( i=group.length-1; i>=0; i-- )
				{
					var item:Entity = group[i] as Entity;
					if( item ) {
						item.dtor();
						section.removeElement( item );
					}
				}
			}
			
			public function eraseSelectedEntities( e:Event = null ):void
			{
				var section:Group 	= this.currentSection;
				var group:Array  	= this.currentEntities;
				
				var typeTable:Object = {}, i:int = 0, item:Component = null;
				for( i=group.length-1; i>=0; i-- )
				{
					for each( item in this.mSelectedComponents )
					{
						if( group[i] != item ) continue; 
						
						if( !(item.classId in typeTable) ) typeTable[item.classId] = 0;
						typeTable[item.classId] ++;
						item.dtor();
						
						section.removeElement( item );
						break;
					}
				}
				
				var str:String = "删除怪物  -> {";
				for( var key:String in typeTable )
				{
					str = str + " "+key+"("+typeTable[key]+") ";
				}
				str += " } ";
				MapEditor.getInstance().writeToStatusBar( str );
				
				this.cancelSelected();
				this.mInfoNumComponents.text = "实体数量："+this.currentEntities.length;
			}
			
			public function updateSelectedList():void
			{
				var listData:Array = [], item:Component = null, typeTable:Object = {};
				this.mSelectedList.dataProvider = new ArrayCollection( listData );
				
				for each( item in this.mSelectedComponents )
				{
					if( !(item.classId in typeTable) ) typeTable[item.classId] = 0;
					typeTable[item.classId] ++;
				}
					
				var key:String = null, profile:Object = null;
				for( key in typeTable )
				{
					profile = Data.getInstance().getEnemyProfileById(
						Runtime.getInstance().currentLevelID, key
					);
					if( !profile ) continue;
					
					listData.push( { 
						label : "["+key+"]"+profile.monster_name+"("+typeTable[key]+")" 
					} );
				}
			}
			
			public function selectComponent( item:Component ):void 
			{
				for each( var cmp_item:Component in this.mSelectedComponents )
					if( cmp_item == item ) return;
				this.mSelectedComponents.push( item );
				
				var self:EditSection = this;
				var changeType:ContextMenuItem = new ContextMenuItem("更换类型");
				changeType.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(e:Event):void
				{
					var enemies:Object = Data.getInstance().getEnemiesByLevelId( 
						Runtime.getInstance().currentLevelID
					);
					var data:Array = [], item:Object = null;
					for each( item in enemies )
					{
						data.push( { 
							label 	: item.monster_id +"|"+item.monster_name,
							type 	: item.monster_id
						} );
					}
					
					Utils.makeComboboxPanel( function(ind:int):void
					{
						if( ind < 0 ) return;
						self.changeSelectedType( data[ind].type );
					}, self, data, "请选择更换的类型");
				});
				
				var erase:ContextMenuItem = new ContextMenuItem("删除");
				erase.addEventListener( ContextMenuEvent.MENU_ITEM_SELECT, this.eraseSelectedEntities);
				
				var menu:ContextMenu = new ContextMenu;
				menu.addItem( changeType ); menu.addItem( erase );
				
				item.select( true );
				if( item as Entity )
				{
					item.contextMenu = menu;
					this.mSecDelayInput.text = String((item as Entity).sectionDelay);
				}
				
				this.updateSelectedList();
			}
			
			public function selectComponentsByType( type:String ):void 
			{
				this.cancelSelected();
				
				var group:Array = this.currentEntities;
				for each( var item:Component in group )
				{
					if( item.classId == type ) 
						this.selectComponent( item );
				}
			}
			
			public function cancelSelected( ):void 
			{
				if( !this.mSelectedComponents ) return;
				
				for each( var item:Component in this.mSelectedComponents )
				{
					item.select( false );
					item.contextMenu = null;
				}
				
				this.mSecDelayInput.text = null;
				this.mSelectedComponents = [];
				this.copyComponents();
				this.updateSelectedList();
			}
			
			public function changeSelectedType( toType:String ):void
			{
				var profile:Object = Data.getInstance().getEnemyProfileById( 
					Runtime.getInstance().currentLevelID, toType
				);
				if( !profile ) return;
					
				var group:Array = [], item:Component = null;
				for each( item in this.mSelectedComponents )
				{
					var toItem:Component = EditSection.makeComponentByType( toType );
					if( !toItem ) continue;
					toItem.x = item.x;
					toItem.y = item.y;
					this.insertComponent( toItem );
				}
				
				this.eraseSelectedEntities();
			}
			
			public function copyComponents():void
			{
				this.mCopiedComponents = [];
				this.mPasteTipsLayer.removeAllElements();
			
				if( this.mSelectedComponents.length <= 0 ) return;
				
				var min_x:Number = this.mSelectedComponents[0].x;
				var max_x:Number = this.mSelectedComponents[0].x;
				
				var min_y:Number = this.mSelectedComponents[0].y;
				var max_y:Number = this.mSelectedComponents[0].y;
				for each( item in this.mSelectedComponents )
				{
					min_x = Math.min( min_x, item.x);
					max_x = Math.max( max_x, item.x);
					min_y = Math.min( min_y, item.y);
					max_y = Math.max( max_y, item.y);
				}
				
				var item:Component = null, profile:Object = null;
				for each( item in this.mSelectedComponents )
				{
					profile = Data.getInstance().getEnemyProfileById(
						Runtime.getInstance().currentLevelID,
						item.classId
					);
					if( !profile ) continue;
					
					this.mCopiedComponents.push( {
						data : item.serialize(),
						label : "["+item.classId+"]"+profile.monster_name,
						pos : new Point( item.x-min_x-(max_x-min_x)/2,
										 item.y-min_y-(max_y-min_y)/2 )
					} );
					
					var tip:Component = EditSection.makeComponentByType( item.classId );
					if( !tip ) continue;
					tip.x = this.mCopiedComponents[this.mCopiedComponents.length-1].pos.x;
					tip.y = this.mCopiedComponents[this.mCopiedComponents.length-1].pos.y;
					this.mPasteTipsLayer.addElement( tip );
				}
			}
			
			public function pasteComponents():void
			{
				var section:Group = this.currentSection;
				if( !section ) return;
				
				var info:* = null, item:Component = null;
				for each( info in this.mCopiedComponents )
				{
					item = EditSection.makeComponentByType( info.data.type );
					if( !item ) continue;
					item.unserialize( info.data );
					var coord:Point = EditSection.getGridPos( 
						new Point( section.mouseX+info.pos.x, section.mouseY+info.pos.y )
					);
					item.x = coord.x; item.y = coord.y;
					this.insertComponent( item );
				}
			}
			
			//
			public function editCurrentSection(e:Event=null):void
			{
				if( !this.mMainNavigator.selectedChild ) return;
				
				var template:Array 	= Utils.deepCopy( Data.getInstance().dynamicArgs.Section ) as Array || [],
					info:Object 	= this.currentInfo;
				
				for each( var item:Array in template )
				{
					if( item[ConfigPanel.kKEY] in info )
						item[ConfigPanel.kDEFAULT] = info[item[ConfigPanel.kKEY]];
				}
				
//				trace(" -------------------------------- ");
//				Utils.dumpObject( template );
//				trace(" ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ");
				
				var self:EditSection = this;
				new ConfigPanel().init( 
					function( configs:Object ):void { 
						self.currentInfo = configs; 
					}, 
					function( err:String ):void { Alert.show(err); },
					template
				);
			}
			
			public function eraseCurrentSection(e:Event=null):void
			{
				if( !this.mMainNavigator.selectedChild ) return;
				var self:EditSection = this;
				ConfirmPanel.make( function():void
				{
					if( !self.mMainNavigator.selectedChild ) return;
					
					var item:INavigatorContent = self.mMainNavigator.selectedChild;
					
					delete self.mSectionInd2Content[item.label];
					delete self.mSectionInd2Info[item.label];
					self.mMainNavigator.removeItemAt( self.mMainNavigator.selectedIndex );
					
				}, "【删除】是否删除本回合?" );
			}
			
			public function copyCurrentSection(e:Event=null):void
			{
				if( !this.mMainNavigator.selectedChild ) return;
				
				this.mInfoCopiedSection.text = "回合黏贴：回合"+this.mMainNavigator.selectedChild.label;
				this.mPasteSection.enabled = true;
				
				
				this.mCopiedSection = {
					info : Utils.deepCopy(this.currentInfo),
					data : [],
					targets : this.currentManager.serialize() as Array
				};
				
				var item:Component = null, profile:Object = null;
				for each( item in this.currentEntities )
					this.mCopiedSection.data.push( item.serialize() );
			}
			
			public function pasteToCurrentSection(e:Event=null):void
			{
				if( !this.mMainNavigator.selectedChild ) return;
				
				var self:EditSection = this;
				ConfirmPanel.make( function():void
				{
					var section:Group = self.currentSection;
					if( !section || !self.mCopiedSection) return;
				
					self.eraseAllEntites();
					
					self.currentInfo = self.mCopiedSection.info ;
					var targets:Array = [];
					for each ( var inst:Object in self.mCopiedSection.data )
					{
						var item:Component = EditSection.makeComponentByType( inst.type );
						if( !item ) continue;
						item.unserialize( inst );
						
						var oldId:String = item.globalId;
						
						item.globalId = null;
						self.insertComponent( item );
						
						for each( var sid:String in self.mCopiedSection.targets )
						{
							if( sid == oldId ) 
							{
								targets.push( item.globalId );
								break;
							}
						}
					}
					
					self.currentManager.unserialize( targets );
					
					self.mCopiedSection = null;
				}, "【黏贴】是否覆盖本回合？");
			}
			
			// 
			public function get currentSection():Group 
			{
				if( !this.mMainNavigator.selectedChild ) return null;
				return this.mSectionInd2Content[this.mMainNavigator.selectedChild.label];
			}
			
			public function get currentInfo():Object
			{
				if( !this.mMainNavigator.selectedChild ) return {};
				return this.mSectionInd2Info[this.mMainNavigator.selectedChild.label] || {};
			}
			
			public function set currentInfo( info:Object ):void
			{
				if( !this.mMainNavigator.selectedChild ) return;
				this.mSectionInd2Info[this.mMainNavigator.selectedChild.label] = info;
			}
			
			public function get currentManager():SectionManager
			{
				if( !this.mMainNavigator.selectedChild ) return null;
				return this.mSectionInd2Manager[this.mMainNavigator.selectedChild.label];
			}
			
			public function get currentEntities():Array
			{	
				if( !this.mMainNavigator.selectedChild ) return [];
				return this.getEntitiesByInd( this.mMainNavigator.selectedChild.label );
			}
			
			public function getEntitiesByInd( ind:String ):Array
			{
				var section:Group = this.mSectionInd2Content[ind];
				if( !section ) return [];
				
				var ret:Array = [], i:int = 0;
				for( i=0; i<section.numElements; i++ )
				{
					var item:IVisualElement = section.getElementAt( i );
					if( !(item as Entity) ) continue;
					ret.push( item );
				}
				
				return ret; 
			}
			
			public function getMonsterBySID( sid:String, ind:String ):Entity
			{
				var section:Group = this.mSectionInd2Content[ind];
				if( !section ) return null;
				
				var ret:Array = [], i:int = 0;
				for( i=0; i<section.numElements; i++ )
				{
					var item:Entity = section.getElementAt( i ) as Entity;
					if( !item || item.globalId != sid ) continue;
					return item;
				}
				
				return null; 
			}
			
			public function getMonsterByPoint( pos:Point, ind:String ):Entity
			{
				var section:Group = this.mSectionInd2Content[ind];
				if( !section ) return null;
				
				var local:Point = section.globalToLocal( pos );
				var ret:Array = [], i:int = 0;
				for( i=0; i<section.numElements; i++ )
				{
					var item:Entity = section.getElementAt( i ) as Entity;
					if( !item ) continue;
					
					if( item.getBounds( section ).contains( local.x, local.y ) ) 
						return item;
				}
				
				return null; 
			}
			
			public function isSelected( item:Component ):Boolean
			{
				for each( var cmp:Component in this.mSelectedComponents )
				{
					if( cmp == item ) return true;
				}
				return false;
			}
			
			// -------------------------------
			//////
			static protected function makeCoordinator( coord:Group ):void
			{
				var i:int = 0, tmp:int = 0,
					numRow:int = int( coord.height/EditSection.kGridHeight ),
					numCol:int = int( EditSection.kSceneWidth/EditSection.kGridWidth );
				coord.graphics.clear();
				coord.graphics.lineStyle( 1, 0, 0.3 );
				for( i=0; i<=numRow; i++ )
				{
					tmp = -i * EditSection.kGridHeight+EditSection.kSceneHeight;
					coord.graphics.moveTo( 0, tmp );
					coord.graphics.lineTo( EditSection.kSceneWidth, tmp ); 
				}
				for( i=1; i<numCol; i++ )
				{
					coord.graphics.moveTo( i*EditSection.kGridWidth, EditSection.kSceneHeight );
					coord.graphics.lineTo( i*EditSection.kGridWidth, 0 );
				}
				
				coord.graphics.lineStyle(2);
				var markTick:Number = 80;
				for( i=0; i<=(EditSection.kSceneHeight/markTick); i++ )
				{
					tmp = EditSection.kSceneHeight - i*markTick;
					var mark:Label = new Label();
					with( mark ) {
						x = -30; y = tmp-15; width = 60; 
						text =  String(2*int(i*markTick));
					}
						
					coord.addElement( mark );
					coord.graphics.moveTo(-1, tmp );
					coord.graphics.lineTo(-5, tmp );
				}
				
				coord.graphics.lineStyle(1.5, 0xFF4444, 0.75);
				coord.graphics.moveTo( 0, EditSection.kSceneHeight - 240 );
				coord.graphics.lineTo( EditSection.kSceneWidth, EditSection.kSceneHeight - 240 );
				coord.graphics.moveTo( 0, EditSection.kSceneHeight - 540 );
				coord.graphics.lineTo( EditSection.kSceneWidth, EditSection.kSceneHeight - 540 );
			};
			
			
			static public function makeComponentByType( type:String ):Component 
			{
				if( !Data.getInstance().getEnemyProfileById( 
					Runtime.getInstance().currentLevelID, type ) ) return null;
				
				var item:Entity = new Entity( type, true );
				item.setBaseSize( 50 );
				item.setTextTipsSize( 12 );
				return item;
			}
			
			static protected var gComponentInd:int = 0;
			static protected function makeGlobalId():String 
			{
				return new Date().time + String(gComponentInd++);
			}
			
			static public function getGridPos( src:Point ):Point
			{
				var dst:Point = new Point();
				var postWidth:Number = EditSection.kGridWidth*0.5;
				dst.x = (Math.floor(src.x / postWidth))*postWidth;
				dst.y = (Math.floor(src.y / EditSection.kGridHeight))*EditSection.kGridHeight;
				return dst;
			}
		]]>
	</fx:Script>
	<!-- background color -->
	<s:Rect top="0" left="0" right="0" bottom="0">
		<s:fill><s:SolidColor color="0xEEEEFF"/></s:fill>
	</s:Rect>
	
	<s:Group left="240" width="315" height="100%">
		<mx:TabNavigator id="mMainNavigator" right="0" width="315" height="100%">
		</mx:TabNavigator>
		<s:Button id="mAppendSection" right="0" top="0" width="30" label="+" />
	</s:Group>
	<s:VGroup left="5" width="200" height="90%" verticalCenter="0">
		<s:Panel id="mComponentInfoPanel" width="100%" height="75" borderColor="#DEDCDC"
				 borderVisible="true" dropShadowVisible="false" title="怪物信息">
			<s:Group left="5" right="5" top="5" bottom="5">
				<s:Label id="mInfoMousePos0" left="5" top="10" bottom="10" text="延迟时间："/>
				<s:TextInput id="mSecDelayInput" left="75" right="25" top="5" bottom="5" prompt="0"/>
			</s:Group>
		</s:Panel>
		<s:Panel id="mSelectedInfoPanel" width="100%" height="150" borderColor="#DEDCDC"
				 borderVisible="true" dropShadowVisible="false" title="选择信息">
			<s:List id="mSelectedList" left="5" right="5" top="5" bottom="5" borderVisible="false"></s:List>
		</s:Panel>
		<s:Panel id="mSectionInfoPanel" width="100%" height="155" borderColor="#DEDCDC"
				 borderVisible="true" dropShadowVisible="false" title="编辑信息">
			<s:Group left="5" right="5" top="5" bottom="5">
				<s:Button id="mEditSection" left="5" bottom="5" width="85" label="编辑回合"/>
				<s:Button id="mCopySection" left="5" bottom="30" width="85" label="复制回合"/>
				<s:Button id="mPasteSection" right="5" bottom="30" width="85" label="粘贴回合"
						  chromeColor="#FDB9B9" enabled="false"/>
				<s:Button id="mEraseSection" right="5" bottom="5" width="85" label="删除回合"
						  chromeColor="#FDB9B9"/>
				<s:Label id="mInfoMousePos" left="5" top="5" text="鼠标位置：(0, 0)"/>
				<s:Label id="mInfoNumComponents" left="5" top="25" text="实体数量：0"/>
				<s:Label id="mInfoCopiedSection" left="5" top="45" text="回合黏贴：未开启"/>
			</s:Group>
		</s:Panel>
	</s:VGroup>
	
</s:Module>
